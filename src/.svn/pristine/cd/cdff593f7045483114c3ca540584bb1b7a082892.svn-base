import React, { Component } from 'react'
import { Select } from 'antd'
import _ from 'lodash'
import $ from 'jquery'
import { withRouter } from 'react-router-dom'
import { Scrollbars } from 'react-custom-scrollbars'

import contextList from '../ContextList'
import WyTable from '../../components/WyTable'
import { wyAxiosPost } from '../../components/WyAxios'
import WySpin from '../../components/WySpin'
const Option = Select.Option
class TableView extends Component{
  constructor(props){
    super(props)
    const { getInstance } = props
    if(typeof getInstance === 'function'){
      getInstance(this)
    }
    this.compileColumns = (initColumns)=>{
      let newColumns
      if(initColumns.length > 0){
        newColumns = initColumns.map(item=>{
          const str = ''
           item.render = (text, record, index) => {
               return <span style={{display: "inline-block",width: "100%"}} title={text} className="noWrap" > {text} </span>
           }
           return item
        })
      }
      return newColumns
    }
  }
  state={
    subTime: [],
    xData: [],
    yData: [],
    initColumns: [],//原始title行
    standarList: ['d_id','sip','flow_to','dip','diff_time','caplen'], //被选中要显示的指标
	curLen: 6,//被选中指标的长度
    isSpining: false,
    subTime:[],
    pageSize:5,
   //  dropListInfo: {
   //   dropData: [],
   //   dropPosition: {x:"0px",y:"0px"},
   //   isexist: false
   // }
  }

  componentWillReceiveProps(nextProps){
    if(!(
        JSON.stringify(this.props.subTime) === JSON.stringify(nextProps.subTime) &&
        this.props.id === nextProps.id
      ) && nextProps.id !== ''
    ){
      let info = Object.assign({},nextProps.param,{ipId:nextProps.id},{dataType:this.props.dataType},{field: nextProps.field},{start_time:nextProps.subTime[0]},{last_time:nextProps.subTime[1]})
	  //设置指标显示
	  if (nextProps.param.objType === 'http' && this.props.dataType === 'applydata')
	  {
		  this.setState({
			  standarList:['sip','bytes','data_time','url'],
			  curLen:4
		   })
	  }
	  else if (nextProps.param.objType === 'db' && this.props.dataType === 'applydata')
	  {
		   this.setState({
			  standarList:['sip','bytes','data_time','client_sql'],
			  curLen:4
		   })
	  }
	  this.setState({
        isSpining: true
      })
      wyAxiosPost('TwoView/getTwoTable',{info: info},(result)=>{
        const responseData = result.data.msg
        const newxxx = []
        if(responseData.xxx && responseData.xxx.length>0){
          responseData.xxx.map(item=>{
            if(this.state.standarList.indexOf(item.key) !== -1){
              newxxx.push(item)
            }
          })
        }
        const subTime = []
        subTime.push(info.start_time)
        subTime.push(info.last_time)
        this.setState({
          initColumns: responseData.xxx,
          xData: this.compileColumns(newxxx),
          yData: responseData.yyy,
          isSpining: false,
          subTime
        })
      })
    }
  }
  standarChange = (value)=>{
    this.setState({
      standarList: value,
      curLen: value.length
    },()=>{
      const newxxx = []
      if(this.state.initColumns && this.state.initColumns.length>0){
        this.state.initColumns.map(item=>{
          if(this.state.standarList.indexOf(item.key) !== -1){
            newxxx.push(item)
          }
        })
        this.setState({
          xData: this.compileColumns(newxxx)
        })
      }
    })
  }
  setSubTime = (tableTime)=>{
    this.setState({
      subTime: tableTime
    },()=>{
      let info = Object.assign({},this.props.param,{ipId:this.props.id},{dataType:this.props.dataType},{field: this.props.field},{start_time:this.state.subTime[0]},{last_time:this.state.subTime[1]})
      this.setState({
        isSpining: true
      })
      wyAxiosPost('TwoView/getTwoTable',{info: info},(result)=>{
        const responseData = result.data.msg
        const newxxx = []
        if(responseData.xxx && responseData.xxx.length>0){
          responseData.xxx.map(item=>{
            if(this.state.standarList.indexOf(item.key) !== -1){
              newxxx.push(item)
            }
          })
        }
        this.setState({
          initColumns: responseData.xxx,
          xData: this.compileColumns(newxxx),
          yData: responseData.yyy,
          isSpining: false
        })
      })
    })
  }
  pageSizeChange = (current, size)=>{
    this.setState({
      pageSize: size
    })
  }
  // tableContextmenu = (record,position,dom)=>{
  //   $('.drcontainer').removeClass('dropShow').addClass('dropHide')
  //   $(dom).closest('.moduleBody').find('.drcontainer').removeClass('dropHide').addClass('dropShow')
  //   let info ={
  //     listType:'netmouth',
  //     start_time: this.state.subTime[0],
  //     last_time: this.state.subTime[1],
  //     obj: record.port,
  //     objType: 'port',
  //     previousPath:this.props.param.previousPath
  //   }
  //   this.setState({
  //     dropListInfo: {
  //        dropData: contextList(info),
  //        dropPosition: {x:position.x+"px",y:position.y+"px"},
  //        isexist: true
  //     }
  //   })
  // }
  render(){
    return(
      <div className="amodule">
        <div className="moduleHeader">
		{this.props.moduleName}
          <span style={{float:"right"}}>
            <span>指标显示：</span>
            <Select
              style={{minWidth: "180px"}}
              mode="tags"
              size="small"
              onChange={this.standarChange}
              maxTagCount={0}
              maxTagPlaceholder={()=>('已选'+this.state.curLen+'项')}
              value={this.state.standarList}
            >
              {
                this.state.initColumns && this.state.initColumns.length>0?
                this.state.initColumns.map(item=>{
                  return(
                    <Option key={item.key}>{item.title}</Option>
                  )
                })
                :
                ''
              }
            </Select>
          </span>
        </div>
        <div className="moduleBody">
          <WySpin isSpining={this.state.isSpining}>
            <Scrollbars
              autoHide
              autoHideTimeout={100}
              autoHideDuration={200}
              universal={true}
              style={{height:300}}
              >
                <WyTable
                  xData={this.state.xData?this.state.xData:[]}
                  yData={this.state.yData?this.state.yData:[]}
                  pageSize={this.state.pageSize}
                  onShowSizeChange={this.pageSizeChange}
                />
              </Scrollbars>
          </WySpin>
        </div>
      </div>
    )
  }
}

export default TableView
