import React, { Component } from 'react'
import { Select, Row, Col, Button, Modal, Input, Divider, message } from 'antd'
import axios from 'axios'
import propTypes from 'prop-types'

import { wyAxiosPost } from '../components/WyAxios'
import LineSet from './LineSet'
import TemplateForLineWhenNew from './TemplateForLineWhenNew'
import TemplateForTableWhenNew from './TemplateForTableWhenNew'
import WyTableSet from './WyTableSet'
import { host } from '../components/Host'
import { forName } from '../components/RegExp'
const Option = Select.Option
class OneTab extends Component{
  constructor(props){
    super(props);
    this.viewState = null;
  }
  state = {
    visible: false,
    saveVisible: false,
    moduleName:'',
    dataSourceList:[],
    dataSource:'',
    viewType: '',
    oneTab:[],
    viewPageName:''
  }

  componentDidMount(){
	  const _this = this
  	wyAxiosPost('Source/getSource',{},function(ret){
    		_this.setState({
    			dataSourceList: [...ret.data.msg],
    		})
    })
  }
//dataSourceChange事件
  dataSourceChange = (value)=>{
    this.setState({
      dataSource: value
    })
  }
//viewTypeChange事件
  viewTypeChange = (value) => {
    this.setState({
      viewType: value
    })
  }
  //模态框事件
  showModal = () => {
    this.setState({
      visible: true,
      moduleName:'',
      dataSource:'',
      viewType: ''
    });
  }
  saveShowModal = () => {
    this.setState({
      saveVisible: true,
    });
  }
  //生成视图
  generateView = (isclose)=>{
    const viewData = this.viewState.state
    const erroList = []
    //验证viewType为曲线和柱状的时候
    if(this.state.viewType === 'line' || this.state.viewType === 'bar'){
      if(viewData.xdata === ''){
        erroList.push('x轴不能为空')
      }
      if(viewData.yydata === '' && viewData.alldata.length === 0 && viewData.adata === ''){
        erroList.push('y轴和数据列不能同时为空')
      }
    }
    if(this.state.viewType === 'wytable'){
      if(viewData.tableTitle.length === 0){
        erroList.push('数据列不能为空')
      }
    }
    if(erroList.length === 0){
      let data = {}
      const randomCount = Math.random();
      const curTime = new Date().getTime();
      const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100
      data.id = asId.toString()
      if(this.state.viewType === 'line' || this.state.viewType === 'bar'){
        data.xdata = viewData.xdata
        data.yydata = viewData.yydata
        data.ydata = viewData.ydata
        data.alldata = viewData.alldata
        data.adata = viewData.adata
        data.orderSort = viewData.orderSort
        data.order = viewData.order
        data.time_unit = viewData.time_unit
        data.limitCount = viewData.limitCount
        data.viewWidth = viewData.viewWidth
        data.dataSource = this.state.dataSource
        data.viewType = this.state.viewType
        data.moduleName = this.state.moduleName
      }else if(this.state.viewType === 'wytable'){
        data.tableTitle = viewData.tableTitle
        data.orderSort = viewData.orderSort
        data.order = viewData.order
        data.time_unit = viewData.time_unit
        data.limitCount = viewData.limitCount
        data.viewWidth = viewData.viewWidth
        data.dataSource = this.state.dataSource
        data.viewType = this.state.viewType
        data.moduleName = this.state.moduleName
      }
      let subArr = [...this.state.oneTab]
      subArr.push(data)
      this.setState({
        oneTab: [...subArr],
        moduleName:'',
        dataSource:'',
        viewType: ''
      })
      if(isclose){
        this.setState({
          visible: false,
        });
      }
    }else{
      let str = ''
      erroList.map((item,index)=>{
        str += index+1+'.'+item+'   '
      })
      message.warning(str)
    }
  }
  //确认按钮获取所有数据
  handleOk = (isclose) => {
    const aerroList = []
    if(this.state.moduleName === ''){
      aerroList.push('名称不能为空')
    }else if(this.state.moduleName !== '' && !forName.test(this.state.moduleName)){
      aerroList.push('名称格式错误')
    }
    if(this.state.dataSource === ''){
      aerroList.push('数据源不能为空')
    }
    if(this.state.viewType === ''){
      aerroList.push('视图类型不能为空')
    }
    if(aerroList.length === 0){
      this.generateView(isclose)
    }else{
      let str = ''
      aerroList.map((item,index)=>{
        str += index+1+'.'+item+'   '
      })
      message.warning(str)
    }
  }
  saveHandleOk = (e)=>{
    let pageData = {}
    pageData.name = this.state.viewPageName
    pageData.content = this.state.oneTab
  	wyAxiosPost('View/saveView',{info:pageData},(result)=>{
		  this.props.updatePanes(result.data.id)
      this.setState({
        xxx: result.data.xxx,
        yyy: result.data.yyy,
        unit: result.data.unit,
        oneTab: [],
        saveVisible: false
      })
      message.success(result.data.msg)
    })
  }

  handleCancel = (e) => {
    this.setState({
      visible: false,
    });
  }
  saveHandleCancel = (e) => {
    this.setState({
      saveVisible: false,
    });
  }
  //viewPageNameChange事件
  viewPageNameChange = (e)=>{
    this.setState({
      viewPageName: e.target.value
    })
  }
  //moduleNameChange事件
  moduleNameChange = (e) => {
    this.setState({
      moduleName: e.target.value
    })
  }
  //deleteModule事件
  deleteModule = (curId)=>{
    let subArr = [...this.state.oneTab]
    subArr.map((item,index)=>{
      if(item.id === curId){
        subArr.splice(index, 1);
      }
    })
    this.setState({
      oneTab: [...subArr]
    })
  }

  //获取图标组件
  getChart = (viewType)=>{
    if(viewType === 'line' || viewType === 'bar'){
      return <LineSet ref={(instance)=>{this.viewState=instance}} dataSource={this.state.dataSource} />

    }else if(viewType === 'wytable'){
      return <WyTableSet ref={(instance)=>{this.viewState=instance}} dataSource={this.state.dataSource} />
    }

  }
  render(){
    return(
      <div>
        <div>
          <Button type="primary" onClick={this.showModal}>添加视图</Button>
          {
            this.state.oneTab && this.state.oneTab.length>0?
            <Button type="primary" onClick={this.saveShowModal} style={{float: "right"}}>保存视图</Button>
            :
            ''
          }
          <Modal
            title="保存视图"
            visible={this.state.saveVisible}
            onOk={this.saveHandleOk}
            onCancel={this.saveHandleCancel}
          >
            <div style={{display: "flex",justifyContent:"flext-start", marginBottom:"10px"}}>
              <div style={{flexBasis:"120px",lineHeight: "30px"}}>
                视图名称：
              </div>
              <div style={{flex:"auto"}}>
                <Input value={this.state.viewPageName} onChange={this.viewPageNameChange}/>
              </div>
            </div>
          </Modal>

          <Modal
            title="添加视图"
            visible={this.state.visible}
            onOk={this.handleOk}
            onCancel={this.handleCancel}
            footer = {null}
          >
            <div style={{display: "flex",justifyContent:"flext-start", marginBottom:"10px"}}>
              <div style={{flexBasis:"120px",lineHeight: "30px"}}>
                模块名称：
              </div>
              <div style={{flex:"auto"}}>
                 <Input value={this.state.moduleName} onChange={this.moduleNameChange}/>
              </div>
            </div>
            <div style={{display: "flex",justifyContent:"flext-start", marginBottom:"10px"}}>
              <div style={{flexBasis:"120px",lineHeight: "30px"}}>
                数据源：
              </div>
              <div style={{flex:"auto"}}>
                 <Select style={{width:"100%"}} value={this.state.dataSource} onChange={this.dataSourceChange}>
                  <Option key="mykey" value="">请选择</Option>
                  {
                    this.state.dataSourceList && this.state.dataSourceList.length>0?
                    this.state.dataSourceList.map(item=>{
                      return(
                        <Option key={item.id} value={item.id}>{item.name}</Option>
                      )
                    })
                    :
                    ''
                  }
                 </Select>
              </div>
            </div>
            <div style={{display: "flex",justifyContent:"flext-start", marginBottom:"10px"}}>
              <div style={{flexBasis:"120px",lineHeight: "30px"}}>
                视图类型：
              </div>
              <div style={{flex:"auto"}}>
                 <Select style={{width:"120px"}} value={this.state.viewType} onChange={this.viewTypeChange}>
                  <Option key="mykey" value="">请选择</Option>
                  <Option key="line" value="line">曲线图</Option>
                  <Option key="bar" value="bar">柱状图</Option>
                  <Option key="wytable" value="wytable">表格</Option>
                 </Select>
              </div>
            </div>
            {
              this.getChart(this.state.viewType)
            }
            <Divider />
            <div style={{display: "flex",justifyContent:"flex-end"}}>
              <Button onClick={this.handleCancel}>取消</Button>
              <Button onClick={()=>{this.handleOk(false)}} style={{margin: "0 10px 0 10px"}} type="primary">添加并继续</Button>
              <Button onClick={()=>{this.handleOk(true)}} type="primary">添加并退出</Button>
            </div>
          </Modal>
        </div>
        <Row gutter={16}>
          {
            this.state.oneTab && this.state.oneTab.length>0?
            this.state.oneTab.map(item=>{
              if(item.viewType === 'line' || item.viewType === 'bar'){
                const curId = item.id
                return(
                  <Col key={item.id} span={item.viewWidth} style={{marginTop:"10px"}}>
                    <TemplateForLineWhenNew viewId={item.id} key={item.id} curViewData={item} deleteModule={this.deleteModule}/>
                  </Col>
                )
              }else if(item.viewType === 'wytable'){
                const curId = item.id
                return(
                  <Col key={item.id} span={item.viewWidth} style={{marginTop:"10px"}}>
                    <TemplateForTableWhenNew key={item.id} viewId={item.id} curViewData={item} deleteModule={this.deleteModule}/>
                  </Col>
                )
              }else{
                return ''
              }
            })
            :
            ''
          }
        </Row>
      </div>
    )
  }
}

OneTab.propTypes = {
  updatePanes: propTypes.func.isRequired
}
export default OneTab
