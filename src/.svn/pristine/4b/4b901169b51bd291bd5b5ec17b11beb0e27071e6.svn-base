import React, { Component } from 'react'
import { Select } from 'antd'
import _ from 'lodash'
import $ from 'jquery'
import { withRouter } from 'react-router-dom'

import contextList from '../ContextList'
import WyTable from '../../components/WyTable'
import { wyAxiosPost } from '../../components/WyAxios'
import WySpin from '../../components/WySpin'
const Option = Select.Option
class TableClickView extends Component{
  constructor(props){
    super(props)
    this.compileColumns = (activeRowKey,initColumns)=>{
      let newColumns
      if(initColumns.length > 0){
        newColumns = initColumns.map(item=>{
          const str = ''
           item.render = (text, record, index) => {
             if(record.key === activeRowKey){
               return <span style={{cursor: "pointer",display: "inline-block",width: "100%"}} className="activeRow" > {text} </span>
             }else{
              return <span style={{cursor: "pointer",display: "inline-block",width: "100%"}} className="" > {text} </span>
             }
           }
           return item
        })
      }
      return newColumns
    }
  }
  state={
    subTime: [],
    xData: [],
    yData: [],

    initColumns: [],//原始title行
    standarList: ['sip','sport','dip','dport','ifname','bytes','packets','app_bytes','ret','fail_request'],//被选中要显示的指标
    curLen: 10,//被选中指标的长度
    isSpining: false,
    subTime:[],
    pageSize:5,
    dropListInfo: {
     dropData: [],
     dropPosition: {x:"0px",y:"0px"},
     isexist: false
   },
   activeRowKey:''
  }
  componentWillReceiveProps(nextProps){
    if(!(
      JSON.stringify(this.props.subTime) === JSON.stringify(nextProps.subTime)
    )){
      let info = Object.assign({},nextProps.param,{dataType:this.props.dataType},{field: nextProps.field},{start_time:nextProps.subTime[0]},{last_time:nextProps.subTime[1]})
      this.setState({
        isSpining: true
      })
      wyAxiosPost('TwoView/getTwoTable',{info: info},(result)=>{
        const responseData = result.data.msg
        const subTime = []
        subTime.push(info.start_time)
        subTime.push(info.last_time)
        const initColumns = responseData.xxx
        if(responseData.yyy.length>0){
          const activeRowKey=responseData.yyy[0].key
          const newColumns = this.compileColumns(activeRowKey,initColumns)
          this.props.setFatherComponent(responseData.yyy[0].key)

          const newxxx = []
          if(newColumns && newColumns.length>0){
            newColumns.map(item=>{
              if(this.state.standarList.indexOf(item.key) !== -1){
                newxxx.push(item)
              }
            })
          }
          this.setState({
            initColumns,
            activeRowKey,
            xData: newxxx,
            yData: responseData.yyy,
            isSpining: false,
            subTime
          })
        }else{
          const newxxx = []
          if(responseData.xxx && responseData.xxx.length>0){
            responseData.xxx.map(item=>{
              if(this.state.standarList.indexOf(item.key) !== -1){
                newxxx.push(item)
              }
            })
          }
          this.setState({
            initColumns,
            xData: newxxx,
            yData: responseData.yyy,
            isSpining: false,
            subTime
          })

        }
      })
    }
  }
  standarChange = (value)=>{
    this.setState({
      standarList: value,
      curLen: value.length
    },()=>{
      const newxxx = []
      if(this.state.initColumns && this.state.initColumns.length>0){
        this.state.initColumns.map(item=>{
          if(this.state.standarList.indexOf(item.key) !== -1){
            newxxx.push(item)
          }
        })
        this.setState({
          xData: newxxx
        })
      }
    })
  }
  setSubTime = (tableTime)=>{
    this.setState({
      subTime: tableTime
    },()=>{
      let info = Object.assign({},this.props.param,{dataType:this.props.dataType},{field: this.props.field},{start_time:this.state.subTime[0]},{last_time:this.state.subTime[1]})
      this.setState({
        isSpining: true
      })
      wyAxiosPost('TwoView/getTwoTable',{info: info},(result)=>{
        const responseData = result.data.msg
        if(responseData.yyy.length>0){
          const activeRowKey=responseData.yyy[0].key
          this.props.setFatherComponent(activeRowKey)
          const initColumns = responseData.xxx
          const newColumns = this.compileColumns(activeRowKey,initColumns)
          const newxxx = []
          if(newColumns && newColumns.length>0){
            newColumns.map(item=>{
              if(this.state.standarList.indexOf(item.key) !== -1){
                newxxx.push(item)
              }
            })
          }
          this.setState({
            initColumns: responseData.xxx,
            xData: newxxx,
            yData: responseData.yyy,
            activeRowKey,
            isSpining: false
          })
        }
      })
    })
  }
  pageSizeChange = (current, size)=>{
    this.setState({
      pageSize: size
    })
  }
  downloadPackage = (info)=>{
    wyAxiosPost('Download/downloadpacket',{info: info},(result)=>{
      const a = document.createElement('a'); //创建一个<a></a>标签
      a.href = result.data.msg; // response is a blob
      //a.download = "package.pcap";  //文件名称
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();
      a.remove();
    })
  }
  tableContextmenu = (record,position,dom)=>{
    $('.drcontainer').removeClass('dropShow').addClass('dropHide')
    $(dom).closest('.moduleBody').find('.drcontainer').removeClass('dropHide').addClass('dropShow')
    let info ={
      listType:'downloadpackage',
      // start_time: this.state.subTime[0],
      // last_time: this.state.subTime[1],
      // obj: record.port,
      // objType: 'port',
      // previousPath:this.props.param.previousPath,
      onClick: (param)=>{this.downloadPackage(param)},
      param:{
        appName: this.props.param.obj,
        ap_id: record.ap_id,
        start_time: this.state.subTime[0],
        last_time: this.state.subTime[1]
      }
    }
    console.log(info.param)
    this.setState({
      dropListInfo: {
         dropData: contextList(info),
         dropPosition: {x:position.x+"px",y:position.y+"px"},
         isexist: true
      }
    })
  }
  onTableClick = (record)=>{
    this.props.setFatherComponent(record.key)
    const activeRowKey = record.key
    const initColumns = this.state.initColumns
    const newColumns = this.compileColumns(activeRowKey,initColumns)
    const newxxx = []
    if(newColumns && newColumns.length>0){
      newColumns.map(item=>{
        if(this.state.standarList.indexOf(item.key) !== -1){
          newxxx.push(item)
        }
      })
    }
    this.setState({
      activeRowKey,
      xData: [...newxxx]
    })
  }
  render(){
    return(
      <div className="amodule">
        <div className="moduleHeader">
          <span style={{float:"right"}}>
            <span>指标显示：</span>
            <Select
              style={{minWidth: "180px"}}
              mode="tags"
              size="small"
              onChange={this.standarChange}
              maxTagCount={0}
              maxTagPlaceholder={()=>('已选'+this.state.curLen+'项')}
              value={this.state.standarList}
            >
              {
                this.state.initColumns && this.state.initColumns.length>0?
                this.state.initColumns.map(item=>{
                  return(
                    <Option key={item.key}>{item.title}</Option>
                  )
                })
                :
                ''
              }
            </Select>
          </span>
        </div>
        <div className="moduleBody">
          <WySpin isSpining={this.state.isSpining}>
            <WyTable
              xData={this.state.xData?this.state.xData:[]}
              yData={this.state.yData?this.state.yData:[]}
              pageSize={this.state.pageSize}
              onShowSizeChange={this.pageSizeChange}
              onTableContextmenu={this.tableContextmenu}
              dropListInfo={_.cloneDeep(this.state.dropListInfo)}
              onTableClick={this.onTableClick}
            />
          </WySpin>
        </div>
      </div>
    )
  }
}

export default TableClickView
