import React from 'react';
// import ReactDOM from 'react-dom';
import { Tabs, Button, Divider ,  } from 'antd';
import SetBasic from './SetBasic';
import SetTime from './SetTime';
import SetRule from './SetRule';
import SetEmail from './SetEmail';
// import PropTypes from "prop-types";
import WySpin from '../components/WySpin'
import { wyAxiosPost } from '../components/WyAxios'
// var fs = require('fs')
const TabPane = Tabs.TabPane;
var dataAll={};
var Net_App_Node = {}
class StepWindow extends React.Component{
    constructor(props){
        super(props);
        this.state={
            data:[],
            activeKey:"1",
            isSpining:true
            // operations:''
        }
    }
    //   // 父组件声明自己支持 context
    // static childContextTypes = {
    //     getInstance: PropTypes.func,
    // }
    // // 父组件提供一个函数，用来返回相应的 context 对象
    // getChildContext() {
    //     return {
    //         getInstance: this.getInstance.bind(this)
    //     }
    // }

    componentDidMount = () => {
        
        // 请求Net、App、Node
        // wyAxiosPost('Alert/getNet',{info: ''},(result)=>{
        //     // console.log(result)
        //     if (result.ret === 200) {
        //         if (result.data.status === 1) {
        //             Net_App_Node.net = result.data.msg
        //         }
        //     } 
        // })
        // wyAxiosPost('Alert/getApp',{info: ''},(result)=>{
        //     if (result.ret === 200) {
        //         if (result.data.status === 1) {
        //             Net_App_Node.app = result.data.msg
        //         }
        //     }         
        // })
        // wyAxiosPost('Alert/getNode',{info: ''},(result)=>{
        //     if (result.ret === 200) {
        //         if (result.data.status === 1) {
        //             Net_App_Node.node = result.data.msg

        //         }
        //     }     
        // })
            var req1 = new Promise((resolve,rejects) => {
                wyAxiosPost('Alert/getNet',{info: ''},(result)=>{
                if (result.ret === 200) {
                    if (result.data.status === 1) {
                        Net_App_Node.net = result.data.msg
                        resolve(Net_App_Node)
                    }
                } 
            })
        })
            var req2 = new Promise((resolve,rejects) => {
                wyAxiosPost('Alert/getApp',{info: ''},(result)=>{
                if (result.ret === 200) {
                    if (result.data.status === 1) {
                        Net_App_Node.app = result.data.msg
                        resolve(Net_App_Node)
                    }
                } 
            })
        })
    var req3 = new Promise((resolve,rejects) => {
            wyAxiosPost('Alert/getNode',{info: ''},(result)=>{
            if (result.ret === 200) {
                if (result.data.status === 1) {
                    Net_App_Node.node = result.data.msg
                    resolve(Net_App_Node)
                }
            } 
        })
    })
    var req4 = new Promise((resolve,rejects) => {
            wyAxiosPost('alert/getEmail',{info: ''},(result)=>{
            if (result.ret === 200) {
                if (result.data.status === 1) {
                    Net_App_Node.email = result.data.msg
                    resolve(Net_App_Node)
                }
            } 
        })
    })

    Promise
    .all([req1,req2,req3,req4])
    .then((result) => {
            localStorage.setItem('Net_App_Node',JSON.stringify(result[0])) 
            this.setState({
                isSpining: false
            }) 
        })
    }
  

    callback=(key)=> {
        // dataAll.basic.type.key = key === '3' ? localStorage.getItem('danger_type') : 'value'
        this.setState({
            activeKey:key,
        })
    }
    onButtonClick = (key) =>{
        switch (key) {
            case "cancle":
               dataAll={};
               this.props.onClose();
                break;
            case "firstNext":
                dataAll.basic = this.childCp.onSubmit();
                if (dataAll.basic){
                  this.setState({
                    activeKey: '2'
                });
                };
                break;
            case "firstLast":
                dataAll.basic={};
                this.setState({
                    activeKey: '1'
                });
                break;
            case "secondNext":
                // dataAll.time=this.childCp2.onSubmit();
               
                   this.setState({
                    activeKey: '3'
                });
            
                break;
            case "secondLast":
                dataAll.time={};
                this.setState({
                    activeKey: '2'
                });
                break;
            case "thirdNext":
                // dataAll.rule = this.childCpt3.onSubmit();
                this.setState({
                    activeKey: '4'
                });
                break;
            case "thirdLast":
                dataAll.rule = {};
                this.setState({
                    activeKey: '3'
                });
                break;
            case "save":
                dataAll.email=this.childCps.onSubmit();
                dataAll.basic = this.childCp.onSubmit();
                dataAll.time = this.childCp2.onSubmit();
                dataAll.rule = this.childCpt3.onSubmit();
                this.onDataSubmit(dataAll);
                this.props.onClose();
                dataAll = {};
                break;
            default:
                break;
        }
    }

    onDataSubmit = (data) => {
        // fs.writeFile('C:\\Users\\xieming\\Desktop\\data.js',data,function (err) {
        //     if (err) {
        //         console.log(err)
        //     }
        // })
        // if (data.tiem) {
            // localStorage.setItem('danger_tic',JSON.stringify(data))
        // }
        
        
    //   wyAxiosPost('Alert/saveAlert',{info: data},(result)=>{
    //         console.log(data)        
    //   })
    }
    render(){
        var { activeKey } = this.state;
        const dataArr = this.props.flag === 'editor' ?  JSON.parse(localStorage.getItem('danger_tic'))  ? JSON.parse(localStorage.getItem('danger_tic')) : {} : {}
        var operations;
        switch (activeKey) {
            case "1":
                operations = <div ><Button onClick={this.onButtonClick.bind(this, "cancle")} >取消</Button>&nbsp;<Button type="primary" onClick={this.onButtonClick.bind(this, "firstNext")} >下一步</Button > </div>
                break;

            case "2":

                    operations= <div><Button onClick={this.onButtonClick.bind(this, "cancle")}>取消</Button>&nbsp;<Button onClick={this.onButtonClick.bind(this, "firstLast")} type="primary">上一步</Button> &nbsp;<Button onClick={this.onButtonClick.bind(this, "secondNext")} type="primary">下一步</Button> </div>

                break;
            case "3":

                    operations= <div><Button onClick={this.onButtonClick.bind(this, "cancle")}>取消</Button>&nbsp;<Button type="primary" onClick={this.onButtonClick.bind(this, "secondLast")}>上一步</Button> &nbsp;<Button onClick={this.onButtonClick.bind(this, "thirdNext")} type="primary">下一步</Button> </div>

                break;
            case "4":

                operations = <div><Button onClick={this.onButtonClick.bind(this, "cancle")}>取消</Button>&nbsp;<Button type="primary" onClick={this.onButtonClick.bind(this, "thirdLast")}>上一步</Button>&nbsp;<Button onClick={this.onButtonClick.bind(this, "save")} type="primary">保存</Button></div>

                break;
            default:
                break;
        }
        // console.log(Net_App_Node)
        return(
            <WySpin isSpining={this.state.isSpining}>

                {!(this.state.isSpining) ?<div>
                    <Tabs type="card" activeKey={ activeKey} onChange={this.callback.bind(this)}   className="tabds" style={{"height":"375px"}}>
                        <TabPane tab="基本属性" key="1"  >
                            <SetBasic wrappedComponentRef={(constance) => { this.subTable = constance }} getInstance={(childCp) => { this.childCp = childCp; }} basic={dataArr.basic} />
                        </TabPane>
                        <TabPane tab="时间选择" key="2"><SetTime wrappedComponentRef={(constance2) => { this.subTable2 = constance2 }} getInstance={(childCp2) => { this.childCp2 = childCp2; }} time={dataArr.time}/></TabPane>
                        <TabPane tab="告警规则" key="3" ><SetRule wrappedComponentRef={(constancet3) => { this.subTablet3 = constancet3 }} getInstance={(childCpt3) => { this.childCpt3 = childCpt3; }}  rule={dataArr.rule} /></TabPane>
                        <TabPane tab="邮件通知" key="4"><SetEmail wrappedComponentRef={(constances) => { this.subTables = constances }} getInstance={(childCps) => { this.childCps = childCps; }}  email={dataArr.email} /></TabPane>
                    </Tabs>
                    <Divider style={{"marginTop":"0px"}} />
                    <div style={{"float":"right"}}>{operations}</div>
                </div>
            : ''    
            }

            </WySpin>
        )   
        
    }
}
export default StepWindow
