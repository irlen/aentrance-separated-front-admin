import React, { Component } from 'react'
import { withRouter } from 'react-router'
import { connect } from 'react-redux'
import { Row, Col, Button, Popconfirm, message, Modal, Input, Select } from 'antd'
import _ from 'lodash'
import { wyAxiosPost } from '../components/WyAxios'
import WySpin from '../components/WySpin'
import WyTable from '../components/WyTable'
import { forName, forEmail } from '../components/RegExp'
import { setAuth, getCompiledAuth } from '../actions'
const Option = Select.Option
const TextArea = Input.TextArea
class UserManage extends Component{
  state = {
    ids:[],
    xData: [],
    yData: [],
    visible: false,
    isSpining: false,
    pageSize:5,
    id:'',

    userName:'',
    password:'',
    repeatPassword:'',
    role:'2',
    email:'',
    description:'',

    roleList: [],

    resetPasswordVisible: false,
    newPassword:'',
    repeatNewPassword:''
  }
  getUserList = ()=>{
    wyAxiosPost('User/getUser',{},(result)=>{
      const responseData = result.data.msg
      let curxData = _.cloneDeep(responseData.xxx)
      curxData.push({
        title: '编辑',
        dataIndex: 'edit',
        render: (text, record, index)=>(
          <span>
            <span style={{cursor:"pointer",color: "#00CC66"}}
            title="修改用户信息"
            onClick={()=>this.handleEdit(record.id)}>
            <i className="fa fa-pencil-square" aria-hidden="true"></i>
            </span>
            <span style={{cursor:"pointer",color: "#00CC66",marginLeft:"20px"}}
            title="重置密码"
            onClick={()=>this.resetPassword(record.id)}>
            <i className="fa fa-key" aria-hidden="true"></i>
            </span>
          </span>
        )
      })
      this.setState({
        xData: curxData,
        yData: responseData.yyy,
        isSpining: false
      })
    })
  }
  componentDidMount(){
    console.log(this.props)
    this.getUserList()
    wyAxiosPost('Auth/getRoleList',{},(result)=>{
      const responseData = result.data.msg
      this.setState({
        roleList: responseData.yyy
      })
    })
  }
  saveInfo = ()=>{
    const erroList = []
    if(this.state.userName === ''){
      erroList.push('用户名不能为空')
    }
    if(this.state.userName !== '' && !forName.test(this.state.userName)){
      erroList.push('用户名格式有误')
    }
    if(this.state.email === ''){
      erroList.push('邮箱不能为空')
    }
    if(this.state.email !== '' && !forEmail.test(this.state.email)){
      erroList.push('邮箱名格式有误')
    }
    if(!this.state.id){
      if(this.state.password === ''){
        erroList.push('密码不能为空')
      }
      if(this.state.password !== this.state.repeatPassword){
        erroList.push('两次密码输入不同')
      }
    }
    if(erroList.length === 0){
      const info = {}
      info.username = this.state.userName
      if(!this.state.id){
        info.password = this.state.password
      }
      info.email = this.state.email
      info.role_id = this.state.role
      info.note = this.state.description
      info.id = this.state.id
      wyAxiosPost('User/saveUser',{info:info},(result)=>{
        const responseData = result.data
        if( responseData.status === 1){
          this.getUserList()
          message.success(responseData.msg)
          //若是编辑且是编辑自己，此处要更新userInfo和userAuth,并触发全局状态更改
          if(this.state.id && this.state.id === JSON.parse(localStorage.getItem('userInfo')).uid){
            //此处需要一个函数，通过用户名和ID取得更新后的role_id
            const roleId = this.state.role
            let userInfo = JSON.parse(localStorage.userInfo)
            userInfo.role_id = roleId
            localStorage.setItem('userInfo', JSON.stringify(userInfo))
            //做一个触发操作
            this.handleCancel()
            getCompiledAuth(roleId).then((value)=>{
              this.props.dispatch(setAuth(value))
              localStorage.setItem('userAuth', JSON.stringify(value))
              this.props.history.push(this.props.location.pathname)
            })
          }else{
            this.handleCancel()
          }
        }
      })
    }else{
      let str = ''
      erroList.map((item,index)=>{
        str += index+1+'.'+item+'  '
      })
      message.warning(str)
    }
  }
  //删除用户
  handleDelete = ()=>{
    if(this.state.ids.length === 0){
      message.warning('请选择要删除的项')
    }else{
      wyAxiosPost('User/delUser',{data: this.state.ids},(result)=>{
        const responseData = result.data
        if(responseData.status === 1){
          this.getUserList()
          message.success(responseData.msg)
          //如果删除的是自己
          if(this.state.ids.indexOf(JSON.parse(localStorage.getItem('userInfo')).uid) !== -1){
            localStorage.removeItem('userInfo')
            localStorage.removeItem('userAuth')
            this.props.history.push('/login')
            return
          }
          this.setState({
            ids: []
          })
        }
      })
    }
  }
  showModal = () => {
    this.setState({
      visible: true,
    });
  }
  handleOk = (e) => {
    this.saveInfo()
  }
  handleCancel = (e) => {
    this.setState({
      visible: false,
      userName:'',
      password:'',
      repeatPassword:'',
      role:'2',
      email:'',
      description:'',
      id:''
    });
  }
  userNameChange = (e)=>{
    this.setState({
      userName: e.target.value
    })
  }
  passwordChange = (e)=>{
    this.setState({
      password: e.target.value
    })
  }
  repeatPasswordChange = (e)=>{
    this.setState({
      repeatPassword: e.target.value
    })
  }
  roleChange = (value)=>{
    this.setState({
      role: value
    })
  }
  emailChange = (e)=>{
    this.setState({
      email: e.target.value
    })
  }
  descriptionChange = (e)=>{
    this.setState({
      description: e.target.value
    })
  }
  handleEdit = (id)=>{
    this.setState({
      id
    },()=>{
      wyAxiosPost('User/getUser',{id},(result)=>{
        const responseData = result.data.msg
        this.setState({
          userName: responseData.username,
          role: responseData.role_id,
          email: responseData.email,
          description: responseData.note
        },()=>{
          this.showModal()
        })
      })
    })
  }
  newPasswordChange = (e)=>{
    this.setState({
      newPassword: e.target.value
    })
  }
  repeatNewPasswordChange = (e)=>{
    this.setState({
      repeatNewPassword: e.target.value
    })
  }
  ResetPasswordShowModal = ()=>{
    this.setState({
      resetPasswordVisible: true,
    });
  }
  resetPasswordHandleCancel = (e) => {
    this.setState({
      resetPasswordVisible: false,
      newPassword:'',
      repeatNewPassword:'',
      id:''
    });
  }
  resetPassword = (id)=>{
    this.setState({
      id
    },()=>{
      this.ResetPasswordShowModal()
    })
  }
  resetPasswordHandleOk = ()=>{
    const newPassword = this.state.newPassword
    const repeatNewPassword = this.state.repeatNewPassword
    const erroList = []
    if(newPassword === ''){
      erroList.push('新密码不能为空')
    }
    if(newPassword !== '' && newPassword !== repeatNewPassword){
      erroList.push('两次输入不同')
    }
    if(erroList.length === 0){
      const info = {}
      info.id=this.state.id
      info.password = newPassword
      wyAxiosPost('User/resetPwd',{info:info},(result)=>{
        const responseData = result.data
        if( responseData.status === 1){
          this.resetPasswordHandleCancel()
          this.getUserList()
          message.success(responseData.msg)
        }
      })
    }else{
      let str = ''
      erroList.map((item,index)=>{
        str += index+1+'.'+item+'  '
      })
      message.warning(str)
    }
  }
  render(){
    const selectedRowKeys = this.state.ids
    const rowSelection = {
      selectedRowKeys,
      onChange: (selectedRowKeys) => {
        this.setState({
          ids: selectedRowKeys
        })
      }
    }
    return(
      <div className='amodule'>
        <Row gutter={16} style={{marginTop:"20px"}}>
          <Col style={{padding: "20px 0 0 30px"}}>
            <Button type="primary" onClick={this.showModal}>
              <i className="fa fa-plus-square" aria-hidden="true"></i>
              <span style={{marginLeft:"5px"}}>新建</span>
            </Button>
            <Popconfirm placement="topLeft" title={this.state.ids.length>0?`确定要删除这${this.state.ids.length}选项？`:'请先选择您要删除的项？'} onConfirm={this.state.ids.length>0?this.handleDelete:()=>{}} okText="确定" cancelText="取消">
              <Button style={{marginLeft: "10px"}}>
                <i className="fa fa-minus-square" aria-hidden="true"></i>
                <span style={{marginLeft:"5px"}}>删除</span>
              </Button>
            </Popconfirm>
          </Col>
        </Row>
        <Row gutter={16} style={{marginTop:"16px"}}>
          <Col span={24}>
            <WySpin isSpining={this.state.isSpining}>
              <div className="moduleBody">
                <WyTable
                  pageSize={this.state.pageSize}
                  onShowSizeChange={this.pageSizeChange}
                  rowSelection={rowSelection}
                  xData={this.state.xData?this.state.xData:[]}
                  yData={this.state.yData?this.state.yData:[]}
                />
              </div>
            </WySpin>
          </Col>
        </Row>
        <Modal
          title={this.state.id?"修改":"新建"}
          visible={this.state.visible}
          onOk={this.handleOk}
          onCancel={this.handleCancel}
        >
          <div>
            <ul>
              <li style={{display:"flex",lineHeight: '40px'}}>
                <div style={{flex:"0 0 80px"}}>用户名：</div>
                {
                  this.state.id?
                  <span>{this.state.userName}</span>
                  :
                  <div style={{flex:"1 1  auto"}}><Input value={this.state.userName} onChange={this.userNameChange} /></div>
                }
              </li>
              {
                this.state.id?
                ''
                :
                <li style={{display:"flex",lineHeight: '40px'}}>
                  <div style={{flex:"0 0 80px"}}>密码：</div>
                  <div style={{flex:"1 1  auto"}}><Input type="password" value={this.state.password} onChange={this.passwordChange} /></div>
                </li>
              }
              {
                this.state.id?
                ''
                :
                <li style={{display:"flex",lineHeight: '40px'}}>
                  <div style={{flex:"0 0 80px"}}>重复密码：</div>
                  <div style={{flex:"1 1  auto"}}><Input type="password" value={this.state.repeatPassword} onChange={this.repeatPasswordChange} /></div>
                </li>
              }
              <li style={{display:"flex",lineHeight: '40px'}}>
                <div style={{flex:"0 0 80px"}}>角色：</div>
                <div style={{flex:"1 1  auto"}}>
                  <Select
                    style={{ width: '100%' }}
                    placeholder="不限"
                    value={this.state.role}
                    onChange={this.roleChange}
                  >
                    {
                      this.state.roleList && this.state.roleList.length>0 ?
                      this.state.roleList.map(item=>{
                        return (
                          <Option key={item.id} value={item.id}>{item.name}</Option>
                        )
                      })
                      :
                      ''
                    }
                  </Select>
                </div>
              </li>
              <li style={{display:"flex",lineHeight: '40px'}}>
                <div style={{flex:"0 0 80px"}}>邮箱：</div>
                <div style={{flex:"1 1  auto"}}><Input value={this.state.email} onChange={this.emailChange} /></div>
              </li>
              <li style={{display:"flex",lineHeight: '40px'}}>
                <div style={{flex:"0 0 80px"}}>备注：</div>
                <div style={{flex:"1 1  auto"}}><TextArea value={this.state.description} onChange={this.descriptionChange} autosize={{ minRows: 1 }} /></div>
              </li>
            </ul>
          </div>
        </Modal>
        <Modal
          title='重置密码'
          visible={this.state.resetPasswordVisible}
          onOk={this.resetPasswordHandleOk}
          onCancel={this.resetPasswordHandleCancel}
        >
          <div>
            <ul>
              <li style={{display:"flex",lineHeight: '40px'}}>
                <div style={{flex:"0 0 100px"}}>新密码：</div>
                <div style={{flex:"1 1  auto"}}><Input type="password" value={this.state.newPassword} onChange={this.newPasswordChange} /></div>
              </li>
              <li style={{display:"flex",lineHeight: '40px'}}>
                <div style={{flex:"0 0 100px"}}>重复新密码：</div>
                <div style={{flex:"1 1  auto"}}><Input type="password" value={this.state.repeatNewPassword} onChange={this.repeatNewPasswordChange} /></div>
              </li>
            </ul>
          </div>
        </Modal>
      </div>
    )
  }
}

export default connect()(withRouter(UserManage))
