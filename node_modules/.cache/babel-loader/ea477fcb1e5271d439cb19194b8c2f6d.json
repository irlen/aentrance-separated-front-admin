{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _mapv = require('mapv');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file 迁徙组件，粗细射线\n * @author junior2ran\n */\n\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(args) {\n    _classCallCheck(this, App);\n\n    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, args));\n\n    _this.state = {};\n    return _this;\n  }\n  /**\n   * 设置默认的props属性\n   */\n\n\n  _createClass(App, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      this.initialize();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.initialize();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.destroy();\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.lineLayer.destroy();\n      this.lineLayer = null;\n      this.pointLayer.destroy();\n      this.pointLayer = null;\n      this.textLayer.destroy();\n      this.textLayer = null;\n    }\n  }, {\n    key: 'createLayers',\n    value: function createLayers() {\n      this._createLayer = true;\n      var map = this.map;\n      var self = this;\n      this.lineDataSet = new _mapv.DataSet([]);\n      this.lineLayer = new _mapv.baiduMapLayer(map, this.lineDataSet, {});\n      this.pointDataSet = new _mapv.DataSet([]);\n      this.pointLayer = new _mapv.baiduMapLayer(map, this.pointDataSet, {});\n      this.textLayer = new _mapv.baiduMapLayer(map, this.pointDataSet, {});\n    }\n  }, {\n    key: 'initialize',\n    value: function initialize() {\n      var _this2 = this;\n\n      var map = this.map = this.props.map;\n\n      if (!map) {\n        return;\n      }\n\n      if (!this._createLayer) {\n        this.createLayers();\n      }\n\n      var lineData = [];\n      var pointData = [];\n\n      if (this.props.data) {\n        var points = [];\n        var projection = map.getMapType().getProjection();\n        this.props.data.forEach(function (item, index) {\n          var fromCenter = item.from.point || _mapv.utilCityCenter.getCenterByCityName(item.from.city);\n\n          var toCenter = item.to.point || _mapv.utilCityCenter.getCenterByCityName(item.to.city);\n\n          if (_this2.props.coordType === 'bd09mc') {\n            points.push(projection.pointToLngLat(new BMap.Pixel(fromCenter.lng, fromCenter.lat)));\n            points.push(projection.pointToLngLat(new BMap.Pixel(toCenter.lng, toCenter.lat)));\n          } else {\n            points.push(fromCenter);\n            points.push(toCenter);\n          }\n\n          var intensity = new _mapv.utilDataRangeIntensity({\n            maxSize: 10,\n            minSize: 1,\n            min: _this2.props.min || 0,\n            max: _this2.props.max || 1000\n          });\n          var lineWidth = intensity.getSize(item.count);\n          lineData.push({\n            strokeStyle: item.color,\n            geometry: {\n              type: 'LineString',\n              coordinates: [[fromCenter.lng, fromCenter.lat], [toCenter.lng, toCenter.lat]]\n            },\n            count: item.count,\n            lineWidth: lineWidth\n          });\n\n          if (_this2.props.showToPoint !== false) {\n            pointData.push({\n              fillStyle: item.color,\n              text: item.to.name || item.to.city,\n              geometry: {\n                type: 'Point',\n                coordinates: [toCenter.lng, toCenter.lat]\n              }\n            });\n          }\n\n          if (_this2.props.showFromPoint !== false) {\n            pointData.push({\n              fillStyle: item.color,\n              text: item.from.name || item.from.city,\n              geometry: {\n                type: 'Point',\n                coordinates: [fromCenter.lng, fromCenter.lat]\n              }\n            });\n          }\n\n          if (points.length > 0) {\n            if (_this2.props.autoViewport !== false) {\n              map.setViewport(points, _this2.props.viewportOptions);\n            }\n          }\n        });\n      }\n\n      this.lineDataSet.set(lineData);\n      this.lineLayer.update({\n        options: this.props.lineOptions || {\n          coordType: this.props.coordType,\n          draw: 'simple',\n          strokeStyle: '#5E87DB',\n          globalCompositeOperation: 'lighter',\n          shadowColor: 'rgba(255, 255, 255, 0.5)',\n          shadowBlur: 60,\n          lineWidth: 2\n        }\n      });\n      this.pointDataSet.set(pointData);\n      this.pointLayer.update({\n        options: this.props.pointOptions || {\n          coordType: this.props.coordType,\n          draw: 'simple',\n          fillStyle: '#5E87DB',\n          size: 5,\n          shadowColor: '#5E87DB',\n          shadowBlur: 20\n        }\n      });\n      this.textLayer.update({\n        options: this.props.textOptions || {\n          coordType: this.props.coordType,\n          draw: 'text',\n          font: '18px Arial',\n          offset: {\n            x: 0,\n            y: 12\n          },\n          fillStyle: '#333',\n          size: 12\n        }\n      });\n    }\n  }], [{\n    key: 'defaultProps',\n    get: function get() {\n      return {};\n    }\n  }]);\n\n  return App;\n}(_component2.default);\n\nexports.default = App;","map":null,"metadata":{},"sourceType":"script"}