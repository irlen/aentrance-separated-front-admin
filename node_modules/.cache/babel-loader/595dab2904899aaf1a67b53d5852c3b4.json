{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file 基础组件对象\n * @author kyle(hinikai@gmail.com)\n */\n\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(args) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, args));\n  }\n  /**\n   * 给某个对象绑定对应需要的事件\n   * @param 需要绑定事件的对象\n   * @param 事件名数组\n   * @return null;\n   */\n\n\n  _createClass(App, [{\n    key: 'bindEvent',\n    value: function bindEvent(obj, events) {\n      var self = this;\n\n      if (events) {\n        events.forEach(function (event) {\n          obj.addEventListener(event, function () {\n            self.props.events && self.props.events[event] && self.props.events[event].apply(self, arguments);\n          });\n        });\n      }\n    }\n    /**\n     * 给某个对象绑定需要切换的属性对应的方法\n     * @param 需要绑定属性的对象\n     * @param 属性和对应的2个切换方法\n     * @return null;\n     */\n\n  }, {\n    key: 'bindToggleMeghods',\n    value: function bindToggleMeghods(obj, toggleMethods) {\n      for (var key in toggleMethods) {\n        if (this.props[key] !== undefined) {\n          if (this.props[key]) {\n            obj[toggleMethods[key][0]]();\n          } else {\n            obj[toggleMethods[key][1]]();\n          }\n        }\n      }\n    }\n  }, {\n    key: 'getOptions',\n    value: function getOptions(options) {\n      var _this2 = this;\n\n      var result = {};\n      options.map(function (key) {\n        if (_this2.props[key] !== undefined) {\n          result[key] = _this2.props[key];\n        }\n      });\n      return result;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return App;\n}(_react.Component);\n\nexports.default = App;","map":null,"metadata":{},"sourceType":"script"}