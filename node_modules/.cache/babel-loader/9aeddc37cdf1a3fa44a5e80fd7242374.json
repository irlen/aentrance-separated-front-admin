{"ast":null,"code":"import \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/cascader/style\";\nimport _Cascader from \"antd/es/cascader\";\nimport \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nvar _jsxFileName = \"/industry/app/src/LogStatistic/index.js\";\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport moment from 'moment';\nimport WyDatePicker from '../components/WyDatePicker';\nimport { Amodule } from '../components/Amodule';\nimport { wyAxiosPost } from '../components/WyAxios';\nimport WySpin from '../components/WySpin';\nimport Filter from './Filter';\nimport Line from '../components/Line';\nimport WyTable from '../components/WyTable';\nconst Option = _Select.Option;\nconst Search = _Input.Search;\n\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1ekux3o-LogStatistic\",\n  styles: \"display:flex;label:LogStatistic;\"\n} : {\n  name: \"1ekux3o-LogStatistic\",\n  styles: \"display:flex;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"100vb65-LogStatistic\",\n  styles: \"flex:1 1 auto;label:LogStatistic;\"\n} : {\n  name: \"100vb65-LogStatistic\",\n  styles: \"flex:1 1 auto;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"sqs2qd-LogStatistic\",\n  styles: \"width:80%;label:LogStatistic;\"\n} : {\n  name: \"sqs2qd-LogStatistic\",\n  styles: \"width:80%;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref4 = process.env.NODE_ENV === \"production\" ? {\n  name: \"x52had-LogStatistic\",\n  styles: \"flex:0 0 240px;label:LogStatistic;\"\n} : {\n  name: \"x52had-LogStatistic\",\n  styles: \"flex:0 0 240px;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"kl8n1k-LogStatistic\",\n  styles: \"min-width:220px;label:LogStatistic;\"\n} : {\n  name: \"kl8n1k-LogStatistic\",\n  styles: \"min-width:220px;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref6 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1tk9f4b-LogStatistic\",\n  styles: \"flex:0 0 360px;label:LogStatistic;\"\n} : {\n  name: \"1tk9f4b-LogStatistic\",\n  styles: \"flex:0 0 360px;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref7 = process.env.NODE_ENV === \"production\" ? {\n  name: \"y6wdhe-LogStatistic\",\n  styles: \"padding-top:20px;label:LogStatistic;\"\n} : {\n  name: \"y6wdhe-LogStatistic\",\n  styles: \"padding-top:20px;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref8 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1fo160q-LogStatistic\",\n  styles: \"label:LogStatistic;\"\n} : {\n  name: \"1fo160q-LogStatistic\",\n  styles: \"label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref9 = process.env.NODE_ENV === \"production\" ? {\n  name: \"z8wwlr-LogStatistic\",\n  styles: \"margin-top:20px;label:LogStatistic;\"\n} : {\n  name: \"z8wwlr-LogStatistic\",\n  styles: \"margin-top:20px;label:LogStatistic;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL0xvZ1N0YXRpc3RpYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4bEJxQiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9Mb2dTdGF0aXN0aWMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IENvbCwgUm93LCBTZWxlY3QsIEJ1dHRvbiwgTW9kYWwsIElucHV0LCBJY29uLCBUYWJsZSwgVG9vbHRpcCwgQ2FzY2FkZXIsIG1lc3NhZ2UgfSBmcm9tICdhbnRkJ1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXHJcbmltcG9ydCBIaWdobGlnaHRlciBmcm9tICdyZWFjdC1oaWdobGlnaHQtd29yZHMnXHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50J1xyXG5cclxuaW1wb3J0IFd5RGF0ZVBpY2tlciBmcm9tICcuLi9jb21wb25lbnRzL1d5RGF0ZVBpY2tlcidcclxuaW1wb3J0IHsgQW1vZHVsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvQW1vZHVsZSdcclxuaW1wb3J0IHsgd3lBeGlvc1Bvc3QgfSBmcm9tICcuLi9jb21wb25lbnRzL1d5QXhpb3MnXHJcbmltcG9ydCBXeVNwaW4gZnJvbSAnLi4vY29tcG9uZW50cy9XeVNwaW4nXHJcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi9GaWx0ZXInXHJcbmltcG9ydCBMaW5lIGZyb20gJy4uL2NvbXBvbmVudHMvTGluZSdcclxuaW1wb3J0IFd5VGFibGUgZnJvbSAnLi4vY29tcG9uZW50cy9XeVRhYmxlJ1xyXG5jb25zdCBPcHRpb24gPSBTZWxlY3QuT3B0aW9uXHJcbmNvbnN0IHtTZWFyY2h9ID0gSW5wdXRcclxuY2xhc3MgTG9nU3RhdGlzdGljIGV4dGVuZHMgQ29tcG9uZW50e1xyXG4gIHN0YXRlID0ge1xyXG4gICAgaW5kZXhMaXN0OltdLFxyXG5cclxuICAgIGN1cl90aW1lOltdLCAvL+aVsOaNrue7n+iuoeaXtumXtOiMg+WbtFxyXG4gICAgdXBkYXRldGltZTogJzAnLCAvL+aVsOaNruabtOaWsOmikeeOh1xyXG4gICAgLy8gZmlsdGVyX2xpc3Q6IFtdLCAvL+i/h+a7pOWZqFxyXG4gICAgLy8gY3VyX2ZpbHRlcjogeyAgIC8v5b2T5YmN5pON5L2c55qE6L+H5ruk5ZmoXHJcbiAgICAvLyAgIGZpbHRlcl9pZDonJyxcclxuICAgIC8vICAgZmlsdGVyX25hbWU6JycsXHJcbiAgICAvLyAgIGZpbHRlcl9ydWxlOntcclxuICAgIC8vICAgICBydWxlX29iajonJyxcclxuICAgIC8vICAgICBydWxlX2xvZ2ljOicnLFxyXG4gICAgLy8gICAgIHJ1bGVfdmFsdWU6JydcclxuICAgIC8vICAgfSxcclxuICAgIC8vICAgZmlsdGVyX2xvZ2ljOidvcicsXHJcbiAgICAvLyAgIGZpbHRlcl9ydW46J3llcydcclxuICAgIC8vIH0sXHJcbiAgICAvL2xvZ19pbmRleDogJycsXHJcblxyXG4gICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICBsaW5lSXNTcGluaW5nOiBmYWxzZSxcclxuICAgIHRhYmxlSXNTcGluaW5nOiBmYWxzZSxcclxuICAgIHhMaW5lRGF0YTpbXSxcclxuICAgIHlMaW5lRGF0YTpbXSxcclxuICAgIGFVbml0OicnLFxyXG4gICAgeFRhYmxlRGF0YTpbXSxcclxuICAgIHlUYWJsZURhdGE6W10sXHJcbiAgICBzZWFyY2hfdGV4dDonJyxcclxuICAgIHNlYXJjaGVkX3RleHQ6JycsXHJcbiAgICBncm91cEFwcExpc3Q6W10sXHJcbiAgICBncm91cF9hcHA6W11cclxuICB9XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKXtcclxuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWVcclxuICAgIHRoaXMuZ2V0R3JvdXBBcHBMaXN0KClcclxuICB9XHJcbiAgLy/ojrflj5bntKLlvJXliJfooahcclxuICAvL+iOt+WPluaJgOaciee0ouW8lVxyXG4gIC8vIGdldEluZGV4ID0gKCk9PntcclxuICAvLyAgIHd5QXhpb3NQb3N0KCdTb3VyY2UvZ2V0QXBwTmFtZScse30sKHJlc3VsdCk9PntcclxuICAvLyAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgLy8gICAgIGlmKHRoaXMuX2lzTW91bnRlZCAmJiByZXNwb25zZURhdGEgJiYgcmVzcG9uc2VEYXRhLmxlbmd0aD4wKXtcclxuICAvLyAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAvLyAgICAgICAgIGluZGV4TGlzdDogcmVzcG9uc2VEYXRhLFxyXG4gIC8vICAgICAgICAgbG9nX2luZGV4OiByZXNwb25zZURhdGFbMF1cclxuICAvLyAgICAgICB9LCgpPT57XHJcbiAgLy8gICAgICAgICB0aGlzLmdldExpbmVEYXRhKClcclxuICAvLyAgICAgICAgIHRoaXMuZ2V0VGFibGVEYXRhKClcclxuICAvLyAgICAgICB9KVxyXG4gIC8vICAgICB9XHJcbiAgLy8gICB9KVxyXG4gIC8vIH1cclxuICBnZXRHcm91cEFwcExpc3QgPSAoKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ0dyb3VwL2dldEdyb3VwQW5kQXBwJyx7fSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkICYmIHJlc3BvbnNlRGF0YS5sZW5ndGg+MCl7XHJcbiAgICAgICAgY29uc3QgZ3JvdXBfYXBwID0gW11cclxuICAgICAgICBjb25zdCBncm91cCA9IHJlc3BvbnNlRGF0YVswXS52YWx1ZVxyXG4gICAgICAgIGNvbnN0IGFwcCA9IHJlc3BvbnNlRGF0YVswXS5jaGlsZHJlblswXS52YWx1ZVxyXG4gICAgICAgIGdyb3VwX2FwcC5wdXNoKGdyb3VwKVxyXG4gICAgICAgIGdyb3VwX2FwcC5wdXNoKGFwcClcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGdyb3VwQXBwTGlzdDogcmVzcG9uc2VEYXRhLFxyXG4gICAgICAgICAgZ3JvdXBfYXBwXHJcbiAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgdGhpcy5nZXRMaW5lRGF0YSgpXHJcbiAgICAgICAgICB0aGlzLmdldFRhYmxlRGF0YSgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgZ3JvdXBfYXBwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgY29uc29sZS5sb2codmFsdWUpXHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGdyb3VwX2FwcDogdmFsdWVcclxuICAgICAgfSwoKT0+e1xyXG4gICAgICAgIHRoaXMuZ2V0TGluZURhdGEoKVxyXG4gICAgICAgIHRoaXMuZ2V0VGFibGVEYXRhKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgZGlzcGxheVJlbmRlciA9IChsYWJlbCk9PntcclxuICAgIHJldHVybiBsYWJlbC5qb2luKCcgLyAnKVxyXG4gIH1cclxuXHJcbiAgLy/ojrflj5bmm7Lnur/lm77mlbDmja5cclxuICBnZXRMaW5lRGF0YSA9ICgpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsaW5lSXNTcGluaW5nOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBjb25zdCB7Z3JvdXBfYXBwLGN1cl90aW1lLHNlYXJjaGVkX3RleHR9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtjdXJfdGltZSxzZWFyY2hlZF90ZXh0fVxyXG4gICAgaW5mby5sb2dfaW5kZXggPSBncm91cF9hcHBbMV1cclxuICAgIHd5QXhpb3NQb3N0KCdFbGFzdGljL2dldFRpbWVDb3VudCcse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEpe1xyXG4gICAgICAgIGNvbnN0IGN1clRpbWUgPSBbXVxyXG4gICAgICAgIGN1clRpbWUucHVzaChyZXNwb25zZURhdGEuc3RhcnRfdGltZSlcclxuICAgICAgICBjdXJUaW1lLnB1c2gocmVzcG9uc2VEYXRhLmxhc3RfdGltZSlcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgaWYodGhpcy5zdGF0ZS5jdXJfdGltZS5sZW5ndGg+MCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIHhMaW5lRGF0YTogcmVzcG9uc2VEYXRhLnh4eCxcclxuICAgICAgICAgICAgICB5TGluZURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICAgICAgYVVuaXQ6IHJlc3BvbnNlRGF0YS51bml0LFxyXG4gICAgICAgICAgICAgIGxpbmVJc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgY3VyX3RpbWU6IGN1clRpbWUsXHJcbiAgICAgICAgICAgICAgeExpbmVEYXRhOiByZXNwb25zZURhdGEueHh4LFxyXG4gICAgICAgICAgICAgIHlMaW5lRGF0YTogcmVzcG9uc2VEYXRhLnl5eSxcclxuICAgICAgICAgICAgICBhVW5pdDogcmVzcG9uc2VEYXRhLnVuaXQsXHJcbiAgICAgICAgICAgICAgbGluZUlzU3BpbmluZzogZmFsc2VcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgbGluZUlzU3BpbmluZzogZmFsc2VcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBnZXRUYWJsZURhdGEgPSAodGltZVZhbHVlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdGFibGVJc1NwaW5pbmc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIGxldCBjdXJfdGltZSA9IFtdXHJcbiAgICBpZih0aW1lVmFsdWUpe1xyXG4gICAgICBjdXJfdGltZSA9IHRpbWVWYWx1ZVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGN1cl90aW1lID0gdGhpcy5zdGF0ZS5jdXJfdGltZVxyXG4gICAgfVxyXG4gICAgY29uc3Qge2dyb3VwX2FwcCxzZWFyY2hlZF90ZXh0fSA9IHRoaXMuc3RhdGVcclxuICAgIGNvbnN0IGluZm8gPSB7Y3VyX3RpbWUsc2VhcmNoZWRfdGV4dH1cclxuICAgIGluZm8ubG9nX2luZGV4ID0gZ3JvdXBfYXBwWzFdXHJcbiAgICB3eUF4aW9zUG9zdCgnRWxhc3RpYy9nZXRNZXNzYWdlJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgIGlmKHJlc3BvbnNlRGF0YSl7XHJcbiAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgIGNvbnN0IG5ld3ggPSBbXVxyXG4gICAgICAgICAgaWYocmVzcG9uc2VEYXRhLnh4eCAmJiByZXNwb25zZURhdGEueHh4Lmxlbmd0aD4wKXtcclxuICAgICAgICAgICAgcmVzcG9uc2VEYXRhLnh4eC5tYXAoKGl0ZW0pPT57XHJcbiAgICAgICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy5nZXRDb2x1bW5TZWFyY2hQcm9wcyhpdGVtLmRhdGFJbmRleClcclxuICAgICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gT2JqZWN0LmFzc2lnbih7fSxpdGVtLG9iailcclxuICAgICAgICAgICAgICBuZXd4LnB1c2gobmV3SXRlbSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICB4VGFibGVEYXRhOiBbLi4ubmV3eF0sXHJcbiAgICAgICAgICAgIHlUYWJsZURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICAgIHRhYmxlSXNTcGluaW5nOiBmYWxzZVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgdGFibGVJc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJhbmdlVGltZUNoYW5nZSA9ICh2YWx1ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIGNvbnN0IHNlYXJjaF90ZXh0ID0gdGhpcy5zdGF0ZS5zZWFyY2hlZF90ZXh0XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGN1cl90aW1lOiB2YWx1ZSxcclxuICAgICAgICBzZWFyY2hfdGV4dFxyXG4gICAgICB9LCgpPT57XHJcbiAgICAgICAgdGhpcy5nZXRMaW5lRGF0YSgpXHJcbiAgICAgICAgdGhpcy5nZXRUYWJsZURhdGEoKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGV0aW1lQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdXBkYXRldGltZTogdmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd01vZGFsID0gKCkgPT4ge1xyXG4gICAgY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgY29uc3QgY3VyX3RpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJfdGltZSwxMCkqMTAwXHJcbiAgICBjb25zdCBmaWx0ZXJfaWQgPSBhc0lkLnRvU3RyaW5nKClcclxuICAgIGNvbnN0IGxhc3RGaWx0ZXIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmN1cl9maWx0ZXIpXHJcbiAgICBsYXN0RmlsdGVyLmZpbHRlcl9pZCA9IGZpbHRlcl9pZFxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBjdXJfZmlsdGVyOiBsYXN0RmlsdGVyXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGhhbmRsZU9rID0gZSA9PiB7XHJcbiAgICAvL+atpOWkhOmcgOimgeWtmOaVsOaNruW6k1xyXG4gICAgY29uc3QgbGFzdEZpbHRlckxpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmZpbHRlcl9saXN0KVxyXG4gICAgY29uc3QgY3VyRmlsdGVyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5jdXJfZmlsdGVyKVxyXG4gICAgbGFzdEZpbHRlckxpc3QucHVzaChjdXJGaWx0ZXIpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBmaWx0ZXJfbGlzdDogbGFzdEZpbHRlckxpc3RcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHRoaXMuaGFuZGxlQ2FuY2VsKClcclxuICB9XHJcbiAgaGFuZGxlQ2FuY2VsID0gZSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBjdXJfZmlsdGVyOiB7ICAgLy/lvZPliY3mk43kvZznmoTov4fmu6TlmahcclxuICAgICAgICAgIGZpbHRlcl9pZDonJyxcclxuICAgICAgICAgIGZpbHRlcl9uYW1lOicnLFxyXG4gICAgICAgICAgZmlsdGVyX3J1bGU6e1xyXG4gICAgICAgICAgICBydWxlX29iajonJyxcclxuICAgICAgICAgICAgcnVsZV9sb2dpYzonJyxcclxuICAgICAgICAgICAgcnVsZV92YWx1ZTonJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGZpbHRlcl9sb2dpYzonb3InLFxyXG4gICAgICAgICAgZmlsdGVyX3J1bjogJ3llcydcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6L+H5ruk5Zmo55u45YWzXHJcbiAgLy8gcnVsZV9vYmpDaGFuZ2UgPSAodmFsdWUpPT57XHJcbiAgLy8gICBjb25zdCBsYXN0RmlsdGVyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5jdXJfZmlsdGVyKVxyXG4gIC8vICAgbGFzdEZpbHRlci5maWx0ZXJfcnVsZS5ydWxlX29iaiA9IHZhbHVlXHJcbiAgLy8gICBsYXN0RmlsdGVyLmZpbHRlcl9ydWxlLnJ1bGVfbG9naWMgPSAnJ1xyXG4gIC8vICAgbGFzdEZpbHRlci5maWx0ZXJfcnVsZS5ydWxlX3ZhbHVlID0gJydcclxuICAvLyAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgLy8gICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gIC8vICAgICAgIGN1cl9maWx0ZXI6IF8uY2xvbmVEZWVwKGxhc3RGaWx0ZXIpXHJcbiAgLy8gICAgIH0pXHJcbiAgLy8gICB9XHJcbiAgLy8gfVxyXG4gIC8vIHJ1bGVfbG9naWNDaGFuZ2UgPSAodmFsdWUpPT57XHJcbiAgLy8gICBjb25zdCBsYXN0RmlsdGVyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5jdXJfZmlsdGVyKVxyXG4gIC8vICAgbGFzdEZpbHRlci5maWx0ZXJfcnVsZS5ydWxlX2xvZ2ljID0gdmFsdWVcclxuICAvLyAgIGxhc3RGaWx0ZXIuZmlsdGVyX3J1bGUucnVsZV92YWx1ZSA9ICcnXHJcbiAgLy8gICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gIC8vICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAvLyAgICAgICBjdXJfZmlsdGVyOiBfLmNsb25lRGVlcChsYXN0RmlsdGVyKVxyXG4gIC8vICAgICB9KVxyXG4gIC8vICAgfVxyXG4gIC8vIH1cclxuICAvLyBmaWx0ZXJfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gIC8vICAgY29uc3QgbGFzdEZpbHRlciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuY3VyX2ZpbHRlcilcclxuICAvLyAgIGxhc3RGaWx0ZXIuZmlsdGVyX25hbWUgPSBlLnRhcmdldC52YWx1ZVxyXG4gIC8vICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAvLyAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgLy8gICAgICAgY3VyX2ZpbHRlcjogXy5jbG9uZURlZXAobGFzdEZpbHRlcilcclxuICAvLyAgICAgfSlcclxuICAvLyAgIH1cclxuICAvLyB9XHJcbiAgLy8gZmlsdGVyX2xvZ2ljQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gIC8vICAgY29uc3QgbGFzdEZpbHRlciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuY3VyX2ZpbHRlcilcclxuICAvLyAgIGxhc3RGaWx0ZXIuZmlsdGVyX2xvZ2ljID0gdmFsdWVcclxuICAvLyAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgLy8gICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gIC8vICAgICAgIGN1cl9maWx0ZXI6IF8uY2xvbmVEZWVwKGxhc3RGaWx0ZXIpXHJcbiAgLy8gICAgIH0pXHJcbiAgLy8gICB9XHJcbiAgLy8gfVxyXG4gIC8vIGxvZ19pbmRleENoYW5nZSA9ICh2YWx1ZSk9PntcclxuICAvLyAgIGNvbnN0IHNlYXJjaF90ZXh0ID0gdGhpcy5zZWFyY2hlZF90ZXh0XHJcbiAgLy8gICB0aGlzLnNldFN0YXRlKHtcclxuICAvLyAgICAgbG9nX2luZGV4OiB2YWx1ZSxcclxuICAvLyAgICAgc2VhcmNoX3RleHRcclxuICAvLyAgIH0sKCk9PntcclxuICAvLyAgICAgdGhpcy5nZXRMaW5lRGF0YSgpXHJcbiAgLy8gICAgIHRoaXMuZ2V0VGFibGVEYXRhKClcclxuICAvLyAgIH0pXHJcbiAgLy8gfVxyXG4gIC8v5p+x54q25Zu+54K55Ye75LqL5Lu2XHJcbiAgY2hhcnRDbGljayA9IChyZWNvcmQpPT57XHJcbiAgICBjb25zdCBjdXJUaW1lID0gW11cclxuICAgIGNvbnN0IHRpbWVMaXN0ID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS54TGluZURhdGEpXHJcbiAgICBsZXQgc3RhcnRfdGltZSA9IHJlY29yZC5uYW1lXHJcbiAgICBsZXQgbGFzdF90aW1lID0gcmVjb3JkLm5hbWVcclxuICAgIGNvbnN0IHRpbWVJbmRleCA9IHRpbWVMaXN0LmluZGV4T2YocmVjb3JkLm5hbWUpXHJcbiAgICAvLyBpZih0aW1lSW5kZXg+MCl7XHJcbiAgICAvLyAgIHN0YXJ0X3RpbWUgPSB0aW1lTGlzdFsgdGltZUluZGV4IC0xIF1cclxuICAgIC8vIH1lbHNlIGlmKHRpbWVJbmRleCA9PT0gMCAmJiB0aW1lTGlzdC5sZW5ndGg+MSl7XHJcbiAgICAvLyAgIGNvbnN0IHRpbWUxID0gRGF0ZS5wYXJzZShsYXN0X3RpbWUpXHJcbiAgICAvLyAgIGNvbnN0IHRpbWUyID0gRGF0ZS5wYXJzZSh0aW1lTGlzdFsxXSlcclxuICAgIC8vICAgY29uc3QgZnJvbnRUaW1lID0gdGltZTEgLSB0aW1lMiArIHRpbWUxXHJcbiAgICAvLyAgIHN0YXJ0X3RpbWUgPSBtb21lbnQoZnJvbnRUaW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgaGg6bW06c3MnKVxyXG4gICAgLy8gfVxyXG4gICAgaWYodGltZUxpc3QubGVuZ3RoID09PSAxKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfmirHmrYnvvIzlvZPliY3lt7Lml6Dms5Xnu6fnu63kuIvpkrvliIbmnpAnKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGlmKHRpbWVJbmRleCA9PT0gdGltZUxpc3QubGVuZ3RoLTEpe1xyXG4gICAgICBjb25zdCB0aW1lMSA9IERhdGUucGFyc2UodGltZUxpc3RbdGltZUluZGV4LTFdKVxyXG4gICAgICBjb25zdCB0aW1lMiA9IERhdGUucGFyc2Uoc3RhcnRfdGltZSlcclxuICAgICAgY29uc3QgYWZ0ZXJUaW1lID0gdGltZTIgLSB0aW1lMSArIHRpbWUyXHJcbiAgICAgIGxhc3RfdGltZSA9IG1vbWVudChhZnRlclRpbWUpLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbTpzcycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGFzdF90aW1lID0gdGltZUxpc3RbdGltZUluZGV4KzFdXHJcbiAgICB9XHJcbiAgICBjdXJUaW1lLnB1c2goc3RhcnRfdGltZSlcclxuICAgIGN1clRpbWUucHVzaChsYXN0X3RpbWUpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQgJiYgY3VyVGltZVswXSAhPT0gY3VyVGltZVsxXSl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGN1cl90aW1lOiBjdXJUaW1lXHJcbiAgICAgIH0sKCk9PntcclxuICAgICAgICB0aGlzLmdldExpbmVEYXRhKClcclxuICAgICAgICB0aGlzLmdldFRhYmxlRGF0YSgpXHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfmirHmrYnvvIzlvZPliY3lt7Lml6Dms5Xnu6fnu63kuIvpkrvliIbmnpAnKVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+afseeKtuWbvuWIt+WtkOS6i+S7tlxyXG4gIGJydXNoU2VsZWN0ID0gKHBhcmFtcyk9PntcclxuICAgIGlmKHBhcmFtcy5iYXRjaFswXS5hcmVhcy5sZW5ndGg+MCl7XHJcbiAgICAgIGxldCBmbG93UGljVGltZSA9IFtdXHJcbiAgICAgIGNvbnN0IHh4eFJhbmdlID0gcGFyYW1zLmJhdGNoWzBdLmFyZWFzWzBdLmNvb3JkUmFuZ2VcclxuICAgICAgaWYoTWF0aC5hYnMoeHh4UmFuZ2VbMF0pID09PSBNYXRoLmFicyh4eHhSYW5nZVsxXSkpe1xyXG4gICAgICAgIGZsb3dQaWNUaW1lLnB1c2godGhpcy5zdGF0ZS54TGluZURhdGFbTWF0aC5hYnMoeHh4UmFuZ2VbMV0pXSlcclxuICAgICAgICBmbG93UGljVGltZS5wdXNoKHRoaXMuc3RhdGUueExpbmVEYXRhW01hdGguYWJzKHh4eFJhbmdlWzFdKV0pXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGZsb3dQaWNUaW1lLnB1c2godGhpcy5zdGF0ZS54TGluZURhdGFbTWF0aC5hYnMoeHh4UmFuZ2VbMF0pXSlcclxuICAgICAgICBmbG93UGljVGltZS5wdXNoKHRoaXMuc3RhdGUueExpbmVEYXRhW01hdGguYWJzKHh4eFJhbmdlWzFdKV0pXHJcbiAgICAgIH1cclxuICAgICAgaWYoZmxvd1BpY1RpbWVbMV0gPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgZmxvd1BpY1RpbWVbMV0gPSB0aGlzLnN0YXRlLnhMaW5lRGF0YVtwYXJzZUludCh0aGlzLnN0YXRlLnhMaW5lRGF0YS5sZW5ndGgtMSwwKV1cclxuICAgICAgfVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgY3VyX3RpbWU6IGZsb3dQaWNUaW1lXHJcbiAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgdGhpcy5nZXRMaW5lRGF0YSgpXHJcbiAgICAgICAgICB0aGlzLmdldFRhYmxlRGF0YSgpXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+ihqOagvOaQnOe0ouebuOWFs1xyXG4gIGdldENvbHVtblNlYXJjaFByb3BzID0gZGF0YUluZGV4ID0+ICh7XHJcbiAgICBmaWx0ZXJEcm9wZG93bjogKHsgc2V0U2VsZWN0ZWRLZXlzLCBzZWxlY3RlZEtleXMsIGNvbmZpcm0sIGNsZWFyRmlsdGVycyB9KSA9PiAoXHJcbiAgICAgIDxkaXYgc3R5bGU9e3sgcGFkZGluZzogOCB9fT5cclxuICAgICAgICA8SW5wdXRcclxuICAgICAgICAgIHJlZj17bm9kZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoSW5wdXQgPSBub2RlO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtgU2VhcmNoICR7ZGF0YUluZGV4fWB9XHJcbiAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRLZXlzWzBdfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gc2V0U2VsZWN0ZWRLZXlzKGUudGFyZ2V0LnZhbHVlID8gW2UudGFyZ2V0LnZhbHVlXSA6IFtdKX1cclxuICAgICAgICAgIG9uUHJlc3NFbnRlcj17KCkgPT4gdGhpcy5oYW5kbGVTZWFyY2goc2VsZWN0ZWRLZXlzLCBjb25maXJtKX1cclxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAxODgsIG1hcmdpbkJvdHRvbTogOCwgZGlzcGxheTogJ2Jsb2NrJyB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEJ1dHRvblxyXG4gICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxyXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVTZWFyY2goc2VsZWN0ZWRLZXlzLCBjb25maXJtKX1cclxuICAgICAgICAgIGljb249XCJzZWFyY2hcIlxyXG4gICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiA5MCwgbWFyZ2luUmlnaHQ6IDggfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICDmkJzntKJcclxuICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlUmVzZXQoY2xlYXJGaWx0ZXJzKX0gc2l6ZT1cInNtYWxsXCIgc3R5bGU9e3sgd2lkdGg6IDkwIH19PlxyXG4gICAgICAgICAg6YeN572uXHJcbiAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKSxcclxuICAgIGZpbHRlckljb246IGZpbHRlcmVkID0+IChcclxuICAgICAgPEljb24gdHlwZT1cInNlYXJjaFwiIHN0eWxlPXt7IGNvbG9yOiBmaWx0ZXJlZCA/ICcjMTg5MGZmJyA6IHVuZGVmaW5lZCB9fSAvPlxyXG4gICAgKSxcclxuICAgIG9uRmlsdGVyOiAodmFsdWUsIHJlY29yZCkgPT5cclxuICAgICAgcmVjb3JkW2RhdGFJbmRleF1cclxuICAgICAgICAudG9TdHJpbmcoKVxyXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgLmluY2x1ZGVzKHZhbHVlLnRvTG93ZXJDYXNlKCkpLFxyXG4gICAgb25GaWx0ZXJEcm9wZG93blZpc2libGVDaGFuZ2U6IHZpc2libGUgPT4ge1xyXG4gICAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZWFyY2hJbnB1dC5zZWxlY3QoKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW5kZXI6IHRleHQgPT4gKFxyXG4gICAgICA8SGlnaGxpZ2h0ZXJcclxuICAgICAgICBoaWdobGlnaHRTdHlsZT17eyBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZjMDY5JywgcGFkZGluZzogMCB9fVxyXG4gICAgICAgIHNlYXJjaFdvcmRzPXtbdGhpcy5zdGF0ZS5zZWFyY2hUZXh0XX1cclxuICAgICAgICBhdXRvRXNjYXBlXHJcbiAgICAgICAgdGV4dFRvSGlnaGxpZ2h0PXt0ZXh0P3RleHQudG9TdHJpbmcoKTonJ31cclxuICAgICAgLz5cclxuICAgICksXHJcbiAgfSlcclxuICBoYW5kbGVTZWFyY2ggPSAoc2VsZWN0ZWRLZXlzLCBjb25maXJtKSA9PiB7XHJcbiAgICBjb25maXJtKCk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgc2VhcmNoVGV4dDogc2VsZWN0ZWRLZXlzWzBdIH0pO1xyXG4gIH1cclxuICBoYW5kbGVSZXNldCA9IGNsZWFyRmlsdGVycyA9PiB7XHJcbiAgICBjbGVhckZpbHRlcnMoKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hUZXh0OiAnJyB9KTtcclxuICB9XHJcbiAgLy/ltYzlpZfooajmoLznlJ/miJBcclxuICBzdWJUYWJsZSA9IChyZWNvcmQpPT57XHJcbiAgICBjb25zdCBjb2x1bW5zID0gW1xyXG4gICAgICB7dGl0bGU6J0ZpZWxkJyxkYXRhSW5kZXg6J2ZpZWxkJyxrZXk6J2ZpZWxkJ30sXHJcbiAgICAgIHt0aXRsZTonVmFsdWUnLGRhdGFJbmRleDondmFsdWUnLGtleTondmFsdWUnfVxyXG4gICAgXVxyXG4gICAgY29uc3Qgb2JqID0gcmVjb3JkLnN1YkRhdGFcclxuXHJcbiAgICBjb25zdCBkYXRhID0gW11cclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopXHJcbiAgICBpZihrZXlzICYmIGtleXMubGVuZ3RoPjApe1xyXG4gICAgICBrZXlzLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3QgYVJvdyA9IHt9XHJcbiAgICAgICAgYVJvdy5rZXkgPSBpdGVtXHJcbiAgICAgICAgYVJvdy5maWVsZCA9IGl0ZW1cclxuICAgICAgICBhUm93LnZhbHVlID0gb2JqW2l0ZW1dXHJcbiAgICAgICAgZGF0YS5wdXNoKGFSb3cpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gPFRhYmxlXHJcbiAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XHJcbiAgICAgICAgICAgIGRhdGFTb3VyY2U9e2RhdGF9XHJcbiAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb249e2ZhbHNlfVxyXG4gICAgICAgICAgLz5cclxuICB9XHJcbiAgLy/mkJzntKJcclxuICBkb1NlYXJjaCA9ICgpPT57XHJcbiAgICBjb25zdCBzZWFyY2hlZF90ZXh0ID0gdGhpcy5zdGF0ZS5zZWFyY2hfdGV4dFxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VhcmNoZWRfdGV4dFxyXG4gICAgICB9LCgpPT57XHJcbiAgICAgICAgdGhpcy5nZXRMaW5lRGF0YSgpXHJcbiAgICAgICAgdGhpcy5nZXRUYWJsZURhdGEoKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZWFyY2hfdGV4dENoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VhcmNoX3RleHQ6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwifX0+XHJcbiAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgIDxUb29sdGlwIHBsYWNlbWVudD1cImJvdHRvbUxlZnRcIiB0aXRsZT1cIkV4YW1wbGU6IGtleTE9dmFsdWUxIG9yIGtleTI9dmFsdWUyICwga2V5MTp2YWx1ZTEgYW5kIGtleTI6dmFsdWUyXCI+XHJcbiAgICAgICAgICAgICAgICA8U2VhcmNoXHJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VhcmNoLi4uKGUuZy5zdGF0dXM6MjAwIEFORCBleHRlbnNpb246UEhQKVwiXHJcbiAgICAgICAgICAgICAgICAgIG9uU2VhcmNoPXt2YWx1ZSA9PiB0aGlzLmRvU2VhcmNoKHZhbHVlKX1cclxuICAgICAgICAgICAgICAgICAgY3NzPXt7IHdpZHRoOiBcIjgwJVwiIH19XHJcbiAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaF90ZXh0fVxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZWFyY2hfdGV4dENoYW5nZX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxyXG5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAvLyA8U2VsZWN0IHNpemU9J3NtYWxsJyB2YWx1ZT17dGhpcy5zdGF0ZS5sb2dfaW5kZXh9IG9uQ2hhbmdlPXt0aGlzLmxvZ19pbmRleENoYW5nZX0gc3R5bGU9e3ttaW5XaWR0aDpcIjE2MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgLy8gICB7XHJcbiAgICAgICAgICAgICAgICAgIC8vICAgICB0aGlzLnN0YXRlLmluZGV4TGlzdCAmJiB0aGlzLnN0YXRlLmluZGV4TGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgLy8gICAgIHRoaXMuc3RhdGUuaW5kZXhMaXN0Lm1hcChpdGVtPT57XHJcbiAgICAgICAgICAgICAgICAgIC8vICAgICAgIHJldHVybiA8T3B0aW9uIHRpdGxlPXtpdGVtfSB2YWx1ZT17aXRlbX0ga2V5PXtpdGVtfT57aXRlbX08L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgLy8gICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgIC8vICAgICA6XHJcbiAgICAgICAgICAgICAgICAgIC8vICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgICAgICAgICAgLy8gPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgPENhc2NhZGVyXHJcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3RoaXMuc3RhdGUuZ3JvdXBBcHBMaXN0fVxyXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5UmVuZGVyPXt0aGlzLmRpc3BsYXlSZW5kZXJ9XHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmdyb3VwX2FwcENoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZ3JvdXBfYXBwfVxyXG4gICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICBjc3M9e3ttaW5XaWR0aDpcIjIyMHB4XCJ9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMjAwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgLy8gICA8c3Bhbj7mlbDmja7mm7TmlrDvvJo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAvLyAgIDxTZWxlY3Qgc2l6ZT0nc21hbGwnIHZhbHVlPXt0aGlzLnN0YXRlLnVwZGF0ZXRpbWV9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZXRpbWVDaGFuZ2V9IHN0eWxlPXt7bWluV2lkdGg6XCIxMDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgPE9wdGlvbiBrZXk9XCIwXCIgdmFsdWU9XCIwXCI+5YWz6ZetPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgPE9wdGlvbiBrZXk9XCI1XCIgdmFsdWU9XCI1XCI+NXM8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgIC8vICAgICA8T3B0aW9uIGtleT1cIjYwXCIgdmFsdWU9XCI2MFwiPjFtaW48L09wdGlvbj5cclxuICAgICAgICAgICAgICAgIC8vICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAvLyA8L2Rpdj5cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDM2MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxXeURhdGVQaWNrZXIgIGN1clRpbWU9e3RoaXMuc3RhdGUuY3VyX3RpbWV9IHJhbmdlVGltZUNoYW5nZT17dGhpcy5yYW5nZVRpbWVDaGFuZ2V9Lz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L0NvbD5cclxuICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8Um93PlxyXG4gICAgICAgICAgPENvbCBjc3M9e3twYWRkaW5nVG9wOlwiMjBweFwifX0+XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vIDxkaXYgY3NzPXt7d2lkdGg6XCIyMDBweFwiLGZsb2F0OlwibGVmdFwifX0+XHJcbiAgICAgICAgICAgIC8vICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgIC8vICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgb25DbGljaz17dGhpcy5zaG93TW9kYWx9PlxyXG4gICAgICAgICAgICAvLyAgICAgICA8c3BhbiBjc3M9e3ttYXJnaW5SaWdodDpcIjEwcHhcIn19Pua3u+WKoOi/h+a7pOWZqCA8L3NwYW4+XHJcbiAgICAgICAgICAgIC8vICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgIC8vICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgLy8gICAgIDxkaXY+XHJcbiAgICAgICAgICAgIC8vICAgICAgIOWQr+eUqOS4rVxyXG4gICAgICAgICAgICAvLyAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIC8vICAgICA8ZGl2IGNzcz17e3BhZGRpbmdMZWZ0OlwiMjBweFwifX0+XHJcbiAgICAgICAgICAgIC8vICAgICAgIHtcclxuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnN0YXRlLmZpbHRlcl9saXN0ICYmIHRoaXMuc3RhdGUuZmlsdGVyX2xpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgdGhpcy5zdGF0ZS5maWx0ZXJfbGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgbGV0IGRvbT0gJydcclxuICAgICAgICAgICAgLy8gICAgICAgICAgIGlmKGl0ZW0uZmlsdGVyX3J1biA9PT0gXCJ5ZXNcIil7XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIGRvbSA9IDxGaWx0ZXIga2V5PXtpdGVtLmZpbHRlcl9pZH0gZmlsdGVyRGF0YT17aXRlbX0vPlxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgcmV0dXJuIGRvbVxyXG4gICAgICAgICAgICAvLyAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgOlxyXG4gICAgICAgICAgICAvLyAgICAgICAgICcnXHJcbiAgICAgICAgICAgIC8vICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAvLyAgICAgPGRpdj5cclxuICAgICAgICAgICAgLy8gICAgICAg5pyq5ZCv55SoXHJcbiAgICAgICAgICAgIC8vICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgLy8gICAgIDxkaXYgY3NzPXt7cGFkZGluZ0xlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgLy8gICAgICAge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHRoaXMuc3RhdGUuZmlsdGVyX2xpc3QgJiYgdGhpcy5zdGF0ZS5maWx0ZXJfbGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgLy8gICAgICAgICB0aGlzLnN0YXRlLmZpbHRlcl9saXN0Lm1hcChpdGVtPT57XHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICBsZXQgZG9tPSAnJ1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgaWYoaXRlbS5maWx0ZXJfcnVuID09PSBcIm5vXCIpe1xyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBkb20gPSA8RmlsdGVyIGtleT17aXRlbS5maWx0ZXJfaWR9IGZpbHRlckRhdGE9e2l0ZW19Lz5cclxuICAgICAgICAgICAgLy8gICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gICAgICAgICAgIHJldHVybiBkb21cclxuICAgICAgICAgICAgLy8gICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyAgICAgICAgIDpcclxuICAgICAgICAgICAgLy8gICAgICAgICAnJ1xyXG4gICAgICAgICAgICAvLyAgICAgICB9XHJcbiAgICAgICAgICAgIC8vICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgLy8gICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgICAgIC8vIDwvZGl2PlxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e1xyXG4gICAgICAgICAgICAgICAgLy8gZmxvYXQ6XCJyaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgLy8gbWFyZ2luTGVmdDpcIjIwcHhcIixcclxuICAgICAgICAgICAgICAgIC8vIHdpZHRoOiBcIi13ZWJraXQtY2FsYygxMDAlIC0gMjIwcHgpXCIsXHJcbiAgICAgICAgICAgICAgICAvLyB3aWR0aDogXCItbW96LWNhbGMoMTAwJSAtIDIyMHB4KVwiLFxyXG4gICAgICAgICAgICAgICAgLy8gd2lkdGg6IFwiLW1zLWNhbGMoMTAwJSAtIDIyMHB4KVwiLFxyXG4gICAgICAgICAgICAgICAgLy8gd2lkdGg6IFwiLW8tY2FsYygxMDAlIC0gMjIwcHgpXCIsXHJcbiAgICAgICAgICAgICAgICAvLyB3aWR0aDogXCJjYWxjKDEwMCUgLSAyMjBweClcIixcclxuICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxBbW9kdWxlID5cclxuICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUubGluZUlzU3BpbmluZ30+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmVcclxuICAgICAgICAgICAgICAgICAgICAgIHhEYXRhPXt0aGlzLnN0YXRlLnhMaW5lRGF0YX1cclxuICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlMaW5lRGF0YX1cclxuICAgICAgICAgICAgICAgICAgICAgIGFVbml0PXt0aGlzLnN0YXRlLmFVbml0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFydENsaWNrPXt0aGlzLmNoYXJ0Q2xpY2t9XHJcbiAgICAgICAgICAgICAgICAgICAgICBicnVzaD17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQnJ1c2hTZWxlY3RlZD17dGhpcy5icnVzaFNlbGVjdH1cclxuICAgICAgICAgICAgICAgICAgICAgIG5vem9vbT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgIGRhdGFab29tPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvV3lTcGluPlxyXG4gICAgICAgICAgICAgICAgPC9BbW9kdWxlPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjc3M9e3ttYXJnaW5Ub3A6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVNwaW4gaXNTcGluaW5nPXt0aGlzLnN0YXRlLmxpbmVJc1NwaW5pbmd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8V3lUYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhPXt0aGlzLnN0YXRlLnhUYWJsZURhdGF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeURhdGE9e3RoaXMuc3RhdGUueVRhYmxlRGF0YX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZFJvd1JlbmRlcj17KHJlY29yZCk9PnRoaXMuc3ViVGFibGUocmVjb3JkKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvV3lTcGluPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgIDwvUm93PlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC8vIDxNb2RhbFxyXG4gICAgICAgICAgLy8gICB0aXRsZT1cIua3u+WKoOi/h+a7pOWZqFwiXHJcbiAgICAgICAgICAvLyAgIHdpZHRoPXs2NDh9XHJcbiAgICAgICAgICAvLyAgIHZpc2libGU9e3RoaXMuc3RhdGUudmlzaWJsZX1cclxuICAgICAgICAgIC8vICAgb25Paz17dGhpcy5oYW5kbGVPa31cclxuICAgICAgICAgIC8vICAgb25DYW5jZWw9e3RoaXMuaGFuZGxlQ2FuY2VsfVxyXG4gICAgICAgICAgLy8gPlxyXG4gICAgICAgICAgLy8gICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsIGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgIC8vICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Pui/h+a7pOWZqOWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgLy8gICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgIC8vICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5jdXJfZmlsdGVyLmZpbHRlcl9uYW1lfSBvbkNoYW5nZT17dGhpcy5maWx0ZXJfbmFtZUNoYW5nZX0gLz5cclxuICAgICAgICAgIC8vICAgICA8L2Rpdj5cclxuICAgICAgICAgIC8vICAgPC9kaXY+XHJcbiAgICAgICAgICAvLyAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIiwgbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgLy8gICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+6L+H5ruk5p2h5Lu277yaPC9kaXY+XHJcbiAgICAgICAgICAvLyAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgLy8gICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgLy8gICAgICAgIHNob3dTZWFyY2hcclxuICAgICAgICAgIC8vICAgICAgICBjc3M9e3sgbWluV2lkdGg6IFwiMjAwcHhcIiB9fVxyXG4gICAgICAgICAgLy8gICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IGEgcGVyc29uXCJcclxuICAgICAgICAgIC8vICAgICAgICBvcHRpb25GaWx0ZXJQcm9wPVwiY2hpbGRyZW5cIlxyXG4gICAgICAgICAgLy8gICAgICAgIG9uQ2hhbmdlPXt0aGlzLnJ1bGVfb2JqQ2hhbmdlfVxyXG4gICAgICAgICAgLy8gICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0LCBvcHRpb24pID0+b3B0aW9uLnByb3BzLmNoaWxkcmVuLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+PSAwfVxyXG4gICAgICAgICAgLy8gICAgICAgPlxyXG4gICAgICAgICAgLy8gICAgICAgIDxPcHRpb24ga2V5PVwibXlrZXlcIiB2YWx1ZT1cIlwiPuivt+mAieaLqS4uLjwvT3B0aW9uPlxyXG4gICAgICAgICAgLy8gICAgICAgIDxPcHRpb24gdmFsdWU9XCJqYWNrXCI+SmFjazwvT3B0aW9uPlxyXG4gICAgICAgICAgLy8gICAgICAgIDxPcHRpb24gdmFsdWU9XCJsdWN5XCI+THVjeTwvT3B0aW9uPlxyXG4gICAgICAgICAgLy8gICAgICAgIDxPcHRpb24gdmFsdWU9XCJ0b21cIj5Ub208L09wdGlvbj5cclxuICAgICAgICAgIC8vICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgLy8gICAgICAge1xyXG4gICAgICAgICAgLy8gICAgICAgICB0aGlzLnN0YXRlLmN1cl9maWx0ZXIuZmlsdGVyX3J1bGUucnVsZV9vYmogIT09ICcnP1xyXG4gICAgICAgICAgLy8gICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgY3NzPXt7bWluV2lkdGg6XCIxMDBweFwifX1cclxuICAgICAgICAgIC8vICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5ydWxlX2xvZ2ljQ2hhbmdlfVxyXG4gICAgICAgICAgLy8gICAgICAgICA+XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgPE9wdGlvbiBrZXk9J215a2V5JyB2YWx1ZT0nJz7or7fpgInmi6kuLi48L09wdGlvbj5cclxuICAgICAgICAgIC8vICAgICAgICAgICA8T3B0aW9uIGtleT0naXMnIHZhbHVlPSdpcyc+5pivPC9PcHRpb24+XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgPE9wdGlvbiBrZXk9J2lzbm90JyB2YWx1ZT0naXNub3QnPuS4jeaYrzwvT3B0aW9uPlxyXG4gICAgICAgICAgLy8gICAgICAgICAgIDxPcHRpb24ga2V5PSdpbmNsdWRlJyB2YWx1ZT0naW5jbHVkZSc+5YyF5ZCr5LqOPC9PcHRpb24+XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgPE9wdGlvbiBrZXk9J3VuaW5jbHVkZScgdmFsdWU9J3VuaW5jbHVkZSc+5LiN5YyF5ZCr5LqOPC9PcHRpb24+XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgPE9wdGlvbiBrZXk9J2V4aXN0JyB2YWx1ZT0nZXhpc3QnPuWtmOWcqDwvT3B0aW9uPlxyXG4gICAgICAgICAgLy8gICAgICAgICAgIDxPcHRpb24ga2V5PSd1bmV4aXN0JyB2YWx1ZT0ndW5leGlzdCc+5LiN5a2Y5ZyoPC9PcHRpb24+XHJcbiAgICAgICAgICAvLyAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgLy8gICAgICAgICA6XHJcbiAgICAgICAgICAvLyAgICAgICAgICcnXHJcbiAgICAgICAgICAvLyAgICAgICB9XHJcbiAgICAgICAgICAvLyAgICAgICB7XHJcbiAgICAgICAgICAvLyAgICAgICAgIHRoaXMuc3RhdGUuY3VyX2ZpbHRlci5maWx0ZXJfcnVsZS5ydWxlX2xvZ2ljICE9PScnP1xyXG4gICAgICAgICAgLy8gICAgICAgICA8SW5wdXQgY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPlxyXG4gICAgICAgICAgLy8gICAgICAgICA6XHJcbiAgICAgICAgICAvLyAgICAgICAgICcnXHJcbiAgICAgICAgICAvLyAgICAgICB9XHJcbiAgICAgICAgICAvL1xyXG4gICAgICAgICAgLy8gICAgIDwvZGl2PlxyXG4gICAgICAgICAgLy8gICA8L2Rpdj5cclxuICAgICAgICAgIC8vICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLCBsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAvLyAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7ov4fmu6TpgLvovpHvvJo8L2Rpdj5cclxuICAgICAgICAgIC8vICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+XHJcbiAgICAgICAgICAvLyAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAvLyAgICAgICAgIGNzcz17e21pbldpZHRoOlwiNjBweFwifX1cclxuICAgICAgICAgIC8vICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuY3VyX2ZpbHRlci5maWx0ZXJfbG9naWN9XHJcbiAgICAgICAgICAvLyAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmZpbHRlcl9sb2dpY0NoYW5nZX1cclxuICAgICAgICAgIC8vICAgICAgID5cclxuICAgICAgICAgIC8vICAgICAgICAgPE9wdGlvbiBrZXk9XCJvclwiIHZhbHVlPVwib3JcIj7miJY8L09wdGlvbj5cclxuICAgICAgICAgIC8vICAgICAgICAgPE9wdGlvbiBrZXk9XCJhbmRcIiB2YWx1ZT1cImFuZFwiPuS4lDwvT3B0aW9uPlxyXG4gICAgICAgICAgLy8gICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAvLyAgICAgPC9kaXY+XHJcbiAgICAgICAgICAvLyAgIDwvZGl2PlxyXG4gICAgICAgICAgLy8gPC9Nb2RhbD5cclxuICAgICAgICB9XHJcblxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvZ1N0YXRpc3RpY1xyXG4iXX0= */\"\n};\n\nclass LogStatistic extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      indexList: [],\n      cur_time: [],\n      //数据统计时间范围\n      updatetime: '0',\n      //数据更新频率\n      // filter_list: [], //过滤器\n      // cur_filter: {   //当前操作的过滤器\n      //   filter_id:'',\n      //   filter_name:'',\n      //   filter_rule:{\n      //     rule_obj:'',\n      //     rule_logic:'',\n      //     rule_value:''\n      //   },\n      //   filter_logic:'or',\n      //   filter_run:'yes'\n      // },\n      //log_index: '',\n      visible: false,\n      lineIsSpining: false,\n      tableIsSpining: false,\n      xLineData: [],\n      yLineData: [],\n      aUnit: '',\n      xTableData: [],\n      yTableData: [],\n      search_text: '',\n      searched_text: '',\n      groupAppList: [],\n      group_app: []\n    };\n\n    this.getGroupAppList = () => {\n      wyAxiosPost('Group/getGroupAndApp', {}, result => {\n        const responseData = result.data.msg;\n\n        if (this._isMounted && responseData.length > 0) {\n          const group_app = [];\n          const group = responseData[0].value;\n          const app = responseData[0].children[0].value;\n          group_app.push(group);\n          group_app.push(app);\n          this.setState({\n            groupAppList: responseData,\n            group_app\n          }, () => {\n            this.getLineData();\n            this.getTableData();\n          });\n        }\n      });\n    };\n\n    this.group_appChange = value => {\n      if (this._isMounted) {\n        console.log(value);\n        this.setState({\n          group_app: value\n        }, () => {\n          this.getLineData();\n          this.getTableData();\n        });\n      }\n    };\n\n    this.displayRender = label => {\n      return label.join(' / ');\n    };\n\n    this.getLineData = () => {\n      if (this._isMounted) {\n        this.setState({\n          lineIsSpining: true\n        });\n      }\n\n      const _this$state = this.state,\n            group_app = _this$state.group_app,\n            cur_time = _this$state.cur_time,\n            searched_text = _this$state.searched_text;\n      const info = {\n        cur_time,\n        searched_text\n      };\n      info.log_index = group_app[1];\n      wyAxiosPost('Elastic/getTimeCount', {\n        info\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData) {\n          const curTime = [];\n          curTime.push(responseData.start_time);\n          curTime.push(responseData.last_time);\n\n          if (this._isMounted) {\n            if (this.state.cur_time.length > 0) {\n              this.setState({\n                xLineData: responseData.xxx,\n                yLineData: responseData.yyy,\n                aUnit: responseData.unit,\n                lineIsSpining: false\n              });\n            } else {\n              this.setState({\n                cur_time: curTime,\n                xLineData: responseData.xxx,\n                yLineData: responseData.yyy,\n                aUnit: responseData.unit,\n                lineIsSpining: false\n              });\n            }\n          }\n        } else {\n          if (this._isMounted) {\n            this.setState({\n              lineIsSpining: false\n            });\n          }\n        }\n      });\n    };\n\n    this.getTableData = timeValue => {\n      if (this._isMounted) {\n        this.setState({\n          tableIsSpining: true\n        });\n      }\n\n      let cur_time = [];\n\n      if (timeValue) {\n        cur_time = timeValue;\n      } else {\n        cur_time = this.state.cur_time;\n      }\n\n      const _this$state2 = this.state,\n            group_app = _this$state2.group_app,\n            searched_text = _this$state2.searched_text;\n      const info = {\n        cur_time,\n        searched_text\n      };\n      info.log_index = group_app[1];\n      wyAxiosPost('Elastic/getMessage', {\n        info\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData) {\n          if (this._isMounted) {\n            const newx = [];\n\n            if (responseData.xxx && responseData.xxx.length > 0) {\n              responseData.xxx.map(item => {\n                const obj = this.getColumnSearchProps(item.dataIndex);\n                const newItem = Object.assign({}, item, obj);\n                newx.push(newItem);\n              });\n            }\n\n            this.setState({\n              xTableData: [...newx],\n              yTableData: responseData.yyy,\n              tableIsSpining: false\n            });\n          }\n        } else {\n          if (this._isMounted) {\n            this.setState({\n              tableIsSpining: false\n            });\n          }\n        }\n      });\n    };\n\n    this.rangeTimeChange = value => {\n      if (this._isMounted) {\n        const search_text = this.state.searched_text;\n        this.setState({\n          cur_time: value,\n          search_text\n        }, () => {\n          this.getLineData();\n          this.getTableData();\n        });\n      }\n    };\n\n    this.updatetimeChange = value => {\n      if (this._isMounted) {\n        this.setState({\n          updatetime: value\n        });\n      }\n    };\n\n    this.showModal = () => {\n      const randomCount = Math.random();\n      const cur_time = new Date().getTime();\n      const asId = parseInt(randomCount, 10) + parseInt(cur_time, 10) * 100;\n      const filter_id = asId.toString();\n\n      const lastFilter = _.cloneDeep(this.state.cur_filter);\n\n      lastFilter.filter_id = filter_id;\n\n      if (this._isMounted) {\n        this.setState({\n          visible: true,\n          cur_filter: lastFilter\n        });\n      }\n    };\n\n    this.handleOk = e => {\n      //此处需要存数据库\n      const lastFilterList = _.cloneDeep(this.state.filter_list);\n\n      const curFilter = _.cloneDeep(this.state.cur_filter);\n\n      lastFilterList.push(curFilter);\n\n      if (this._isMounted) {\n        this.setState({\n          filter_list: lastFilterList\n        });\n      }\n\n      this.handleCancel();\n    };\n\n    this.handleCancel = e => {\n      if (this._isMounted) {\n        this.setState({\n          visible: false,\n          cur_filter: {\n            //当前操作的过滤器\n            filter_id: '',\n            filter_name: '',\n            filter_rule: {\n              rule_obj: '',\n              rule_logic: '',\n              rule_value: ''\n            },\n            filter_logic: 'or',\n            filter_run: 'yes'\n          }\n        });\n      }\n    };\n\n    this.chartClick = record => {\n      const curTime = [];\n\n      const timeList = _.cloneDeep(this.state.xLineData);\n\n      let start_time = record.name;\n      let last_time = record.name;\n      const timeIndex = timeList.indexOf(record.name); // if(timeIndex>0){\n      //   start_time = timeList[ timeIndex -1 ]\n      // }else if(timeIndex === 0 && timeList.length>1){\n      //   const time1 = Date.parse(last_time)\n      //   const time2 = Date.parse(timeList[1])\n      //   const frontTime = time1 - time2 + time1\n      //   start_time = moment(frontTime).format('YYYY-MM-DD hh:mm:ss')\n      // }\n\n      if (timeList.length === 1) {\n        _message.warning('抱歉，当前已无法继续下钻分析');\n\n        return;\n      }\n\n      if (timeIndex === timeList.length - 1) {\n        const time1 = Date.parse(timeList[timeIndex - 1]);\n        const time2 = Date.parse(start_time);\n        const afterTime = time2 - time1 + time2;\n        last_time = moment(afterTime).format('YYYY-MM-DD HH:mm:ss');\n      } else {\n        last_time = timeList[timeIndex + 1];\n      }\n\n      curTime.push(start_time);\n      curTime.push(last_time);\n\n      if (this._isMounted && curTime[0] !== curTime[1]) {\n        this.setState({\n          cur_time: curTime\n        }, () => {\n          this.getLineData();\n          this.getTableData();\n        });\n      } else {\n        _message.warning('抱歉，当前已无法继续下钻分析');\n      }\n    };\n\n    this.brushSelect = params => {\n      if (params.batch[0].areas.length > 0) {\n        let flowPicTime = [];\n        const xxxRange = params.batch[0].areas[0].coordRange;\n\n        if (Math.abs(xxxRange[0]) === Math.abs(xxxRange[1])) {\n          flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[1])]);\n          flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[1])]);\n        } else {\n          flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[0])]);\n          flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[1])]);\n        }\n\n        if (flowPicTime[1] === undefined) {\n          flowPicTime[1] = this.state.xLineData[parseInt(this.state.xLineData.length - 1, 0)];\n        }\n\n        if (this._isMounted) {\n          this.setState({\n            cur_time: flowPicTime\n          }, () => {\n            this.getLineData();\n            this.getTableData();\n          });\n        }\n      }\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => jsx(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, jsx(_Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }), jsx(_Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, \"\\u641C\\u7D22\"), jsx(_Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, \"\\u91CD\\u7F6E\")),\n      filterIcon: filtered => jsx(_Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => jsx(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text ? text.toString() : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      })\n    });\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0]\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.subTable = record => {\n      const columns = [{\n        title: 'Field',\n        dataIndex: 'field',\n        key: 'field'\n      }, {\n        title: 'Value',\n        dataIndex: 'value',\n        key: 'value'\n      }];\n      const obj = record.subData;\n      const data = [];\n      const keys = Object.keys(obj);\n\n      if (keys && keys.length > 0) {\n        keys.map(item => {\n          const aRow = {};\n          aRow.key = item;\n          aRow.field = item;\n          aRow.value = obj[item];\n          data.push(aRow);\n        });\n      }\n\n      return jsx(_Table, {\n        columns: columns,\n        dataSource: data,\n        size: \"small\",\n        pagination: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      });\n    };\n\n    this.doSearch = () => {\n      const searched_text = this.state.search_text;\n\n      if (this._isMounted) {\n        this.setState({\n          searched_text\n        }, () => {\n          this.getLineData();\n          this.getTableData();\n        });\n      }\n    };\n\n    this.search_textChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          search_text: e.target.value\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.getGroupAppList();\n  } //获取索引列表\n  //获取所有索引\n  // getIndex = ()=>{\n  //   wyAxiosPost('Source/getAppName',{},(result)=>{\n  //     const responseData = result.data.msg\n  //     if(this._isMounted && responseData && responseData.length>0){\n  //       this.setState({\n  //         indexList: responseData,\n  //         log_index: responseData[0]\n  //       },()=>{\n  //         this.getLineData()\n  //         this.getTableData()\n  //       })\n  //     }\n  //   })\n  // }\n\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    return jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    }, jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, jsx(_Tooltip, {\n      placement: \"bottomLeft\",\n      title: \"Example: key1=value1 or key2=value2 , key1:value1 and key2:value2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, jsx(Search, {\n      placeholder: \"Search...(e.g.status:200 AND extension:PHP)\",\n      onSearch: value => this.doSearch(value),\n      css: _ref3,\n      size: \"small\",\n      value: this.state.search_text,\n      onChange: this.search_textChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, jsx(_Cascader, {\n      options: this.state.groupAppList,\n      displayRender: this.displayRender,\n      onChange: this.group_appChange,\n      value: this.state.group_app,\n      size: \"small\",\n      css: _ref5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    })), jsx(\"div\", {\n      css: _ref6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531\n      },\n      __self: this\n    }, jsx(WyDatePicker, {\n      curTime: this.state.cur_time,\n      rangeTimeChange: this.rangeTimeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }))))), jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, jsx(_Col, {\n      css: _ref7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, jsx(Amodule, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593\n      },\n      __self: this\n    }, jsx(WySpin, {\n      isSpining: this.state.lineIsSpining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, jsx(Line, {\n      xData: this.state.xLineData,\n      yData: this.state.yLineData,\n      aUnit: this.state.aUnit,\n      onChartClick: this.chartClick,\n      brush: true,\n      onBrushSelected: this.brushSelect,\n      nozoom: true,\n      dataZoom: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, jsx(Amodule, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, jsx(WySpin, {\n      isSpining: this.state.lineIsSpining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, jsx(WyTable, {\n      xData: this.state.xTableData,\n      yData: this.state.yTableData,\n      expandedRowRender: record => this.subTable(record),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    })))))))));\n  }\n\n}\n\nexport default LogStatistic;","map":{"version":3,"sources":["/industry/app/src/LogStatistic/index.js"],"names":["jsx","css","React","Component","_","Highlighter","moment","WyDatePicker","Amodule","wyAxiosPost","WySpin","Filter","Line","WyTable","Option","Search","LogStatistic","state","indexList","cur_time","updatetime","visible","lineIsSpining","tableIsSpining","xLineData","yLineData","aUnit","xTableData","yTableData","search_text","searched_text","groupAppList","group_app","getGroupAppList","result","responseData","data","msg","_isMounted","length","group","value","app","children","push","setState","getLineData","getTableData","group_appChange","console","log","displayRender","label","join","info","log_index","curTime","start_time","last_time","xxx","yyy","unit","timeValue","newx","map","item","obj","getColumnSearchProps","dataIndex","newItem","Object","assign","rangeTimeChange","updatetimeChange","showModal","randomCount","Math","random","Date","getTime","asId","parseInt","filter_id","toString","lastFilter","cloneDeep","cur_filter","handleOk","e","lastFilterList","filter_list","curFilter","handleCancel","filter_name","filter_rule","rule_obj","rule_logic","rule_value","filter_logic","filter_run","chartClick","record","timeList","name","timeIndex","indexOf","warning","time1","parse","time2","afterTime","format","brushSelect","params","batch","areas","flowPicTime","xxxRange","coordRange","abs","undefined","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","target","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","onFilter","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","render","text","backgroundColor","searchText","subTable","columns","title","key","subData","keys","aRow","field","doSearch","search_textChange","componentDidMount","componentWillUnmount"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core'\r\nimport React, { Component } from 'react'\r\nimport { Col, Row, Select, Button, Modal, Input, Icon, Table, Tooltip, Cascader, message } from 'antd'\r\nimport _ from 'lodash'\r\nimport Highlighter from 'react-highlight-words'\r\nimport moment from 'moment'\r\n\r\nimport WyDatePicker from '../components/WyDatePicker'\r\nimport { Amodule } from '../components/Amodule'\r\nimport { wyAxiosPost } from '../components/WyAxios'\r\nimport WySpin from '../components/WySpin'\r\nimport Filter from './Filter'\r\nimport Line from '../components/Line'\r\nimport WyTable from '../components/WyTable'\r\nconst Option = Select.Option\r\nconst {Search} = Input\r\nclass LogStatistic extends Component{\r\n  state = {\r\n    indexList:[],\r\n\r\n    cur_time:[], //数据统计时间范围\r\n    updatetime: '0', //数据更新频率\r\n    // filter_list: [], //过滤器\r\n    // cur_filter: {   //当前操作的过滤器\r\n    //   filter_id:'',\r\n    //   filter_name:'',\r\n    //   filter_rule:{\r\n    //     rule_obj:'',\r\n    //     rule_logic:'',\r\n    //     rule_value:''\r\n    //   },\r\n    //   filter_logic:'or',\r\n    //   filter_run:'yes'\r\n    // },\r\n    //log_index: '',\r\n\r\n    visible: false,\r\n    lineIsSpining: false,\r\n    tableIsSpining: false,\r\n    xLineData:[],\r\n    yLineData:[],\r\n    aUnit:'',\r\n    xTableData:[],\r\n    yTableData:[],\r\n    search_text:'',\r\n    searched_text:'',\r\n    groupAppList:[],\r\n    group_app:[]\r\n  }\r\n  componentDidMount(){\r\n    this._isMounted = true\r\n    this.getGroupAppList()\r\n  }\r\n  //获取索引列表\r\n  //获取所有索引\r\n  // getIndex = ()=>{\r\n  //   wyAxiosPost('Source/getAppName',{},(result)=>{\r\n  //     const responseData = result.data.msg\r\n  //     if(this._isMounted && responseData && responseData.length>0){\r\n  //       this.setState({\r\n  //         indexList: responseData,\r\n  //         log_index: responseData[0]\r\n  //       },()=>{\r\n  //         this.getLineData()\r\n  //         this.getTableData()\r\n  //       })\r\n  //     }\r\n  //   })\r\n  // }\r\n  getGroupAppList = ()=>{\r\n    wyAxiosPost('Group/getGroupAndApp',{},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(this._isMounted && responseData.length>0){\r\n        const group_app = []\r\n        const group = responseData[0].value\r\n        const app = responseData[0].children[0].value\r\n        group_app.push(group)\r\n        group_app.push(app)\r\n        this.setState({\r\n          groupAppList: responseData,\r\n          group_app\r\n        },()=>{\r\n          this.getLineData()\r\n          this.getTableData()\r\n        }\r\n        )\r\n      }\r\n    })\r\n  }\r\n  group_appChange = (value)=>{\r\n    if(this._isMounted){\r\n      console.log(value)\r\n      this.setState({\r\n        group_app: value\r\n      },()=>{\r\n        this.getLineData()\r\n        this.getTableData()\r\n      })\r\n    }\r\n  }\r\n  displayRender = (label)=>{\r\n    return label.join(' / ')\r\n  }\r\n\r\n  //获取曲线图数据\r\n  getLineData = ()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        lineIsSpining: true\r\n      })\r\n    }\r\n    const {group_app,cur_time,searched_text} = this.state\r\n    const info = {cur_time,searched_text}\r\n    info.log_index = group_app[1]\r\n    wyAxiosPost('Elastic/getTimeCount',{info},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData){\r\n        const curTime = []\r\n        curTime.push(responseData.start_time)\r\n        curTime.push(responseData.last_time)\r\n        if(this._isMounted){\r\n          if(this.state.cur_time.length>0){\r\n            this.setState({\r\n              xLineData: responseData.xxx,\r\n              yLineData: responseData.yyy,\r\n              aUnit: responseData.unit,\r\n              lineIsSpining: false\r\n            })\r\n          }else{\r\n            this.setState({\r\n              cur_time: curTime,\r\n              xLineData: responseData.xxx,\r\n              yLineData: responseData.yyy,\r\n              aUnit: responseData.unit,\r\n              lineIsSpining: false\r\n            })\r\n          }\r\n        }\r\n      }else{\r\n        if(this._isMounted){\r\n          this.setState({\r\n            lineIsSpining: false\r\n          })\r\n        }\r\n      }\r\n    })\r\n  }\r\n  getTableData = (timeValue)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        tableIsSpining: true\r\n      })\r\n    }\r\n    let cur_time = []\r\n    if(timeValue){\r\n      cur_time = timeValue\r\n    }else{\r\n      cur_time = this.state.cur_time\r\n    }\r\n    const {group_app,searched_text} = this.state\r\n    const info = {cur_time,searched_text}\r\n    info.log_index = group_app[1]\r\n    wyAxiosPost('Elastic/getMessage',{info},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData){\r\n        if(this._isMounted){\r\n          const newx = []\r\n          if(responseData.xxx && responseData.xxx.length>0){\r\n            responseData.xxx.map((item)=>{\r\n              const obj = this.getColumnSearchProps(item.dataIndex)\r\n              const newItem = Object.assign({},item,obj)\r\n              newx.push(newItem)\r\n            })\r\n          }\r\n          this.setState({\r\n            xTableData: [...newx],\r\n            yTableData: responseData.yyy,\r\n            tableIsSpining: false\r\n          })\r\n        }\r\n      }else{\r\n        if(this._isMounted){\r\n          this.setState({\r\n            tableIsSpining: false\r\n          })\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  rangeTimeChange = (value)=>{\r\n    if(this._isMounted){\r\n      const search_text = this.state.searched_text\r\n      this.setState({\r\n        cur_time: value,\r\n        search_text\r\n      },()=>{\r\n        this.getLineData()\r\n        this.getTableData()\r\n      })\r\n    }\r\n  }\r\n  updatetimeChange = (value)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        updatetime: value\r\n      })\r\n    }\r\n  }\r\n  showModal = () => {\r\n    const randomCount = Math.random();\r\n    const cur_time = new Date().getTime();\r\n    const asId = parseInt(randomCount,10) + parseInt(cur_time,10)*100\r\n    const filter_id = asId.toString()\r\n    const lastFilter = _.cloneDeep(this.state.cur_filter)\r\n    lastFilter.filter_id = filter_id\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: true,\r\n        cur_filter: lastFilter\r\n      })\r\n    }\r\n  }\r\n  handleOk = e => {\r\n    //此处需要存数据库\r\n    const lastFilterList = _.cloneDeep(this.state.filter_list)\r\n    const curFilter = _.cloneDeep(this.state.cur_filter)\r\n    lastFilterList.push(curFilter)\r\n    if(this._isMounted){\r\n      this.setState({\r\n        filter_list: lastFilterList\r\n      })\r\n    }\r\n    this.handleCancel()\r\n  }\r\n  handleCancel = e => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: false,\r\n        cur_filter: {   //当前操作的过滤器\r\n          filter_id:'',\r\n          filter_name:'',\r\n          filter_rule:{\r\n            rule_obj:'',\r\n            rule_logic:'',\r\n            rule_value:''\r\n          },\r\n          filter_logic:'or',\r\n          filter_run: 'yes'\r\n        }\r\n      })\r\n    }\r\n  }\r\n  //过滤器相关\r\n  // rule_objChange = (value)=>{\r\n  //   const lastFilter = _.cloneDeep(this.state.cur_filter)\r\n  //   lastFilter.filter_rule.rule_obj = value\r\n  //   lastFilter.filter_rule.rule_logic = ''\r\n  //   lastFilter.filter_rule.rule_value = ''\r\n  //   if(this._isMounted){\r\n  //     this.setState({\r\n  //       cur_filter: _.cloneDeep(lastFilter)\r\n  //     })\r\n  //   }\r\n  // }\r\n  // rule_logicChange = (value)=>{\r\n  //   const lastFilter = _.cloneDeep(this.state.cur_filter)\r\n  //   lastFilter.filter_rule.rule_logic = value\r\n  //   lastFilter.filter_rule.rule_value = ''\r\n  //   if(this._isMounted){\r\n  //     this.setState({\r\n  //       cur_filter: _.cloneDeep(lastFilter)\r\n  //     })\r\n  //   }\r\n  // }\r\n  // filter_nameChange = (e)=>{\r\n  //   const lastFilter = _.cloneDeep(this.state.cur_filter)\r\n  //   lastFilter.filter_name = e.target.value\r\n  //   if(this._isMounted){\r\n  //     this.setState({\r\n  //       cur_filter: _.cloneDeep(lastFilter)\r\n  //     })\r\n  //   }\r\n  // }\r\n  // filter_logicChange = (value)=>{\r\n  //   const lastFilter = _.cloneDeep(this.state.cur_filter)\r\n  //   lastFilter.filter_logic = value\r\n  //   if(this._isMounted){\r\n  //     this.setState({\r\n  //       cur_filter: _.cloneDeep(lastFilter)\r\n  //     })\r\n  //   }\r\n  // }\r\n  // log_indexChange = (value)=>{\r\n  //   const search_text = this.searched_text\r\n  //   this.setState({\r\n  //     log_index: value,\r\n  //     search_text\r\n  //   },()=>{\r\n  //     this.getLineData()\r\n  //     this.getTableData()\r\n  //   })\r\n  // }\r\n  //柱状图点击事件\r\n  chartClick = (record)=>{\r\n    const curTime = []\r\n    const timeList = _.cloneDeep(this.state.xLineData)\r\n    let start_time = record.name\r\n    let last_time = record.name\r\n    const timeIndex = timeList.indexOf(record.name)\r\n    // if(timeIndex>0){\r\n    //   start_time = timeList[ timeIndex -1 ]\r\n    // }else if(timeIndex === 0 && timeList.length>1){\r\n    //   const time1 = Date.parse(last_time)\r\n    //   const time2 = Date.parse(timeList[1])\r\n    //   const frontTime = time1 - time2 + time1\r\n    //   start_time = moment(frontTime).format('YYYY-MM-DD hh:mm:ss')\r\n    // }\r\n    if(timeList.length === 1){\r\n      message.warning('抱歉，当前已无法继续下钻分析')\r\n      return\r\n    }\r\n    if(timeIndex === timeList.length-1){\r\n      const time1 = Date.parse(timeList[timeIndex-1])\r\n      const time2 = Date.parse(start_time)\r\n      const afterTime = time2 - time1 + time2\r\n      last_time = moment(afterTime).format('YYYY-MM-DD HH:mm:ss')\r\n    }else{\r\n      last_time = timeList[timeIndex+1]\r\n    }\r\n    curTime.push(start_time)\r\n    curTime.push(last_time)\r\n    if(this._isMounted && curTime[0] !== curTime[1]){\r\n      this.setState({\r\n        cur_time: curTime\r\n      },()=>{\r\n        this.getLineData()\r\n        this.getTableData()\r\n      })\r\n    }else{\r\n      message.warning('抱歉，当前已无法继续下钻分析')\r\n    }\r\n  }\r\n  //柱状图刷子事件\r\n  brushSelect = (params)=>{\r\n    if(params.batch[0].areas.length>0){\r\n      let flowPicTime = []\r\n      const xxxRange = params.batch[0].areas[0].coordRange\r\n      if(Math.abs(xxxRange[0]) === Math.abs(xxxRange[1])){\r\n        flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[1])])\r\n        flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[1])])\r\n      }else{\r\n        flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[0])])\r\n        flowPicTime.push(this.state.xLineData[Math.abs(xxxRange[1])])\r\n      }\r\n      if(flowPicTime[1] === undefined){\r\n        flowPicTime[1] = this.state.xLineData[parseInt(this.state.xLineData.length-1,0)]\r\n      }\r\n      if(this._isMounted){\r\n        this.setState({\r\n          cur_time: flowPicTime\r\n        },()=>{\r\n          this.getLineData()\r\n          this.getTableData()\r\n        })\r\n      }\r\n    }\r\n  }\r\n  //表格搜索相关\r\n  getColumnSearchProps = dataIndex => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n          icon=\"search\"\r\n          size=\"small\"\r\n          style={{ width: 90, marginRight: 8 }}\r\n        >\r\n          搜索\r\n        </Button>\r\n        <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n          重置\r\n        </Button>\r\n      </div>\r\n    ),\r\n    filterIcon: filtered => (\r\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n    ),\r\n    onFilter: (value, record) =>\r\n      record[dataIndex]\r\n        .toString()\r\n        .toLowerCase()\r\n        .includes(value.toLowerCase()),\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select());\r\n      }\r\n    },\r\n    render: text => (\r\n      <Highlighter\r\n        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n        searchWords={[this.state.searchText]}\r\n        autoEscape\r\n        textToHighlight={text?text.toString():''}\r\n      />\r\n    ),\r\n  })\r\n  handleSearch = (selectedKeys, confirm) => {\r\n    confirm();\r\n    this.setState({ searchText: selectedKeys[0] });\r\n  }\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  }\r\n  //嵌套表格生成\r\n  subTable = (record)=>{\r\n    const columns = [\r\n      {title:'Field',dataIndex:'field',key:'field'},\r\n      {title:'Value',dataIndex:'value',key:'value'}\r\n    ]\r\n    const obj = record.subData\r\n\r\n    const data = []\r\n    const keys = Object.keys(obj)\r\n    if(keys && keys.length>0){\r\n      keys.map(item=>{\r\n        const aRow = {}\r\n        aRow.key = item\r\n        aRow.field = item\r\n        aRow.value = obj[item]\r\n        data.push(aRow)\r\n      })\r\n    }\r\n    return <Table\r\n            columns={columns}\r\n            dataSource={data}\r\n            size=\"small\"\r\n            pagination={false}\r\n          />\r\n  }\r\n  //搜索\r\n  doSearch = ()=>{\r\n    const searched_text = this.state.search_text\r\n    if(this._isMounted){\r\n      this.setState({\r\n        searched_text\r\n      },()=>{\r\n        this.getLineData()\r\n        this.getTableData()\r\n      })\r\n    }\r\n  }\r\n  search_textChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        search_text: e.target.value\r\n      })\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    this._isMounted = false\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n            <div css={{display:\"flex\"}}>\r\n              <div css={{flex:\"1 1 auto\"}}>\r\n              <Tooltip placement=\"bottomLeft\" title=\"Example: key1=value1 or key2=value2 , key1:value1 and key2:value2\">\r\n                <Search\r\n                  placeholder=\"Search...(e.g.status:200 AND extension:PHP)\"\r\n                  onSearch={value => this.doSearch(value)}\r\n                  css={{ width: \"80%\" }}\r\n                  size=\"small\"\r\n                  value={this.state.search_text}\r\n                  onChange={this.search_textChange}\r\n                />\r\n              </Tooltip>\r\n\r\n              </div>\r\n              <div css={{flex:\"0 0 240px\"}}>\r\n                {\r\n                  // <Select size='small' value={this.state.log_index} onChange={this.log_indexChange} style={{minWidth:\"160px\"}}>\r\n                  //   {\r\n                  //     this.state.indexList && this.state.indexList.length>0?\r\n                  //     this.state.indexList.map(item=>{\r\n                  //       return <Option title={item} value={item} key={item}>{item}</Option>\r\n                  //     })\r\n                  //     :\r\n                  //     ''\r\n                  //   }\r\n                  // </Select>\r\n                }\r\n\r\n                <Cascader\r\n                  options={this.state.groupAppList}\r\n                  displayRender={this.displayRender}\r\n                  onChange={this.group_appChange}\r\n                  value={this.state.group_app}\r\n                  size=\"small\"\r\n                  css={{minWidth:\"220px\"}}\r\n                />\r\n\r\n\r\n\r\n              </div>\r\n              {\r\n                // <div css={{flex:\"0 0 200px\"}}>\r\n                //   <span>数据更新：</span>\r\n                //   <Select size='small' value={this.state.updatetime} onChange={this.updatetimeChange} style={{minWidth:\"100px\"}}>\r\n                //     <Option key=\"0\" value=\"0\">关闭</Option>\r\n                //     <Option key=\"5\" value=\"5\">5s</Option>\r\n                //     <Option key=\"60\" value=\"60\">1min</Option>\r\n                //   </Select>\r\n                // </div>\r\n              }\r\n              <div css={{flex:\"0 0 360px\"}}>\r\n                <WyDatePicker  curTime={this.state.cur_time} rangeTimeChange={this.rangeTimeChange}/>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col css={{paddingTop:\"20px\"}}>\r\n          {\r\n            // <div css={{width:\"200px\",float:\"left\"}}>\r\n            //   <Amodule>\r\n            //     <Button type=\"primary\" size=\"small\" onClick={this.showModal}>\r\n            //       <span css={{marginRight:\"10px\"}}>添加过滤器 </span>\r\n            //       <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n            //     </Button>\r\n            //     <div>\r\n            //       启用中\r\n            //     </div>\r\n            //     <div css={{paddingLeft:\"20px\"}}>\r\n            //       {\r\n            //         this.state.filter_list && this.state.filter_list.length>0?\r\n            //         this.state.filter_list.map(item=>{\r\n            //           let dom= ''\r\n            //           if(item.filter_run === \"yes\"){\r\n            //             dom = <Filter key={item.filter_id} filterData={item}/>\r\n            //           }\r\n            //           return dom\r\n            //         })\r\n            //         :\r\n            //         ''\r\n            //       }\r\n            //     </div>\r\n            //     <div>\r\n            //       未启用\r\n            //     </div>\r\n            //     <div css={{paddingLeft:\"20px\"}}>\r\n            //       {\r\n            //         this.state.filter_list && this.state.filter_list.length>0?\r\n            //         this.state.filter_list.map(item=>{\r\n            //           let dom= ''\r\n            //           if(item.filter_run === \"no\"){\r\n            //             dom = <Filter key={item.filter_id} filterData={item}/>\r\n            //           }\r\n            //           return dom\r\n            //         })\r\n            //         :\r\n            //         ''\r\n            //       }\r\n            //     </div>\r\n            //   </Amodule>\r\n            // </div>\r\n          }\r\n\r\n              <div css={{\r\n                // float:\"right\",\r\n                // marginLeft:\"20px\",\r\n                // width: \"-webkit-calc(100% - 220px)\",\r\n                // width: \"-moz-calc(100% - 220px)\",\r\n                // width: \"-ms-calc(100% - 220px)\",\r\n                // width: \"-o-calc(100% - 220px)\",\r\n                // width: \"calc(100% - 220px)\",\r\n              }}>\r\n                <Amodule >\r\n                  <WySpin isSpining={this.state.lineIsSpining}>\r\n                    <Line\r\n                      xData={this.state.xLineData}\r\n                      yData={this.state.yLineData}\r\n                      aUnit={this.state.aUnit}\r\n                      onChartClick={this.chartClick}\r\n                      brush={true}\r\n                      onBrushSelected={this.brushSelect}\r\n                      nozoom={true}\r\n                      dataZoom={true}\r\n                    />\r\n                  </WySpin>\r\n                </Amodule>\r\n                <div css={{marginTop:\"20px\"}}>\r\n                  <Amodule>\r\n                    <div>\r\n\r\n                    </div>\r\n                    <div>\r\n                      <WySpin isSpining={this.state.lineIsSpining}>\r\n                        <WyTable\r\n                          xData={this.state.xTableData}\r\n                          yData={this.state.yTableData}\r\n                          expandedRowRender={(record)=>this.subTable(record)}\r\n                        />\r\n                      </WySpin>\r\n                    </div>\r\n                  </Amodule>\r\n                </div>\r\n              </div>\r\n          </Col>\r\n        </Row>\r\n        {\r\n          // <Modal\r\n          //   title=\"添加过滤器\"\r\n          //   width={648}\r\n          //   visible={this.state.visible}\r\n          //   onOk={this.handleOk}\r\n          //   onCancel={this.handleCancel}\r\n          // >\r\n          //   <div css={{display:\"flex\", lineHeight:\"40px\"}}>\r\n          //     <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>过滤器名称：</div>\r\n          //     <div css={{flex:\"1 1 auto\"}}>\r\n          //       <Input value={this.state.cur_filter.filter_name} onChange={this.filter_nameChange} />\r\n          //     </div>\r\n          //   </div>\r\n          //   <div css={{display:\"flex\", lineHeight:\"40px\"}}>\r\n          //     <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>过滤条件：</div>\r\n          //     <div css={{flex:\"1 1 auto\"}}>\r\n          //       <Select\r\n          //        showSearch\r\n          //        css={{ minWidth: \"200px\" }}\r\n          //        placeholder=\"Select a person\"\r\n          //        optionFilterProp=\"children\"\r\n          //        onChange={this.rule_objChange}\r\n          //        filterOption={(input, option) =>option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n          //       >\r\n          //        <Option key=\"mykey\" value=\"\">请选择...</Option>\r\n          //        <Option value=\"jack\">Jack</Option>\r\n          //        <Option value=\"lucy\">Lucy</Option>\r\n          //        <Option value=\"tom\">Tom</Option>\r\n          //       </Select>\r\n          //       {\r\n          //         this.state.cur_filter.filter_rule.rule_obj !== ''?\r\n          //         <Select\r\n          //           css={{minWidth:\"100px\"}}\r\n          //           onChange={this.rule_logicChange}\r\n          //         >\r\n          //           <Option key='mykey' value=''>请选择...</Option>\r\n          //           <Option key='is' value='is'>是</Option>\r\n          //           <Option key='isnot' value='isnot'>不是</Option>\r\n          //           <Option key='include' value='include'>包含于</Option>\r\n          //           <Option key='uninclude' value='uninclude'>不包含于</Option>\r\n          //           <Option key='exist' value='exist'>存在</Option>\r\n          //           <Option key='unexist' value='unexist'>不存在</Option>\r\n          //         </Select>\r\n          //         :\r\n          //         ''\r\n          //       }\r\n          //       {\r\n          //         this.state.cur_filter.filter_rule.rule_logic !==''?\r\n          //         <Input css={{width:\"200px\"}}/>\r\n          //         :\r\n          //         ''\r\n          //       }\r\n          //\r\n          //     </div>\r\n          //   </div>\r\n          //   <div css={{display:\"flex\", lineHeight:\"40px\"}}>\r\n          //     <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>过滤逻辑：</div>\r\n          //     <div css={{flex:\"1 1 auto\"}}>\r\n          //       <Select\r\n          //         css={{minWidth:\"60px\"}}\r\n          //         value={this.state.cur_filter.filter_logic}\r\n          //         onChange={this.filter_logicChange}\r\n          //       >\r\n          //         <Option key=\"or\" value=\"or\">或</Option>\r\n          //         <Option key=\"and\" value=\"and\">且</Option>\r\n          //       </Select>\r\n          //     </div>\r\n          //   </div>\r\n          // </Modal>\r\n        }\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LogStatistic\r\n"]},"metadata":{},"sourceType":"module"}