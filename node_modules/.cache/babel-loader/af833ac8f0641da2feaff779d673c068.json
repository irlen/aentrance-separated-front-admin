{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.mapv = global.mapv || {});\n})(this, function (exports) {\n  'use strict';\n\n  var version = \"2.0.35\";\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  var clear = function clear(context) {\n    context && context.clearRect && context.clearRect(0, 0, context.canvas.width, context.canvas.height); //context.canvas.width = context.canvas.width;\n    //context.canvas.height = context.canvas.height;\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var resolutionScale$1 = function resolutionScale$1(context) {\n    var devicePixelRatio = window.devicePixelRatio || 1;\n    context.canvas.width = context.canvas.width * devicePixelRatio;\n    context.canvas.height = context.canvas.height * devicePixelRatio;\n    context.canvas.style.width = context.canvas.width / devicePixelRatio + 'px';\n    context.canvas.style.height = context.canvas.height / devicePixelRatio + 'px';\n    context.scale(devicePixelRatio, devicePixelRatio);\n  };\n\n  function Event() {\n    this._subscribers = {}; // event subscribers\n  }\n  /**\n   * Subscribe to an event, add an event listener\n   * @param {String} event        Event name. Available events: 'put', 'update',\n   *                              'remove'\n   * @param {function} callback   Callback method. Called with three parameters:\n   *                                  {String} event\n   *                                  {Object | null} params\n   *                                  {String | Number} senderId\n   */\n\n\n  Event.prototype.on = function (event, callback) {\n    var subscribers = this._subscribers[event];\n\n    if (!subscribers) {\n      subscribers = [];\n      this._subscribers[event] = subscribers;\n    }\n\n    subscribers.push({\n      callback: callback\n    });\n  };\n  /**\n   * Unsubscribe from an event, remove an event listener\n   * @param {String} event\n   * @param {function} callback\n   */\n\n\n  Event.prototype.off = function (event, callback) {\n    var subscribers = this._subscribers[event];\n\n    if (subscribers) {\n      //this._subscribers[event] = subscribers.filter(listener => listener.callback != callback);\n      for (var i = 0; i < subscribers.length; i++) {\n        if (subscribers[i].callback == callback) {\n          subscribers.splice(i, 1);\n          i--;\n        }\n      }\n    }\n  };\n  /**\n   * Trigger an event\n   * @param {String} event\n   * @param {Object | null} params\n   * @param {String} [senderId]       Optional id of the sender.\n   * @private\n   */\n\n\n  Event.prototype._trigger = function (event, params, senderId) {\n    if (event == '*') {\n      throw new Error('Cannot trigger event *');\n    }\n\n    var subscribers = [];\n\n    if (event in this._subscribers) {\n      subscribers = subscribers.concat(this._subscribers[event]);\n    }\n\n    if ('*' in this._subscribers) {\n      subscribers = subscribers.concat(this._subscribers['*']);\n    }\n\n    for (var i = 0, len = subscribers.length; i < len; i++) {\n      var subscriber = subscribers[i];\n\n      if (subscriber.callback) {\n        subscriber.callback(event, params, senderId || null);\n      }\n    }\n  };\n  /**\n   * get the center by the city name\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var citycenter = {\n    municipalities: [{\n      n: \"北京\",\n      g: \"116.395645,39.929986|12\"\n    }, {\n      n: \"上海\",\n      g: \"121.487899,31.249162|12\"\n    }, {\n      n: \"天津\",\n      g: \"117.210813,39.14393|12\"\n    }, {\n      n: \"重庆\",\n      g: \"106.530635,29.544606|12\"\n    }],\n    provinces: [{\n      n: \"安徽\",\n      g: \"117.216005,31.859252|8\",\n      cities: [{\n        n: \"合肥\",\n        g: \"117.282699,31.866942|12\"\n      }, {\n        n: \"安庆\",\n        g: \"117.058739,30.537898|13\"\n      }, {\n        n: \"蚌埠\",\n        g: \"117.35708,32.929499|13\"\n      }, {\n        n: \"亳州\",\n        g: \"115.787928,33.871211|13\"\n      }, {\n        n: \"巢湖\",\n        g: \"117.88049,31.608733|13\"\n      }, {\n        n: \"池州\",\n        g: \"117.494477,30.660019|14\"\n      }, {\n        n: \"滁州\",\n        g: \"118.32457,32.317351|13\"\n      }, {\n        n: \"阜阳\",\n        g: \"115.820932,32.901211|13\"\n      }, {\n        n: \"淮北\",\n        g: \"116.791447,33.960023|13\"\n      }, {\n        n: \"淮南\",\n        g: \"117.018639,32.642812|13\"\n      }, {\n        n: \"黄山\",\n        g: \"118.29357,29.734435|13\"\n      }, {\n        n: \"六安\",\n        g: \"116.505253,31.755558|13\"\n      }, {\n        n: \"马鞍山\",\n        g: \"118.515882,31.688528|13\"\n      }, {\n        n: \"宿州\",\n        g: \"116.988692,33.636772|13\"\n      }, {\n        n: \"铜陵\",\n        g: \"117.819429,30.94093|14\"\n      }, {\n        n: \"芜湖\",\n        g: \"118.384108,31.36602|12\"\n      }, {\n        n: \"宣城\",\n        g: \"118.752096,30.951642|13\"\n      }]\n    }, {\n      n: \"福建\",\n      g: \"117.984943,26.050118|8\",\n      cities: [{\n        n: \"福州\",\n        g: \"119.330221,26.047125|12\"\n      }, {\n        n: \"龙岩\",\n        g: \"117.017997,25.078685|13\"\n      }, {\n        n: \"南平\",\n        g: \"118.181883,26.643626|13\"\n      }, {\n        n: \"宁德\",\n        g: \"119.542082,26.656527|14\"\n      }, {\n        n: \"莆田\",\n        g: \"119.077731,25.44845|13\"\n      }, {\n        n: \"泉州\",\n        g: \"118.600362,24.901652|12\"\n      }, {\n        n: \"三明\",\n        g: \"117.642194,26.270835|14\"\n      }, {\n        n: \"厦门\",\n        g: \"118.103886,24.489231|12\"\n      }, {\n        n: \"漳州\",\n        g: \"117.676205,24.517065|12\"\n      }]\n    }, {\n      n: \"甘肃\",\n      g: \"102.457625,38.103267|6\",\n      cities: [{\n        n: \"兰州\",\n        g: \"103.823305,36.064226|12\"\n      }, {\n        n: \"白银\",\n        g: \"104.171241,36.546682|13\"\n      }, {\n        n: \"定西\",\n        g: \"104.626638,35.586056|13\"\n      }, {\n        n: \"甘南州\",\n        g: \"102.917442,34.992211|14\"\n      }, {\n        n: \"嘉峪关\",\n        g: \"98.281635,39.802397|13\"\n      }, {\n        n: \"金昌\",\n        g: \"102.208126,38.516072|13\"\n      }, {\n        n: \"酒泉\",\n        g: \"98.508415,39.741474|13\"\n      }, {\n        n: \"临夏州\",\n        g: \"103.215249,35.598514|13\"\n      }, {\n        n: \"陇南\",\n        g: \"104.934573,33.39448|14\"\n      }, {\n        n: \"平凉\",\n        g: \"106.688911,35.55011|13\"\n      }, {\n        n: \"庆阳\",\n        g: \"107.644227,35.726801|13\"\n      }, {\n        n: \"天水\",\n        g: \"105.736932,34.584319|13\"\n      }, {\n        n: \"武威\",\n        g: \"102.640147,37.933172|13\"\n      }, {\n        n: \"张掖\",\n        g: \"100.459892,38.93932|13\"\n      }]\n    }, {\n      n: \"广东\",\n      g: \"113.394818,23.408004|8\",\n      cities: [{\n        n: \"广州\",\n        g: \"113.30765,23.120049|12\"\n      }, {\n        n: \"潮州\",\n        g: \"116.630076,23.661812|13\"\n      }, {\n        n: \"东莞\",\n        g: \"113.763434,23.043024|12\"\n      }, {\n        n: \"佛山\",\n        g: \"113.134026,23.035095|13\"\n      }, {\n        n: \"河源\",\n        g: \"114.713721,23.757251|12\"\n      }, {\n        n: \"惠州\",\n        g: \"114.410658,23.11354|12\"\n      }, {\n        n: \"江门\",\n        g: \"113.078125,22.575117|13\"\n      }, {\n        n: \"揭阳\",\n        g: \"116.379501,23.547999|13\"\n      }, {\n        n: \"茂名\",\n        g: \"110.931245,21.668226|13\"\n      }, {\n        n: \"梅州\",\n        g: \"116.126403,24.304571|13\"\n      }, {\n        n: \"清远\",\n        g: \"113.040773,23.698469|13\"\n      }, {\n        n: \"汕头\",\n        g: \"116.72865,23.383908|13\"\n      }, {\n        n: \"汕尾\",\n        g: \"115.372924,22.778731|14\"\n      }, {\n        n: \"韶关\",\n        g: \"113.594461,24.80296|13\"\n      }, {\n        n: \"深圳\",\n        g: \"114.025974,22.546054|12\"\n      }, {\n        n: \"阳江\",\n        g: \"111.97701,21.871517|14\"\n      }, {\n        n: \"云浮\",\n        g: \"112.050946,22.937976|13\"\n      }, {\n        n: \"湛江\",\n        g: \"110.365067,21.257463|13\"\n      }, {\n        n: \"肇庆\",\n        g: \"112.479653,23.078663|13\"\n      }, {\n        n: \"中山\",\n        g: \"113.42206,22.545178|12\"\n      }, {\n        n: \"珠海\",\n        g: \"113.562447,22.256915|13\"\n      }]\n    }, {\n      n: \"广西\",\n      g: \"108.924274,23.552255|7\",\n      cities: [{\n        n: \"南宁\",\n        g: \"108.297234,22.806493|12\"\n      }, {\n        n: \"百色\",\n        g: \"106.631821,23.901512|13\"\n      }, {\n        n: \"北海\",\n        g: \"109.122628,21.472718|13\"\n      }, {\n        n: \"崇左\",\n        g: \"107.357322,22.415455|14\"\n      }, {\n        n: \"防城港\",\n        g: \"108.351791,21.617398|15\"\n      }, {\n        n: \"桂林\",\n        g: \"110.26092,25.262901|12\"\n      }, {\n        n: \"贵港\",\n        g: \"109.613708,23.103373|13\"\n      }, {\n        n: \"河池\",\n        g: \"108.069948,24.699521|14\"\n      }, {\n        n: \"贺州\",\n        g: \"111.552594,24.411054|14\"\n      }, {\n        n: \"来宾\",\n        g: \"109.231817,23.741166|14\"\n      }, {\n        n: \"柳州\",\n        g: \"109.422402,24.329053|12\"\n      }, {\n        n: \"钦州\",\n        g: \"108.638798,21.97335|13\"\n      }, {\n        n: \"梧州\",\n        g: \"111.305472,23.485395|13\"\n      }, {\n        n: \"玉林\",\n        g: \"110.151676,22.643974|14\"\n      }]\n    }, {\n      n: \"贵州\",\n      g: \"106.734996,26.902826|8\",\n      cities: [{\n        n: \"贵阳\",\n        g: \"106.709177,26.629907|12\"\n      }, {\n        n: \"安顺\",\n        g: \"105.92827,26.228595|13\"\n      }, {\n        n: \"毕节地区\",\n        g: \"105.300492,27.302612|14\"\n      }, {\n        n: \"六盘水\",\n        g: \"104.852087,26.591866|13\"\n      }, {\n        n: \"铜仁地区\",\n        g: \"109.196161,27.726271|14\"\n      }, {\n        n: \"遵义\",\n        g: \"106.93126,27.699961|13\"\n      }, {\n        n: \"黔西南州\",\n        g: \"104.900558,25.095148|11\"\n      }, {\n        n: \"黔东南州\",\n        g: \"107.985353,26.583992|11\"\n      }, {\n        n: \"黔南州\",\n        g: \"107.523205,26.264536|11\"\n      }]\n    }, {\n      n: \"海南\",\n      g: \"109.733755,19.180501|9\",\n      cities: [{\n        n: \"海口\",\n        g: \"110.330802,20.022071|13\"\n      }, {\n        n: \"白沙\",\n        g: \"109.358586,19.216056|12\"\n      }, {\n        n: \"保亭\",\n        g: \"109.656113,18.597592|12\"\n      }, {\n        n: \"昌江\",\n        g: \"109.0113,19.222483|12\"\n      }, {\n        n: \"儋州\",\n        g: \"109.413973,19.571153|13\"\n      }, {\n        n: \"澄迈\",\n        g: \"109.996736,19.693135|13\"\n      }, {\n        n: \"东方\",\n        g: \"108.85101,18.998161|13\"\n      }, {\n        n: \"定安\",\n        g: \"110.32009,19.490991|13\"\n      }, {\n        n: \"琼海\",\n        g: \"110.414359,19.21483|13\"\n      }, {\n        n: \"琼中\",\n        g: \"109.861849,19.039771|12\"\n      }, {\n        n: \"乐东\",\n        g: \"109.062698,18.658614|12\"\n      }, {\n        n: \"临高\",\n        g: \"109.724101,19.805922|13\"\n      }, {\n        n: \"陵水\",\n        g: \"109.948661,18.575985|12\"\n      }, {\n        n: \"三亚\",\n        g: \"109.522771,18.257776|12\"\n      }, {\n        n: \"屯昌\",\n        g: \"110.063364,19.347749|13\"\n      }, {\n        n: \"万宁\",\n        g: \"110.292505,18.839886|13\"\n      }, {\n        n: \"文昌\",\n        g: \"110.780909,19.750947|13\"\n      }, {\n        n: \"五指山\",\n        g: \"109.51775,18.831306|13\"\n      }]\n    }, {\n      n: \"河北\",\n      g: \"115.661434,38.61384|7\",\n      cities: [{\n        n: \"石家庄\",\n        g: \"114.522082,38.048958|12\"\n      }, {\n        n: \"保定\",\n        g: \"115.49481,38.886565|13\"\n      }, {\n        n: \"沧州\",\n        g: \"116.863806,38.297615|13\"\n      }, {\n        n: \"承德\",\n        g: \"117.933822,40.992521|14\"\n      }, {\n        n: \"邯郸\",\n        g: \"114.482694,36.609308|13\"\n      }, {\n        n: \"衡水\",\n        g: \"115.686229,37.746929|13\"\n      }, {\n        n: \"廊坊\",\n        g: \"116.703602,39.518611|13\"\n      }, {\n        n: \"秦皇岛\",\n        g: \"119.604368,39.945462|12\"\n      }, {\n        n: \"唐山\",\n        g: \"118.183451,39.650531|13\"\n      }, {\n        n: \"邢台\",\n        g: \"114.520487,37.069531|13\"\n      }, {\n        n: \"张家口\",\n        g: \"114.893782,40.811188|13\"\n      }]\n    }, {\n      n: \"河南\",\n      g: \"113.486804,34.157184|7\",\n      cities: [{\n        n: \"郑州\",\n        g: \"113.649644,34.75661|12\"\n      }, {\n        n: \"安阳\",\n        g: \"114.351807,36.110267|12\"\n      }, {\n        n: \"鹤壁\",\n        g: \"114.29777,35.755426|13\"\n      }, {\n        n: \"焦作\",\n        g: \"113.211836,35.234608|13\"\n      }, {\n        n: \"开封\",\n        g: \"114.351642,34.801854|13\"\n      }, {\n        n: \"洛阳\",\n        g: \"112.447525,34.657368|12\"\n      }, {\n        n: \"漯河\",\n        g: \"114.046061,33.576279|13\"\n      }, {\n        n: \"南阳\",\n        g: \"112.542842,33.01142|13\"\n      }, {\n        n: \"平顶山\",\n        g: \"113.300849,33.745301|13\"\n      }, {\n        n: \"濮阳\",\n        g: \"115.026627,35.753298|12\"\n      }, {\n        n: \"三门峡\",\n        g: \"111.181262,34.78332|13\"\n      }, {\n        n: \"商丘\",\n        g: \"115.641886,34.438589|13\"\n      }, {\n        n: \"新乡\",\n        g: \"113.91269,35.307258|13\"\n      }, {\n        n: \"信阳\",\n        g: \"114.085491,32.128582|13\"\n      }, {\n        n: \"许昌\",\n        g: \"113.835312,34.02674|13\"\n      }, {\n        n: \"周口\",\n        g: \"114.654102,33.623741|13\"\n      }, {\n        n: \"驻马店\",\n        g: \"114.049154,32.983158|13\"\n      }]\n    }, {\n      n: \"黑龙江\",\n      g: \"128.047414,47.356592|6\",\n      cities: [{\n        n: \"哈尔滨\",\n        g: \"126.657717,45.773225|12\"\n      }, {\n        n: \"大庆\",\n        g: \"125.02184,46.596709|12\"\n      }, {\n        n: \"大兴安岭地区\",\n        g: \"124.196104,51.991789|10\"\n      }, {\n        n: \"鹤岗\",\n        g: \"130.292472,47.338666|13\"\n      }, {\n        n: \"黑河\",\n        g: \"127.50083,50.25069|14\"\n      }, {\n        n: \"鸡西\",\n        g: \"130.941767,45.32154|13\"\n      }, {\n        n: \"佳木斯\",\n        g: \"130.284735,46.81378|12\"\n      }, {\n        n: \"牡丹江\",\n        g: \"129.608035,44.588521|13\"\n      }, {\n        n: \"七台河\",\n        g: \"131.019048,45.775005|14\"\n      }, {\n        n: \"齐齐哈尔\",\n        g: \"123.987289,47.3477|13\"\n      }, {\n        n: \"双鸭山\",\n        g: \"131.171402,46.655102|13\"\n      }, {\n        n: \"绥化\",\n        g: \"126.989095,46.646064|13\"\n      }, {\n        n: \"伊春\",\n        g: \"128.910766,47.734685|14\"\n      }]\n    }, {\n      n: \"湖北\",\n      g: \"112.410562,31.209316|8\",\n      cities: [{\n        n: \"武汉\",\n        g: \"114.3162,30.581084|12\"\n      }, {\n        n: \"鄂州\",\n        g: \"114.895594,30.384439|14\"\n      }, {\n        n: \"恩施\",\n        g: \"109.517433,30.308978|14\"\n      }, {\n        n: \"黄冈\",\n        g: \"114.906618,30.446109|14\"\n      }, {\n        n: \"黄石\",\n        g: \"115.050683,30.216127|13\"\n      }, {\n        n: \"荆门\",\n        g: \"112.21733,31.042611|13\"\n      }, {\n        n: \"荆州\",\n        g: \"112.241866,30.332591|12\"\n      }, {\n        n: \"潜江\",\n        g: \"112.768768,30.343116|13\"\n      }, {\n        n: \"神农架林区\",\n        g: \"110.487231,31.595768|13\"\n      }, {\n        n: \"十堰\",\n        g: \"110.801229,32.636994|13\"\n      }, {\n        n: \"随州\",\n        g: \"113.379358,31.717858|13\"\n      }, {\n        n: \"天门\",\n        g: \"113.12623,30.649047|13\"\n      }, {\n        n: \"仙桃\",\n        g: \"113.387448,30.293966|13\"\n      }, {\n        n: \"咸宁\",\n        g: \"114.300061,29.880657|13\"\n      }, {\n        n: \"襄阳\",\n        g: \"112.176326,32.094934|12\"\n      }, {\n        n: \"孝感\",\n        g: \"113.935734,30.927955|13\"\n      }, {\n        n: \"宜昌\",\n        g: \"111.310981,30.732758|13\"\n      }]\n    }, {\n      n: \"湖南\",\n      g: \"111.720664,27.695864|7\",\n      cities: [{\n        n: \"长沙\",\n        g: \"112.979353,28.213478|12\"\n      }, {\n        n: \"常德\",\n        g: \"111.653718,29.012149|12\"\n      }, {\n        n: \"郴州\",\n        g: \"113.037704,25.782264|13\"\n      }, {\n        n: \"衡阳\",\n        g: \"112.583819,26.898164|13\"\n      }, {\n        n: \"怀化\",\n        g: \"109.986959,27.557483|13\"\n      }, {\n        n: \"娄底\",\n        g: \"111.996396,27.741073|13\"\n      }, {\n        n: \"邵阳\",\n        g: \"111.461525,27.236811|13\"\n      }, {\n        n: \"湘潭\",\n        g: \"112.935556,27.835095|13\"\n      }, {\n        n: \"湘西州\",\n        g: \"109.745746,28.317951|14\"\n      }, {\n        n: \"益阳\",\n        g: \"112.366547,28.588088|13\"\n      }, {\n        n: \"永州\",\n        g: \"111.614648,26.435972|13\"\n      }, {\n        n: \"岳阳\",\n        g: \"113.146196,29.378007|13\"\n      }, {\n        n: \"张家界\",\n        g: \"110.48162,29.124889|13\"\n      }, {\n        n: \"株洲\",\n        g: \"113.131695,27.827433|13\"\n      }]\n    }, {\n      n: \"江苏\",\n      g: \"119.368489,33.013797|8\",\n      cities: [{\n        n: \"南京\",\n        g: \"118.778074,32.057236|12\"\n      }, {\n        n: \"常州\",\n        g: \"119.981861,31.771397|12\"\n      }, {\n        n: \"淮安\",\n        g: \"119.030186,33.606513|12\"\n      }, {\n        n: \"连云港\",\n        g: \"119.173872,34.601549|12\"\n      }, {\n        n: \"南通\",\n        g: \"120.873801,32.014665|12\"\n      }, {\n        n: \"苏州\",\n        g: \"120.619907,31.317987|12\"\n      }, {\n        n: \"宿迁\",\n        g: \"118.296893,33.95205|13\"\n      }, {\n        n: \"泰州\",\n        g: \"119.919606,32.476053|13\"\n      }, {\n        n: \"无锡\",\n        g: \"120.305456,31.570037|12\"\n      }, {\n        n: \"徐州\",\n        g: \"117.188107,34.271553|12\"\n      }, {\n        n: \"盐城\",\n        g: \"120.148872,33.379862|12\"\n      }, {\n        n: \"扬州\",\n        g: \"119.427778,32.408505|13\"\n      }, {\n        n: \"镇江\",\n        g: \"119.455835,32.204409|13\"\n      }]\n    }, {\n      n: \"江西\",\n      g: \"115.676082,27.757258|7\",\n      cities: [{\n        n: \"南昌\",\n        g: \"115.893528,28.689578|12\"\n      }, {\n        n: \"抚州\",\n        g: \"116.360919,27.954545|13\"\n      }, {\n        n: \"赣州\",\n        g: \"114.935909,25.845296|13\"\n      }, {\n        n: \"吉安\",\n        g: \"114.992039,27.113848|13\"\n      }, {\n        n: \"景德镇\",\n        g: \"117.186523,29.303563|12\"\n      }, {\n        n: \"九江\",\n        g: \"115.999848,29.71964|13\"\n      }, {\n        n: \"萍乡\",\n        g: \"113.859917,27.639544|13\"\n      }, {\n        n: \"上饶\",\n        g: \"117.955464,28.457623|13\"\n      }, {\n        n: \"新余\",\n        g: \"114.947117,27.822322|13\"\n      }, {\n        n: \"宜春\",\n        g: \"114.400039,27.81113|13\"\n      }, {\n        n: \"鹰潭\",\n        g: \"117.03545,28.24131|13\"\n      }]\n    }, {\n      n: \"吉林\",\n      g: \"126.262876,43.678846|7\",\n      cities: [{\n        n: \"长春\",\n        g: \"125.313642,43.898338|12\"\n      }, {\n        n: \"白城\",\n        g: \"122.840777,45.621086|13\"\n      }, {\n        n: \"白山\",\n        g: \"126.435798,41.945859|13\"\n      }, {\n        n: \"吉林\",\n        g: \"126.564544,43.871988|12\"\n      }, {\n        n: \"辽源\",\n        g: \"125.133686,42.923303|13\"\n      }, {\n        n: \"四平\",\n        g: \"124.391382,43.175525|12\"\n      }, {\n        n: \"松原\",\n        g: \"124.832995,45.136049|13\"\n      }, {\n        n: \"通化\",\n        g: \"125.94265,41.736397|13\"\n      }, {\n        n: \"延边\",\n        g: \"129.485902,42.896414|13\"\n      }]\n    }, {\n      n: \"辽宁\",\n      g: \"122.753592,41.6216|8\",\n      cities: [{\n        n: \"沈阳\",\n        g: \"123.432791,41.808645|12\"\n      }, {\n        n: \"鞍山\",\n        g: \"123.007763,41.118744|13\"\n      }, {\n        n: \"本溪\",\n        g: \"123.778062,41.325838|12\"\n      }, {\n        n: \"朝阳\",\n        g: \"120.446163,41.571828|13\"\n      }, {\n        n: \"大连\",\n        g: \"121.593478,38.94871|12\"\n      }, {\n        n: \"丹东\",\n        g: \"124.338543,40.129023|12\"\n      }, {\n        n: \"抚顺\",\n        g: \"123.92982,41.877304|12\"\n      }, {\n        n: \"阜新\",\n        g: \"121.660822,42.01925|14\"\n      }, {\n        n: \"葫芦岛\",\n        g: \"120.860758,40.74303|13\"\n      }, {\n        n: \"锦州\",\n        g: \"121.147749,41.130879|13\"\n      }, {\n        n: \"辽阳\",\n        g: \"123.172451,41.273339|14\"\n      }, {\n        n: \"盘锦\",\n        g: \"122.073228,41.141248|13\"\n      }, {\n        n: \"铁岭\",\n        g: \"123.85485,42.299757|13\"\n      }, {\n        n: \"营口\",\n        g: \"122.233391,40.668651|13\"\n      }]\n    }, {\n      n: \"内蒙古\",\n      g: \"114.415868,43.468238|5\",\n      cities: [{\n        n: \"呼和浩特\",\n        g: \"111.660351,40.828319|12\"\n      }, {\n        n: \"阿拉善盟\",\n        g: \"105.695683,38.843075|14\"\n      }, {\n        n: \"包头\",\n        g: \"109.846239,40.647119|12\"\n      }, {\n        n: \"巴彦淖尔\",\n        g: \"107.423807,40.76918|12\"\n      }, {\n        n: \"赤峰\",\n        g: \"118.930761,42.297112|12\"\n      }, {\n        n: \"鄂尔多斯\",\n        g: \"109.993706,39.81649|12\"\n      }, {\n        n: \"呼伦贝尔\",\n        g: \"119.760822,49.201636|12\"\n      }, {\n        n: \"通辽\",\n        g: \"122.260363,43.633756|12\"\n      }, {\n        n: \"乌海\",\n        g: \"106.831999,39.683177|13\"\n      }, {\n        n: \"乌兰察布\",\n        g: \"113.112846,41.022363|12\"\n      }, {\n        n: \"锡林郭勒盟\",\n        g: \"116.02734,43.939705|11\"\n      }, {\n        n: \"兴安盟\",\n        g: \"122.048167,46.083757|11\"\n      }]\n    }, {\n      n: \"宁夏\",\n      g: \"106.155481,37.321323|8\",\n      cities: [{\n        n: \"银川\",\n        g: \"106.206479,38.502621|12\"\n      }, {\n        n: \"固原\",\n        g: \"106.285268,36.021523|13\"\n      }, {\n        n: \"石嘴山\",\n        g: \"106.379337,39.020223|13\"\n      }, {\n        n: \"吴忠\",\n        g: \"106.208254,37.993561|14\"\n      }, {\n        n: \"中卫\",\n        g: \"105.196754,37.521124|14\"\n      }]\n    }, {\n      n: \"青海\",\n      g: \"96.202544,35.499761|7\",\n      cities: [{\n        n: \"西宁\",\n        g: \"101.767921,36.640739|12\"\n      }, {\n        n: \"果洛州\",\n        g: \"100.223723,34.480485|11\"\n      }, {\n        n: \"海东地区\",\n        g: \"102.085207,36.51761|11\"\n      }, {\n        n: \"海北州\",\n        g: \"100.879802,36.960654|11\"\n      }, {\n        n: \"海南州\",\n        g: \"100.624066,36.284364|11\"\n      }, {\n        n: \"海西州\",\n        g: \"97.342625,37.373799|11\"\n      }, {\n        n: \"黄南州\",\n        g: \"102.0076,35.522852|11\"\n      }, {\n        n: \"玉树州\",\n        g: \"97.013316,33.00624|14\"\n      }]\n    }, {\n      n: \"山东\",\n      g: \"118.527663,36.09929|8\",\n      cities: [{\n        n: \"济南\",\n        g: \"117.024967,36.682785|12\"\n      }, {\n        n: \"滨州\",\n        g: \"117.968292,37.405314|12\"\n      }, {\n        n: \"东营\",\n        g: \"118.583926,37.487121|12\"\n      }, {\n        n: \"德州\",\n        g: \"116.328161,37.460826|12\"\n      }, {\n        n: \"菏泽\",\n        g: \"115.46336,35.26244|13\"\n      }, {\n        n: \"济宁\",\n        g: \"116.600798,35.402122|13\"\n      }, {\n        n: \"莱芜\",\n        g: \"117.684667,36.233654|13\"\n      }, {\n        n: \"聊城\",\n        g: \"115.986869,36.455829|12\"\n      }, {\n        n: \"临沂\",\n        g: \"118.340768,35.072409|12\"\n      }, {\n        n: \"青岛\",\n        g: \"120.384428,36.105215|12\"\n      }, {\n        n: \"日照\",\n        g: \"119.50718,35.420225|12\"\n      }, {\n        n: \"泰安\",\n        g: \"117.089415,36.188078|13\"\n      }, {\n        n: \"威海\",\n        g: \"122.093958,37.528787|13\"\n      }, {\n        n: \"潍坊\",\n        g: \"119.142634,36.716115|12\"\n      }, {\n        n: \"烟台\",\n        g: \"121.309555,37.536562|12\"\n      }, {\n        n: \"枣庄\",\n        g: \"117.279305,34.807883|13\"\n      }, {\n        n: \"淄博\",\n        g: \"118.059134,36.804685|12\"\n      }]\n    }, {\n      n: \"山西\",\n      g: \"112.515496,37.866566|7\",\n      cities: [{\n        n: \"太原\",\n        g: \"112.550864,37.890277|12\"\n      }, {\n        n: \"长治\",\n        g: \"113.120292,36.201664|12\"\n      }, {\n        n: \"大同\",\n        g: \"113.290509,40.113744|12\"\n      }, {\n        n: \"晋城\",\n        g: \"112.867333,35.499834|13\"\n      }, {\n        n: \"晋中\",\n        g: \"112.738514,37.693362|13\"\n      }, {\n        n: \"临汾\",\n        g: \"111.538788,36.099745|13\"\n      }, {\n        n: \"吕梁\",\n        g: \"111.143157,37.527316|14\"\n      }, {\n        n: \"朔州\",\n        g: \"112.479928,39.337672|13\"\n      }, {\n        n: \"忻州\",\n        g: \"112.727939,38.461031|12\"\n      }, {\n        n: \"阳泉\",\n        g: \"113.569238,37.869529|13\"\n      }, {\n        n: \"运城\",\n        g: \"111.006854,35.038859|13\"\n      }]\n    }, {\n      n: \"陕西\",\n      g: \"109.503789,35.860026|7\",\n      cities: [{\n        n: \"西安\",\n        g: \"108.953098,34.2778|12\"\n      }, {\n        n: \"安康\",\n        g: \"109.038045,32.70437|13\"\n      }, {\n        n: \"宝鸡\",\n        g: \"107.170645,34.364081|12\"\n      }, {\n        n: \"汉中\",\n        g: \"107.045478,33.081569|13\"\n      }, {\n        n: \"商洛\",\n        g: \"109.934208,33.873907|13\"\n      }, {\n        n: \"铜川\",\n        g: \"108.968067,34.908368|13\"\n      }, {\n        n: \"渭南\",\n        g: \"109.483933,34.502358|13\"\n      }, {\n        n: \"咸阳\",\n        g: \"108.707509,34.345373|13\"\n      }, {\n        n: \"延安\",\n        g: \"109.50051,36.60332|13\"\n      }, {\n        n: \"榆林\",\n        g: \"109.745926,38.279439|12\"\n      }]\n    }, {\n      n: \"四川\",\n      g: \"102.89916,30.367481|7\",\n      cities: [{\n        n: \"成都\",\n        g: \"104.067923,30.679943|12\"\n      }, {\n        n: \"阿坝州\",\n        g: \"102.228565,31.905763|15\"\n      }, {\n        n: \"巴中\",\n        g: \"106.757916,31.869189|14\"\n      }, {\n        n: \"达州\",\n        g: \"107.494973,31.214199|14\"\n      }, {\n        n: \"德阳\",\n        g: \"104.402398,31.13114|13\"\n      }, {\n        n: \"甘孜州\",\n        g: \"101.969232,30.055144|15\"\n      }, {\n        n: \"广安\",\n        g: \"106.63572,30.463984|13\"\n      }, {\n        n: \"广元\",\n        g: \"105.819687,32.44104|13\"\n      }, {\n        n: \"乐山\",\n        g: \"103.760824,29.600958|13\"\n      }, {\n        n: \"凉山州\",\n        g: \"102.259591,27.892393|14\"\n      }, {\n        n: \"泸州\",\n        g: \"105.44397,28.89593|14\"\n      }, {\n        n: \"南充\",\n        g: \"106.105554,30.800965|13\"\n      }, {\n        n: \"眉山\",\n        g: \"103.84143,30.061115|13\"\n      }, {\n        n: \"绵阳\",\n        g: \"104.705519,31.504701|12\"\n      }, {\n        n: \"内江\",\n        g: \"105.073056,29.599462|13\"\n      }, {\n        n: \"攀枝花\",\n        g: \"101.722423,26.587571|14\"\n      }, {\n        n: \"遂宁\",\n        g: \"105.564888,30.557491|12\"\n      }, {\n        n: \"雅安\",\n        g: \"103.009356,29.999716|13\"\n      }, {\n        n: \"宜宾\",\n        g: \"104.633019,28.769675|13\"\n      }, {\n        n: \"资阳\",\n        g: \"104.63593,30.132191|13\"\n      }, {\n        n: \"自贡\",\n        g: \"104.776071,29.359157|13\"\n      }]\n    }, {\n      n: \"西藏\",\n      g: \"89.137982,31.367315|6\",\n      cities: [{\n        n: \"拉萨\",\n        g: \"91.111891,29.662557|13\"\n      }, {\n        n: \"阿里地区\",\n        g: \"81.107669,30.404557|11\"\n      }, {\n        n: \"昌都地区\",\n        g: \"97.185582,31.140576|15\"\n      }, {\n        n: \"林芝地区\",\n        g: \"94.349985,29.666941|11\"\n      }, {\n        n: \"那曲地区\",\n        g: \"92.067018,31.48068|14\"\n      }, {\n        n: \"日喀则地区\",\n        g: \"88.891486,29.269023|14\"\n      }, {\n        n: \"山南地区\",\n        g: \"91.750644,29.229027|11\"\n      }]\n    }, {\n      n: \"新疆\",\n      g: \"85.614899,42.127001|6\",\n      cities: [{\n        n: \"乌鲁木齐\",\n        g: \"87.564988,43.84038|12\"\n      }, {\n        n: \"阿拉尔\",\n        g: \"81.291737,40.61568|13\"\n      }, {\n        n: \"阿克苏地区\",\n        g: \"80.269846,41.171731|12\"\n      }, {\n        n: \"阿勒泰地区\",\n        g: \"88.137915,47.839744|13\"\n      }, {\n        n: \"巴音郭楞\",\n        g: \"86.121688,41.771362|12\"\n      }, {\n        n: \"博尔塔拉州\",\n        g: \"82.052436,44.913651|11\"\n      }, {\n        n: \"昌吉州\",\n        g: \"87.296038,44.007058|13\"\n      }, {\n        n: \"哈密地区\",\n        g: \"93.528355,42.858596|13\"\n      }, {\n        n: \"和田地区\",\n        g: \"79.930239,37.116774|13\"\n      }, {\n        n: \"喀什地区\",\n        g: \"75.992973,39.470627|12\"\n      }, {\n        n: \"克拉玛依\",\n        g: \"84.88118,45.594331|13\"\n      }, {\n        n: \"克孜勒苏州\",\n        g: \"76.137564,39.750346|11\"\n      }, {\n        n: \"石河子\",\n        g: \"86.041865,44.308259|13\"\n      }, {\n        n: \"塔城地区\",\n        g: \"82.974881,46.758684|12\"\n      }, {\n        n: \"图木舒克\",\n        g: \"79.198155,39.889223|13\"\n      }, {\n        n: \"吐鲁番地区\",\n        g: \"89.181595,42.96047|13\"\n      }, {\n        n: \"五家渠\",\n        g: \"87.565449,44.368899|13\"\n      }, {\n        n: \"伊犁州\",\n        g: \"81.297854,43.922248|11\"\n      }]\n    }, {\n      n: \"云南\",\n      g: \"101.592952,24.864213|7\",\n      cities: [{\n        n: \"昆明\",\n        g: \"102.714601,25.049153|12\"\n      }, {\n        n: \"保山\",\n        g: \"99.177996,25.120489|13\"\n      }, {\n        n: \"楚雄州\",\n        g: \"101.529382,25.066356|13\"\n      }, {\n        n: \"大理州\",\n        g: \"100.223675,25.5969|14\"\n      }, {\n        n: \"德宏州\",\n        g: \"98.589434,24.44124|14\"\n      }, {\n        n: \"迪庆州\",\n        g: \"99.713682,27.831029|14\"\n      }, {\n        n: \"红河州\",\n        g: \"103.384065,23.367718|11\"\n      }, {\n        n: \"丽江\",\n        g: \"100.229628,26.875351|13\"\n      }, {\n        n: \"临沧\",\n        g: \"100.092613,23.887806|14\"\n      }, {\n        n: \"怒江州\",\n        g: \"98.859932,25.860677|14\"\n      }, {\n        n: \"普洱\",\n        g: \"100.980058,22.788778|14\"\n      }, {\n        n: \"曲靖\",\n        g: \"103.782539,25.520758|12\"\n      }, {\n        n: \"昭通\",\n        g: \"103.725021,27.340633|13\"\n      }, {\n        n: \"文山\",\n        g: \"104.089112,23.401781|14\"\n      }, {\n        n: \"西双版纳\",\n        g: \"100.803038,22.009433|13\"\n      }, {\n        n: \"玉溪\",\n        g: \"102.545068,24.370447|13\"\n      }]\n    }, {\n      n: \"浙江\",\n      g: \"119.957202,29.159494|8\",\n      cities: [{\n        n: \"杭州\",\n        g: \"120.219375,30.259244|12\"\n      }, {\n        n: \"湖州\",\n        g: \"120.137243,30.877925|12\"\n      }, {\n        n: \"嘉兴\",\n        g: \"120.760428,30.773992|13\"\n      }, {\n        n: \"金华\",\n        g: \"119.652576,29.102899|12\"\n      }, {\n        n: \"丽水\",\n        g: \"119.929576,28.4563|13\"\n      }, {\n        n: \"宁波\",\n        g: \"121.579006,29.885259|12\"\n      }, {\n        n: \"衢州\",\n        g: \"118.875842,28.95691|12\"\n      }, {\n        n: \"绍兴\",\n        g: \"120.592467,30.002365|13\"\n      }, {\n        n: \"台州\",\n        g: \"121.440613,28.668283|13\"\n      }, {\n        n: \"温州\",\n        g: \"120.690635,28.002838|12\"\n      }, {\n        n: \"舟山\",\n        g: \"122.169872,30.03601|13\"\n      }]\n    }],\n    other: [{\n      n: \"香港\",\n      g: \"114.186124,22.293586|11\"\n    }, {\n      n: \"澳门\",\n      g: \"113.557519,22.204118|13\"\n    }, {\n      n: \"台湾\",\n      g: \"120.961454,23.80406|8\"\n    }]\n  };\n\n  function getCenter(g) {\n    var item = g.split(\"|\");\n    item[0] = item[0].split(\",\");\n    return {\n      lng: parseFloat(item[0][0]),\n      lat: parseFloat(item[0][1])\n    };\n  }\n\n  var cityCenter = {\n    getProvinceNameByCityName: function getProvinceNameByCityName(name) {\n      var provinces = citycenter.provinces;\n\n      for (var i = 0; i < provinces.length; i++) {\n        var provinceName = provinces[i].n;\n        var cities = provinces[i].cities;\n\n        for (var j = 0; j < cities.length; j++) {\n          if (cities[j].n == name) {\n            return provinceName;\n          }\n        }\n      }\n\n      return null;\n    },\n    getCenterByCityName: function getCenterByCityName(name) {\n      name = name.replace('市', '');\n\n      for (var i = 0; i < citycenter.municipalities.length; i++) {\n        if (citycenter.municipalities[i].n == name) {\n          return getCenter(citycenter.municipalities[i].g);\n        }\n      }\n\n      for (var i = 0; i < citycenter.other.length; i++) {\n        if (citycenter.other[i].n == name) {\n          return getCenter(citycenter.other[i].g);\n        }\n      }\n\n      var provinces = citycenter.provinces;\n\n      for (var i = 0; i < provinces.length; i++) {\n        if (provinces[i].n == name) {\n          return getCenter(provinces[i].g);\n        }\n\n        var cities = provinces[i].cities;\n\n        for (var j = 0; j < cities.length; j++) {\n          if (cities[j].n == name) {\n            return getCenter(cities[j].g);\n          }\n        }\n      }\n\n      return null;\n    }\n  };\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  };\n\n  var inherits = function inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  /**\n   * DataSet\n   *\n   * A data set can:\n   * - add/remove/update data\n   * - gives triggers upon changes in the data\n   * - can  import/export data in various data formats\n   * @param {Array} [data]    Optional array with initial data\n   * the field geometry is like geojson, it can be:\n   * {\n   *     \"type\": \"Point\",\n   *     \"coordinates\": [125.6, 10.1]\n   * }\n   * {\n   *     \"type\": \"LineString\",\n   *     \"coordinates\": [\n   *         [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]\n   *     ]\n   * }\n   * {\n   *     \"type\": \"Polygon\",\n   *     \"coordinates\": [\n   *         [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n   *           [100.0, 1.0], [100.0, 0.0] ]\n   *     ]\n   * }\n   * @param {Object} [options]   Available options:\n   * \n   */\n\n\n  function DataSet(data, options) {\n    Event.bind(this)();\n    this._options = options || {};\n    this._data = []; // map with data indexed by id\n    // add initial data when provided\n\n    if (data) {\n      this.add(data);\n    }\n  }\n\n  DataSet.prototype = Event.prototype;\n  /**\n   * Add data.\n   */\n\n  DataSet.prototype.add = function (data, senderId) {\n    if (Array.isArray(data)) {\n      // Array\n      for (var i = 0, len = data.length; i < len; i++) {\n        if (data[i].time && data[i].time.length == 14 && data[i].time.substr(0, 2) == '20') {\n          var time = data[i].time;\n          data[i].time = new Date(time.substr(0, 4) + '-' + time.substr(4, 2) + '-' + time.substr(6, 2) + ' ' + time.substr(8, 2) + ':' + time.substr(10, 2) + ':' + time.substr(12, 2)).getTime();\n        }\n\n        this._data.push(data[i]);\n      }\n    } else if (data instanceof Object) {\n      // Single item\n      this._data.push(data);\n    } else {\n      throw new Error('Unknown dataType');\n    }\n\n    this._dataCache = JSON.parse(JSON.stringify(this._data));\n  };\n\n  DataSet.prototype.reset = function () {\n    this._data = JSON.parse(JSON.stringify(this._dataCache));\n  };\n  /**\n   * get data.\n   */\n\n\n  DataSet.prototype.get = function (args) {\n    args = args || {}; //console.time('copy data time')\n\n    var start = new Date(); // TODO: 不修改原始数据，在数据上挂载新的名称，每次修改数据直接修改新名称下的数据，可以省去deepCopy\n    // var data = deepCopy(this._data);\n\n    var data = this._data;\n    var start = new Date();\n\n    if (args.filter) {\n      var newData = [];\n\n      for (var i = 0; i < data.length; i++) {\n        if (args.filter(data[i])) {\n          newData.push(data[i]);\n        }\n      }\n\n      data = newData;\n    }\n\n    if (args.transferCoordinate) {\n      data = this.transferCoordinate(data, args.transferCoordinate, args.fromColumn, args.toColumn);\n    } // console.timeEnd('transferCoordinate time')\n\n\n    return data;\n  };\n  /**\n   * set data.\n   */\n\n\n  DataSet.prototype.set = function (data) {\n    this._set(data);\n\n    this._trigger('change');\n  };\n  /**\n   * set data.\n   */\n\n\n  DataSet.prototype._set = function (data) {\n    this.clear();\n    this.add(data);\n  };\n  /**\n   * clear data.\n   */\n\n\n  DataSet.prototype.clear = function (args) {\n    this._data = []; // map with data indexed by id\n  };\n  /**\n   * remove data.\n   */\n\n\n  DataSet.prototype.remove = function (args) {};\n  /**\n   * update data.\n   */\n\n\n  DataSet.prototype.update = function (cbk, condition) {\n    var data = this._data;\n    var item = null;\n\n    for (var i = 0; i < data.length; i++) {\n      if (condition) {\n        var flag = true;\n\n        for (var key in condition) {\n          if (data[i][key] != condition[key]) {\n            flag = false;\n          }\n        }\n\n        if (flag) {\n          cbk && cbk(data[i]);\n        }\n      } else {\n        cbk && cbk(data[i]);\n      }\n    }\n\n    this._dataCache = JSON.parse(JSON.stringify(this._data));\n\n    this._trigger('change');\n  };\n  /**\n   * transfer coordinate.\n   */\n\n\n  DataSet.prototype.transferCoordinate = function (data, transferFn, fromColumn, toColumnName) {\n    toColumnName = toColumnName || '_coordinates';\n    fromColumn = fromColumn || 'coordinates';\n\n    for (var i = 0; i < data.length; i++) {\n      var geometry = data[i].geometry;\n      var coordinates = geometry[fromColumn];\n\n      switch (geometry.type) {\n        case 'Point':\n          geometry[toColumnName] = transferFn(coordinates);\n          break;\n\n        case 'LineString':\n          var newCoordinates = [];\n\n          for (var j = 0; j < coordinates.length; j++) {\n            newCoordinates.push(transferFn(coordinates[j]));\n          }\n\n          geometry[toColumnName] = newCoordinates;\n          break;\n\n        case 'MultiLineString':\n        case 'Polygon':\n          var newCoordinates = getPolygon(coordinates);\n          geometry[toColumnName] = newCoordinates;\n          break;\n\n        case 'MultiPolygon':\n          var newCoordinates = [];\n\n          for (var c = 0; c < coordinates.length; c++) {\n            var polygon = coordinates[c];\n            var polygon = getPolygon(polygon);\n            newCoordinates.push(polygon);\n          }\n\n          geometry[toColumnName] = newCoordinates;\n          break;\n      }\n    }\n\n    function getPolygon(coordinates) {\n      var newCoordinates = [];\n\n      for (var c = 0; c < coordinates.length; c++) {\n        var coordinate = coordinates[c];\n        var newcoordinate = [];\n\n        for (var j = 0; j < coordinate.length; j++) {\n          newcoordinate.push(transferFn(coordinate[j]));\n        }\n\n        newCoordinates.push(newcoordinate);\n      }\n\n      return newCoordinates;\n    }\n\n    return data;\n  };\n\n  DataSet.prototype.initGeometry = function (transferFn) {\n    if (transferFn) {\n      this._data.forEach(function (item) {\n        item.geometry = transferFn(item);\n      });\n    } else {\n      this._data.forEach(function (item) {\n        if (!item.geometry) {\n          if (item.lng && item.lat) {\n            item.geometry = {\n              type: 'Point',\n              coordinates: [item.lng, item.lat]\n            };\n          } else if (item.city) {\n            var center = cityCenter.getCenterByCityName(item.city);\n\n            if (center) {\n              item.geometry = {\n                type: 'Point',\n                coordinates: [center.lng, center.lat]\n              };\n            }\n          }\n        }\n      });\n    }\n  };\n  /**\n   * 获取当前列的最大值\n   */\n\n\n  DataSet.prototype.getMax = function (columnName) {\n    var data = this._data;\n\n    if (!data || data.length <= 0) {\n      return;\n    }\n\n    var max = parseFloat(data[0][columnName]);\n\n    for (var i = 1; i < data.length; i++) {\n      var value = parseFloat(data[i][columnName]);\n\n      if (value > max) {\n        max = value;\n      }\n    }\n\n    return max;\n  };\n  /**\n   * 获取当前列的总和\n   */\n\n\n  DataSet.prototype.getSum = function (columnName) {\n    var data = this._data;\n\n    if (!data || data.length <= 0) {\n      return;\n    }\n\n    var sum = 0;\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i][columnName]) {\n        sum += parseFloat(data[i][columnName]);\n      }\n    }\n\n    return sum;\n  };\n  /**\n   * 获取当前列的最小值\n   */\n\n\n  DataSet.prototype.getMin = function (columnName) {\n    var data = this._data;\n\n    if (!data || data.length <= 0) {\n      return;\n    }\n\n    var min = parseFloat(data[0][columnName]);\n\n    for (var i = 1; i < data.length; i++) {\n      var value = parseFloat(data[i][columnName]);\n\n      if (value < min) {\n        min = value;\n      }\n    }\n\n    return min;\n  };\n  /**\n   * 获取去重的数据\n   */\n\n\n  DataSet.prototype.getUnique = function (columnName) {\n    var data = this._data;\n\n    if (!data || data.length <= 0) {\n      return;\n    }\n\n    var maps = {};\n\n    for (var i = 1; i < data.length; i++) {\n      maps[data[i][columnName]] = true;\n    }\n\n    var data = [];\n\n    for (var key in maps) {\n      data.push(key);\n    }\n\n    return data;\n  };\n\n  function hex_corner(center, size, i) {\n    var angle_deg = 60 * i + 30;\n    var angle_rad = Math.PI / 180 * angle_deg;\n    return [center.x + size * Math.cos(angle_rad), center.y + size * Math.sin(angle_rad)];\n  }\n\n  function draw(context, x, y, size) {\n    for (var j = 0; j < 6; j++) {\n      var result = hex_corner({\n        x: x,\n        y: y\n      }, size, j);\n      context.lineTo(result[0], result[1]);\n    }\n  }\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var pathSimple = {\n    drawDataSet: function drawDataSet(context, dataSet, options) {\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n\n      for (var i = 0, len = data.length; i < len; i++) {\n        var item = data[i];\n        this.draw(context, item, options);\n      }\n    },\n    draw: function draw$$1(context, data, options) {\n      var type = data.geometry.type;\n      var coordinates = data.geometry._coordinates || data.geometry.coordinates;\n      var symbol = options.symbol || 'circle';\n\n      switch (type) {\n        case 'Point':\n          var size = data._size || data.size || options._size || options.size || 5;\n\n          if (symbol === 'circle') {\n            if (options.bigData === 'Point') {\n              context.moveTo(coordinates[0], coordinates[1]);\n            }\n\n            context.arc(coordinates[0], coordinates[1], size, 0, Math.PI * 2);\n          } else if (symbol === 'rect') {\n            context.rect(coordinates[0] - size / 2, coordinates[1] - size / 2, size, size);\n          } else if (symbol === 'honeycomb') {\n            draw(context, coordinates[0], coordinates[1], size);\n          }\n\n          break;\n\n        case 'LineString':\n          this.drawLineString(context, coordinates);\n          break;\n\n        case 'MultiLineString':\n          for (var i = 0; i < coordinates.length; i++) {\n            var lineString = coordinates[i];\n            this.drawLineString(context, lineString);\n          }\n\n          break;\n\n        case 'Polygon':\n          this.drawPolygon(context, coordinates);\n          break;\n\n        case 'MultiPolygon':\n          for (var i = 0; i < coordinates.length; i++) {\n            var polygon = coordinates[i];\n            this.drawPolygon(context, polygon);\n\n            if (options.multiPolygonDraw) {\n              options.multiPolygonDraw();\n            }\n          }\n\n          break;\n\n        default:\n          console.error('type' + type + 'is not support now!');\n          break;\n      }\n    },\n    drawLineString: function drawLineString(context, coordinates) {\n      for (var j = 0; j < coordinates.length; j++) {\n        var x = coordinates[j][0];\n        var y = coordinates[j][1];\n\n        if (j == 0) {\n          context.moveTo(x, y);\n        } else {\n          context.lineTo(x, y);\n        }\n      }\n    },\n    drawPolygon: function drawPolygon(context, coordinates) {\n      context.beginPath();\n\n      for (var i = 0; i < coordinates.length; i++) {\n        var coordinate = coordinates[i];\n        context.moveTo(coordinate[0][0], coordinate[0][1]);\n\n        for (var j = 1; j < coordinate.length; j++) {\n          context.lineTo(coordinate[j][0], coordinate[j][1]);\n        }\n\n        context.lineTo(coordinate[0][0], coordinate[0][1]);\n        context.closePath();\n      }\n    }\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  var drawSimple = {\n    draw: function draw(context, dataSet, options) {\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet; // console.log('xxxx',options)\n\n      context.save();\n\n      for (var key in options) {\n        context[key] = options[key];\n      } // console.log(data);\n\n\n      if (options.bigData) {\n        context.save();\n        context.beginPath();\n\n        for (var i = 0, len = data.length; i < len; i++) {\n          var item = data[i];\n          pathSimple.draw(context, item, options);\n        }\n\n        var type = options.bigData;\n\n        if (type == 'Point' || type == 'Polygon' || type == 'MultiPolygon') {\n          context.fill();\n\n          if (context.lineDash) {\n            context.setLineDash(context.lineDash);\n          }\n\n          if (item.lineDash) {\n            context.setLineDash(item.lineDash);\n          }\n\n          if ((item.strokeStyle || options.strokeStyle) && options.lineWidth) {\n            context.stroke();\n          }\n        } else if (type == 'LineString' || type == 'MultiLineString') {\n          context.stroke();\n        }\n\n        context.restore();\n      } else {\n        for (var i = 0, len = data.length; i < len; i++) {\n          var item = data[i];\n          context.save();\n\n          if (item.fillStyle || item._fillStyle) {\n            context.fillStyle = item.fillStyle || item._fillStyle;\n          }\n\n          if (item.strokeStyle || item._strokeStyle) {\n            context.strokeStyle = item.strokeStyle || item._strokeStyle;\n          }\n\n          if (context.lineDash) {\n            context.setLineDash(context.lineDash);\n          }\n\n          if (item.lineDash) {\n            context.setLineDash(item.lineDash);\n          }\n\n          var type = item.geometry.type;\n          context.beginPath();\n          pathSimple.draw(context, item, options);\n\n          options.multiPolygonDraw = function () {\n            context.fill();\n\n            if ((item.strokeStyle || options.strokeStyle) && options.lineWidth) {\n              context.stroke();\n            }\n          };\n\n          if (type == 'Point' || type == 'Polygon' || type == 'MultiPolygon') {\n            context.fill();\n\n            if ((item.strokeStyle || options.strokeStyle) && options.lineWidth) {\n              context.stroke();\n            }\n          } else if (type == 'LineString' || type == 'MultiLineString') {\n            if (item.lineWidth || item._lineWidth) {\n              context.lineWidth = item.lineWidth || item._lineWidth;\n            }\n\n            context.stroke();\n          }\n\n          context.restore();\n        }\n      }\n\n      context.restore();\n    }\n  };\n\n  function Canvas(width, height) {\n    var canvas;\n\n    if (typeof document === 'undefined') {// var Canvas = require('canvas');\n      // canvas = new Canvas(width, height);\n    } else {\n      var canvas = document.createElement('canvas');\n\n      if (width) {\n        canvas.width = width;\n      }\n\n      if (height) {\n        canvas.height = height;\n      }\n    }\n\n    return canvas;\n  }\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  /**\n   * Category\n   * @param {Object} [options]   Available options:\n   *                             {Object} gradient: { 0.25: \"rgb(0,0,255)\", 0.55: \"rgb(0,255,0)\", 0.85: \"yellow\", 1.0: \"rgb(255,0,0)\"}\n   */\n\n\n  function Intensity(options) {\n    options = options || {};\n    this.gradient = options.gradient || {\n      0.25: \"rgba(0, 0, 255, 1)\",\n      0.55: \"rgba(0, 255, 0, 1)\",\n      0.85: \"rgba(255, 255, 0, 1)\",\n      1.0: \"rgba(255, 0, 0, 1)\"\n    };\n    this.maxSize = options.maxSize || 35;\n    this.minSize = options.minSize || 0;\n    this.max = options.max || 100;\n    this.min = options.min || 0;\n    this.initPalette();\n  }\n\n  Intensity.prototype.setMax = function (value) {\n    this.max = value || 100;\n  };\n\n  Intensity.prototype.setMin = function (value) {\n    this.min = value || 0;\n  };\n\n  Intensity.prototype.setMaxSize = function (maxSize) {\n    this.maxSize = maxSize || 35;\n  };\n\n  Intensity.prototype.setMinSize = function (minSize) {\n    this.minSize = minSize || 0;\n  };\n\n  Intensity.prototype.initPalette = function () {\n    var gradient = this.gradient;\n    var canvas = new Canvas(256, 1);\n    var paletteCtx = this.paletteCtx = canvas.getContext('2d');\n    var lineGradient = paletteCtx.createLinearGradient(0, 0, 256, 1);\n\n    for (var key in gradient) {\n      lineGradient.addColorStop(parseFloat(key), gradient[key]);\n    }\n\n    paletteCtx.fillStyle = lineGradient;\n    paletteCtx.fillRect(0, 0, 256, 1);\n  };\n\n  Intensity.prototype.getColor = function (value) {\n    var imageData = this.getImageData(value);\n    return \"rgba(\" + imageData[0] + \", \" + imageData[1] + \", \" + imageData[2] + \", \" + imageData[3] / 256 + \")\";\n  };\n\n  Intensity.prototype.getImageData = function (value) {\n    var imageData = this.paletteCtx.getImageData(0, 0, 256, 1).data;\n\n    if (value === undefined) {\n      return imageData;\n    }\n\n    var max = this.max;\n    var min = this.min;\n\n    if (value > max) {\n      value = max;\n    }\n\n    if (value < min) {\n      value = min;\n    }\n\n    var index = Math.floor((value - min) / (max - min) * (256 - 1)) * 4;\n    return [imageData[index], imageData[index + 1], imageData[index + 2], imageData[index + 3]];\n  };\n  /**\n   * @param Number value \n   * @param Number max of value\n   * @param Number max of size\n   * @param Object other options\n   */\n\n\n  Intensity.prototype.getSize = function (value) {\n    var size = 0;\n    var max = this.max;\n    var min = this.min;\n    var maxSize = this.maxSize;\n    var minSize = this.minSize;\n\n    if (value > max) {\n      value = max;\n    }\n\n    if (value < min) {\n      value = min;\n    }\n\n    size = minSize + (value - min) / (max - min) * (maxSize - minSize);\n    return size;\n  };\n\n  Intensity.prototype.getLegend = function (options) {\n    var gradient = this.gradient;\n    var width = options.width || 20;\n    var height = options.height || 180;\n    var canvas = new Canvas(width, height);\n    var paletteCtx = canvas.getContext('2d');\n    var lineGradient = paletteCtx.createLinearGradient(0, height, 0, 0);\n\n    for (var key in gradient) {\n      lineGradient.addColorStop(parseFloat(key), gradient[key]);\n    }\n\n    paletteCtx.fillStyle = lineGradient;\n    paletteCtx.fillRect(0, 0, width, height);\n    return canvas;\n  };\n\n  var global$1 = typeof window === 'undefined' ? {} : window;\n  var devicePixelRatio = global$1.devicePixelRatio || 1;\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  function createCircle(size) {\n    var shadowBlur = size / 2;\n    var r2 = size + shadowBlur;\n    var offsetDistance = 10000;\n    var circle = new Canvas(r2 * 2, r2 * 2);\n    var context = circle.getContext('2d');\n    context.shadowBlur = shadowBlur;\n    context.shadowColor = 'black';\n    context.shadowOffsetX = context.shadowOffsetY = offsetDistance;\n    context.beginPath();\n    context.arc(r2 - offsetDistance, r2 - offsetDistance, size, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fill();\n    return circle;\n  }\n\n  function colorize(pixels, gradient, options) {\n    var max = getMax(options);\n    var min = getMin(options);\n    var diff = max - min;\n    var range = options.range || null;\n    var jMin = 0;\n    var jMax = 1024;\n\n    if (range && range.length === 2) {\n      jMin = (range[0] - min) / diff * 1024;\n    }\n\n    if (range && range.length === 2) {\n      jMax = (range[1] - min) / diff * 1024;\n    }\n\n    var maxOpacity = options.maxOpacity || 0.8;\n    var range = options.range;\n\n    for (var i = 3, len = pixels.length, j; i < len; i += 4) {\n      j = pixels[i] * 4; // get gradient color from opacity value\n\n      if (pixels[i] / 256 > maxOpacity) {\n        pixels[i] = 256 * maxOpacity;\n      }\n\n      if (j && j >= jMin && j <= jMax) {\n        pixels[i - 3] = gradient[j];\n        pixels[i - 2] = gradient[j + 1];\n        pixels[i - 1] = gradient[j + 2];\n      } else {\n        pixels[i] = 0;\n      }\n    }\n  }\n\n  function getMax(options) {\n    var max = options.max || 100;\n    return max;\n  }\n\n  function getMin(options) {\n    var min = options.min || 0;\n    return min;\n  }\n\n  function drawGray(context, dataSet, options) {\n    var max = getMax(options);\n    var min = getMin(options); // console.log(max)\n\n    var size = options._size;\n\n    if (size == undefined) {\n      size = options.size;\n\n      if (size == undefined) {\n        size = 13;\n      }\n    }\n\n    var intensity = new Intensity({\n      gradient: options.gradient,\n      max: max,\n      min: min\n    });\n    var circle = createCircle(size);\n    var circleHalfWidth = circle.width / 2;\n    var circleHalfHeight = circle.height / 2;\n    var data = dataSet;\n    var dataOrderByAlpha = {};\n    data.forEach(function (item, index) {\n      var count = item.count === undefined ? 1 : item.count;\n      var alpha = Math.min(1, count / max).toFixed(2);\n      dataOrderByAlpha[alpha] = dataOrderByAlpha[alpha] || [];\n      dataOrderByAlpha[alpha].push(item);\n    });\n\n    for (var i in dataOrderByAlpha) {\n      if (isNaN(i)) continue;\n      var _data = dataOrderByAlpha[i];\n      context.beginPath();\n\n      if (!options.withoutAlpha) {\n        context.globalAlpha = i;\n      }\n\n      context.strokeStyle = intensity.getColor(i * max);\n\n      _data.forEach(function (item, index) {\n        if (!item.geometry) {\n          return;\n        }\n\n        var coordinates = item.geometry._coordinates || item.geometry.coordinates;\n        var type = item.geometry.type;\n\n        if (type === 'Point') {\n          var count = item.count === undefined ? 1 : item.count;\n          context.globalAlpha = count / max;\n          context.drawImage(circle, coordinates[0] - circleHalfWidth, coordinates[1] - circleHalfHeight);\n        } else if (type === 'LineString') {\n          var count = item.count === undefined ? 1 : item.count;\n          context.globalAlpha = count / max;\n          context.beginPath();\n          pathSimple.draw(context, item, options);\n          context.stroke();\n        } else if (type === 'Polygon') {}\n      });\n    }\n  }\n\n  function draw$1(context, dataSet, options) {\n    if (context.canvas.width <= 0 || context.canvas.height <= 0) {\n      return;\n    }\n\n    var strength = options.strength || 0.3;\n    context.strokeStyle = 'rgba(0,0,0,' + strength + ')';\n    var shadowCanvas = new Canvas(context.canvas.width, context.canvas.height);\n    var shadowContext = shadowCanvas.getContext('2d');\n    shadowContext.scale(devicePixelRatio, devicePixelRatio);\n    options = options || {};\n    var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n    context.save();\n    var intensity = new Intensity({\n      gradient: options.gradient\n    }); //console.time('drawGray')\n\n    drawGray(shadowContext, data, options); //console.timeEnd('drawGray');\n    // return false;\n\n    if (!options.absolute) {\n      //console.time('changeColor');\n      var colored = shadowContext.getImageData(0, 0, context.canvas.width, context.canvas.height);\n      colorize(colored.data, intensity.getImageData(), options); //console.timeEnd('changeColor');\n\n      context.putImageData(colored, 0, 0);\n      context.restore();\n    }\n\n    intensity = null;\n    shadowCanvas = null;\n  }\n\n  var drawHeatmap = {\n    draw: draw$1\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  var drawGrid = {\n    draw: function draw(context, dataSet, options) {\n      context.save();\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n      var grids = {};\n      var size = options._size || options.size || 50;\n      var offset = options.offset || {\n        x: 0,\n        y: 0\n      };\n\n      for (var i = 0; i < data.length; i++) {\n        var coordinates = data[i].geometry._coordinates || data[i].geometry.coordinates;\n        var gridKey = Math.floor((coordinates[0] - offset.x) / size) + \",\" + Math.floor((coordinates[1] - offset.y) / size);\n\n        if (!grids[gridKey]) {\n          grids[gridKey] = 0;\n        }\n\n        grids[gridKey] += ~~(data[i].count || 1);\n      }\n\n      var intensity = new Intensity({\n        min: options.min || 0,\n        max: options.max || 100,\n        gradient: options.gradient\n      });\n\n      for (var gridKey in grids) {\n        gridKey = gridKey.split(\",\");\n        context.beginPath();\n        context.rect(gridKey[0] * size + .5 + offset.x, gridKey[1] * size + .5 + offset.y, size, size);\n        context.fillStyle = intensity.getColor(grids[gridKey]);\n        context.fill();\n\n        if (options.strokeStyle && options.lineWidth) {\n          context.stroke();\n        }\n      }\n\n      if (options.label && options.label.show !== false) {\n        context.fillStyle = options.label.fillStyle || 'white';\n\n        if (options.label.font) {\n          context.font = options.label.font;\n        }\n\n        if (options.label.shadowColor) {\n          context.shadowColor = options.label.shadowColor;\n        }\n\n        if (options.label.shadowBlur) {\n          context.shadowBlur = options.label.shadowBlur;\n        }\n\n        for (var gridKey in grids) {\n          gridKey = gridKey.split(\",\");\n          var text = grids[gridKey];\n          var textWidth = context.measureText(text).width;\n          context.fillText(text, gridKey[0] * size + .5 + offset.x + size / 2 - textWidth / 2, gridKey[1] * size + .5 + offset.y + size / 2 + 5);\n        }\n      }\n\n      context.restore();\n    }\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  function hex_corner$1(center, size, i) {\n    var angle_deg = 60 * i + 30;\n    var angle_rad = Math.PI / 180 * angle_deg;\n    return [center.x + size * Math.cos(angle_rad), center.y + size * Math.sin(angle_rad)];\n  }\n\n  var drawHoneycomb = {\n    draw: function draw(context, dataSet, options) {\n      context.save();\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n\n      for (var key in options) {\n        context[key] = options[key];\n      }\n\n      var grids = {};\n      var offset = options.offset || {\n        x: 10,\n        y: 10\n      };\n      var r = options._size || options.size || 40;\n      r = r / 2 / Math.sin(Math.PI / 3);\n      var dx = r * 2 * Math.sin(Math.PI / 3);\n      var dy = r * 1.5;\n      var binsById = {};\n\n      for (var i = 0; i < data.length; i++) {\n        var coordinates = data[i].geometry._coordinates || data[i].geometry.coordinates;\n        var py = (coordinates[1] - offset.y) / dy,\n            pj = Math.round(py),\n            px = (coordinates[0] - offset.x) / dx - (pj & 1 ? .5 : 0),\n            pi = Math.round(px),\n            py1 = py - pj;\n\n        if (Math.abs(py1) * 3 > 1) {\n          var px1 = px - pi,\n              pi2 = pi + (px < pi ? -1 : 1) / 2,\n              pj2 = pj + (py < pj ? -1 : 1),\n              px2 = px - pi2,\n              py2 = py - pj2;\n          if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;\n        }\n\n        var id = pi + \"-\" + pj,\n            bin = binsById[id];\n\n        if (bin) {\n          bin.push(data[i]);\n        } else {\n          bin = binsById[id] = [data[i]];\n          bin.i = pi;\n          bin.j = pj;\n          bin.x = (pi + (pj & 1 ? 1 / 2 : 0)) * dx;\n          bin.y = pj * dy;\n        }\n      }\n\n      var intensity = new Intensity({\n        max: options.max || 100,\n        maxSize: r,\n        gradient: options.gradient\n      });\n\n      for (var key in binsById) {\n        var item = binsById[key];\n        context.beginPath();\n\n        for (var j = 0; j < 6; j++) {\n          var result = hex_corner$1({\n            x: item.x + offset.x,\n            y: item.y + offset.y\n          }, r, j);\n          context.lineTo(result[0], result[1]);\n        }\n\n        context.closePath();\n        var count = 0;\n\n        for (var i = 0; i < item.length; i++) {\n          count += item[i].count || 1;\n        }\n\n        item.count = count;\n        context.fillStyle = intensity.getColor(count);\n        context.fill();\n\n        if (options.strokeStyle && options.lineWidth) {\n          context.stroke();\n        }\n      }\n\n      if (options.label && options.label.show !== false) {\n        context.fillStyle = options.label.fillStyle || 'white';\n\n        if (options.label.font) {\n          context.font = options.label.font;\n        }\n\n        if (options.label.shadowColor) {\n          context.shadowColor = options.label.shadowColor;\n        }\n\n        if (options.label.shadowBlur) {\n          context.shadowBlur = options.label.shadowBlur;\n        }\n\n        for (var key in binsById) {\n          var item = binsById[key];\n          var text = item.count;\n\n          if (text < 0) {\n            text = text.toFixed(2);\n          } else {\n            text = ~~text;\n          }\n\n          var textWidth = context.measureText(text).width;\n          context.fillText(text, item.x + offset.x - textWidth / 2, item.y + offset.y + 5);\n        }\n      }\n\n      context.restore();\n    }\n  };\n\n  function createShader(gl, src, type) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  function initShaders(gl, vs_source, fs_source) {\n    var vertexShader = createShader(gl, vs_source, gl.VERTEX_SHADER);\n    var fragmentShader = createShader(gl, fs_source, gl.FRAGMENT_SHADER);\n    var glProgram = gl.createProgram();\n    gl.attachShader(glProgram, vertexShader);\n    gl.attachShader(glProgram, fragmentShader);\n    gl.linkProgram(glProgram);\n    gl.useProgram(glProgram);\n    return glProgram;\n  }\n\n  function getColorData(color) {\n    var tmpCanvas = document.createElement('canvas');\n    var tmpCtx = tmpCanvas.getContext('2d');\n    tmpCanvas.width = 1;\n    tmpCanvas.height = 1;\n    tmpCtx.fillStyle = color;\n    tmpCtx.fillRect(0, 0, 1, 1);\n    return tmpCtx.getImageData(0, 0, 1, 1).data;\n  }\n\n  var vs_s = ['attribute vec4 a_Position;', 'void main() {', 'gl_Position = a_Position;', 'gl_PointSize = 30.0;', '}'].join('');\n  var fs_s = ['precision mediump float;', 'uniform vec4 u_FragColor;', 'void main() {', 'gl_FragColor = u_FragColor;', '}'].join('');\n\n  function draw$2(gl, data, options) {\n    if (!data) {\n      return;\n    }\n\n    var program = initShaders(gl, vs_s, fs_s);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE); //gl.clearColor(0.0, 0.0, 1.0, 1.0);\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    var halfCanvasWidth = gl.canvas.width / 2;\n    var halfCanvasHeight = gl.canvas.height / 2; // Create a buffer object\n\n    var vertexBuffer = gl.createBuffer(); // Bind the buffer object to target\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    var a_Position = gl.getAttribLocation(program, 'a_Position'); // Assign the buffer object to a_Position variable\n\n    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0); // Enable the assignment to a_Position variable\n\n    gl.enableVertexAttribArray(a_Position);\n    var uFragColor = gl.getUniformLocation(program, 'u_FragColor');\n    var colored = getColorData(options.strokeStyle || 'red');\n    gl.uniform4f(uFragColor, colored[0] / 255, colored[1] / 255, colored[2] / 255, colored[3] / 255);\n    gl.lineWidth(options.lineWidth || 1);\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var _geometry = data[i].geometry._coordinates;\n      var verticesData = [];\n\n      for (var j = 0; j < _geometry.length; j++) {\n        var item = _geometry[j];\n        var x = (item[0] - halfCanvasWidth) / halfCanvasWidth;\n        var y = (halfCanvasHeight - item[1]) / halfCanvasHeight;\n        verticesData.push(x, y);\n      }\n\n      var vertices = new Float32Array(verticesData); // Write date into the buffer object\n\n      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n      gl.drawArrays(gl.LINE_STRIP, 0, _geometry.length);\n    }\n  }\n\n  var line = {\n    draw: draw$2\n  };\n  var vs_s$1 = ['attribute vec4 a_Position;', 'attribute float a_PointSize;', 'void main() {', 'gl_Position = a_Position;', 'gl_PointSize = a_PointSize;', '}'].join('');\n  var fs_s$1 = ['precision mediump float;', 'uniform vec4 u_FragColor;', 'void main() {', 'gl_FragColor = u_FragColor;', '}'].join('');\n\n  function draw$3(gl, data, options) {\n    if (!data) {\n      return;\n    }\n\n    var program = initShaders(gl, vs_s$1, fs_s$1);\n    var a_Position = gl.getAttribLocation(program, 'a_Position');\n    var a_PointSize = gl.getAttribLocation(program, 'a_PointSize');\n    var uFragColor = gl.getUniformLocation(program, 'u_FragColor'); //gl.clearColor(0.0, 0.0, 1.0, 1.0);\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    var halfCanvasWidth = gl.canvas.width / 2;\n    var halfCanvasHeight = gl.canvas.height / 2;\n    var verticesData = [];\n    var count = 0;\n\n    for (var i = 0; i < data.length; i++) {\n      var item = data[i].geometry._coordinates;\n      var x = (item[0] - halfCanvasWidth) / halfCanvasWidth;\n      var y = (halfCanvasHeight - item[1]) / halfCanvasHeight;\n\n      if (x < -1 || x > 1 || y < -1 || y > 1) {\n        continue;\n      }\n\n      verticesData.push(x, y);\n      count++;\n    }\n\n    var vertices = new Float32Array(verticesData);\n    var n = count; // The number of vertices\n    // Create a buffer object\n\n    var vertexBuffer = gl.createBuffer(); // Bind the buffer object to target\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer); // Write date into the buffer object\n\n    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW); // Assign the buffer object to a_Position variable\n\n    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0); // Enable the assignment to a_Position variable\n\n    gl.enableVertexAttribArray(a_Position);\n    gl.vertexAttrib1f(a_PointSize, options._size);\n    var colored = getColorData(options.fillStyle || 'red');\n    gl.uniform4f(uFragColor, colored[0] / 255, colored[1] / 255, colored[2] / 255, colored[3] / 255);\n    gl.drawArrays(gl.POINTS, 0, n);\n  }\n\n  var point = {\n    draw: draw$3\n  };\n\n  function earcut(data, holeIndices, dim) {\n    dim = dim || 2;\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n    if (!outerNode) return triangles;\n    var minX, minY, maxX, maxY, x, y, size;\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n    if (data.length > 80 * dim) {\n      minX = maxX = data[0];\n      minY = maxY = data[1];\n\n      for (var i = dim; i < outerLen; i += dim) {\n        x = data[i];\n        y = data[i + 1];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n      } // minX, minY and size are later used to transform coords into integers for z-order calculation\n\n\n      size = Math.max(maxX - minX, maxY - minY);\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, size);\n    return triangles;\n  } // create a circular doubly linked list from polygon points in the specified winding order\n\n\n  function linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === signedArea(data, start, end, dim) > 0) {\n      for (i = start; i < end; i += dim) {\n        last = insertNode(i, data[i], data[i + 1], last);\n      }\n    } else {\n      for (i = end - dim; i >= start; i -= dim) {\n        last = insertNode(i, data[i], data[i + 1], last);\n      }\n    }\n\n    if (last && equals(last, last.next)) {\n      removeNode(last);\n      last = last.next;\n    }\n\n    return last;\n  } // eliminate colinear or duplicate points\n\n\n  function filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n    var p = start,\n        again;\n\n    do {\n      again = false;\n\n      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n        removeNode(p);\n        p = end = p.prev;\n        if (p === p.next) return null;\n        again = true;\n      } else {\n        p = p.next;\n      }\n    } while (again || p !== end);\n\n    return end;\n  } // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n  function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {\n    if (!ear) return; // interlink polygon nodes in z-order\n\n    if (!pass && size) indexCurve(ear, minX, minY, size);\n    var stop = ear,\n        prev,\n        next; // iterate through ears, slicing them one by one\n\n    while (ear.prev !== ear.next) {\n      prev = ear.prev;\n      next = ear.next;\n\n      if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {\n        // cut off the triangle\n        triangles.push(prev.i / dim);\n        triangles.push(ear.i / dim);\n        triangles.push(next.i / dim);\n        removeNode(ear); // skipping the next vertice leads to less sliver triangles\n\n        ear = next.next;\n        stop = next.next;\n        continue;\n      }\n\n      ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n      if (ear === stop) {\n        // try filtering points and slicing again\n        if (!pass) {\n          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1); // if this didn't work, try curing all small self-intersections locally\n        } else if (pass === 1) {\n          ear = cureLocalIntersections(ear, triangles, dim);\n          earcutLinked(ear, triangles, dim, minX, minY, size, 2); // as a last resort, try splitting the remaining polygon into two\n        } else if (pass === 2) {\n          splitEarcut(ear, triangles, dim, minX, minY, size);\n        }\n\n        break;\n      }\n    }\n  } // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n  function isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n    // now make sure we don't have other points inside the potential ear\n\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.next;\n    }\n\n    return true;\n  }\n\n  function isEarHashed(ear, minX, minY, size) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n    // triangle bbox; min & max are calculated like this for speed\n\n    var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n        minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n        maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n        maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n    var minZ = zOrder(minTX, minTY, minX, minY, size),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, size); // first look for points inside the triangle in increasing z-order\n\n    var p = ear.nextZ;\n\n    while (p && p.z <= maxZ) {\n      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.nextZ;\n    } // then look for points in decreasing z-order\n\n\n    p = ear.prevZ;\n\n    while (p && p.z >= minZ) {\n      if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n      p = p.prevZ;\n    }\n\n    return true;\n  } // go through all polygon nodes and cure small local self-intersections\n\n\n  function cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n\n    do {\n      var a = p.prev,\n          b = p.next.next;\n\n      if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n        triangles.push(a.i / dim);\n        triangles.push(p.i / dim);\n        triangles.push(b.i / dim); // remove two nodes involved\n\n        removeNode(p);\n        removeNode(p.next);\n        p = start = b;\n      }\n\n      p = p.next;\n    } while (p !== start);\n\n    return p;\n  } // try splitting polygon into two and triangulate them independently\n\n\n  function splitEarcut(start, triangles, dim, minX, minY, size) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n\n    do {\n      var b = a.next.next;\n\n      while (b !== a.prev) {\n        if (a.i !== b.i && isValidDiagonal(a, b)) {\n          // split the polygon in two by the diagonal\n          var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n          a = filterPoints(a, a.next);\n          c = filterPoints(c, c.next); // run earcut on each half\n\n          earcutLinked(a, triangles, dim, minX, minY, size);\n          earcutLinked(c, triangles, dim, minX, minY, size);\n          return;\n        }\n\n        b = b.next;\n      }\n\n      a = a.next;\n    } while (a !== start);\n  } // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n  function eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i,\n        len,\n        start,\n        end,\n        list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n      start = holeIndices[i] * dim;\n      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      list = linkedList(data, start, end, dim, false);\n      if (list === list.next) list.steiner = true;\n      queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX); // process holes from left to right\n\n    for (i = 0; i < queue.length; i++) {\n      eliminateHole(queue[i], outerNode);\n      outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n  }\n\n  function compareX(a, b) {\n    return a.x - b.x;\n  } // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n  function eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n\n    if (outerNode) {\n      var b = splitPolygon(outerNode, hole);\n      filterPoints(b, b.next);\n    }\n  } // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n  function findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n\n    do {\n      if (hy <= p.y && hy >= p.next.y) {\n        var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n        if (x <= hx && x > qx) {\n          qx = x;\n\n          if (x === hx) {\n            if (hy === p.y) return p;\n            if (hy === p.next.y) return p.next;\n          }\n\n          m = p.x < p.next.x ? p : p.next;\n        }\n      }\n\n      p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n    p = m.next;\n\n    while (p !== stop) {\n      if (hx >= p.x && p.x >= mx && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n        if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {\n          m = p;\n          tanMin = tan;\n        }\n      }\n\n      p = p.next;\n    }\n\n    return m;\n  } // interlink polygon nodes in z-order\n\n\n  function indexCurve(start, minX, minY, size) {\n    var p = start;\n\n    do {\n      if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, size);\n      p.prevZ = p.prev;\n      p.nextZ = p.next;\n      p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n    sortLinked(p);\n  } // Simon Tatham's linked list merge sort algorithm\n  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n  function sortLinked(list) {\n    var i,\n        p,\n        q,\n        e,\n        tail,\n        numMerges,\n        pSize,\n        qSize,\n        inSize = 1;\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      numMerges = 0;\n\n      while (p) {\n        numMerges++;\n        q = p;\n        pSize = 0;\n\n        for (i = 0; i < inSize; i++) {\n          pSize++;\n          q = q.nextZ;\n          if (!q) break;\n        }\n\n        qSize = inSize;\n\n        while (pSize > 0 || qSize > 0 && q) {\n          if (pSize === 0) {\n            e = q;\n            q = q.nextZ;\n            qSize--;\n          } else if (qSize === 0 || !q) {\n            e = p;\n            p = p.nextZ;\n            pSize--;\n          } else if (p.z <= q.z) {\n            e = p;\n            p = p.nextZ;\n            pSize--;\n          } else {\n            e = q;\n            q = q.nextZ;\n            qSize--;\n          }\n\n          if (tail) tail.nextZ = e;else list = e;\n          e.prevZ = tail;\n          tail = e;\n        }\n\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n\n    return list;\n  } // z-order of a point given coords and size of the data bounding box\n\n\n  function zOrder(x, y, minX, minY, size) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) / size;\n    y = 32767 * (y - minY) / size;\n    x = (x | x << 8) & 0x00FF00FF;\n    x = (x | x << 4) & 0x0F0F0F0F;\n    x = (x | x << 2) & 0x33333333;\n    x = (x | x << 1) & 0x55555555;\n    y = (y | y << 8) & 0x00FF00FF;\n    y = (y | y << 4) & 0x0F0F0F0F;\n    y = (y | y << 2) & 0x33333333;\n    y = (y | y << 1) & 0x55555555;\n    return x | y << 1;\n  } // find the leftmost node of a polygon ring\n\n\n  function getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n\n    do {\n      if (p.x < leftmost.x) leftmost = p;\n      p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n  } // check if a point lies within a convex triangle\n\n\n  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n  } // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n  function isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);\n  } // signed area of a triangle\n\n\n  function area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n  } // check if two points are equal\n\n\n  function equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n  } // check if two segments intersect\n\n\n  function intersects(p1, q1, p2, q2) {\n    if (equals(p1, q1) && equals(p2, q2) || equals(p1, q2) && equals(p2, q1)) return true;\n    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;\n  } // check if a polygon diagonal intersects any polygon segments\n\n\n  function intersectsPolygon(a, b) {\n    var p = a;\n\n    do {\n      if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n      p = p.next;\n    } while (p !== a);\n\n    return false;\n  } // check if a polygon diagonal is locally inside the polygon\n\n\n  function locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n  } // check if the middle point of a polygon diagonal is inside the polygon\n\n\n  function middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n\n    do {\n      if (p.y > py !== p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n      p = p.next;\n    } while (p !== a);\n\n    return inside;\n  } // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n  // if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n  function splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n    a.next = b;\n    b.prev = a;\n    a2.next = an;\n    an.prev = a2;\n    b2.next = a2;\n    a2.prev = b2;\n    bp.next = b2;\n    b2.prev = bp;\n    return b2;\n  } // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n  function insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n      p.prev = p;\n      p.next = p;\n    } else {\n      p.next = last.next;\n      p.prev = last;\n      last.next.prev = p;\n      last.next = p;\n    }\n\n    return p;\n  }\n\n  function removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n  }\n\n  function Node(i, x, y) {\n    // vertice index in coordinates array\n    this.i = i; // vertex coordinates\n\n    this.x = x;\n    this.y = y; // previous and next vertice nodes in a polygon ring\n\n    this.prev = null;\n    this.next = null; // z-order curve value\n\n    this.z = null; // previous and next nodes in z-order\n\n    this.prevZ = null;\n    this.nextZ = null; // indicates whether this is a steiner point\n\n    this.steiner = false;\n  } // return a percentage difference between the polygon area and its triangulation area;\n  // used to verify correctness of triangulation\n\n\n  earcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\n    if (hasHoles) {\n      for (var i = 0, len = holeIndices.length; i < len; i++) {\n        var start = holeIndices[i] * dim;\n        var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        polygonArea -= Math.abs(signedArea(data, start, end, dim));\n      }\n    }\n\n    var trianglesArea = 0;\n\n    for (i = 0; i < triangles.length; i += 3) {\n      var a = triangles[i] * dim;\n      var b = triangles[i + 1] * dim;\n      var c = triangles[i + 2] * dim;\n      trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n  };\n\n  function signedArea(data, start, end, dim) {\n    var sum = 0;\n\n    for (var i = start, j = end - dim; i < end; i += dim) {\n      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n      j = i;\n    }\n\n    return sum;\n  } // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\n\n\n  earcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {\n      vertices: [],\n      holes: [],\n      dimensions: dim\n    },\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n      for (var j = 0; j < data[i].length; j++) {\n        for (var d = 0; d < dim; d++) {\n          result.vertices.push(data[i][j][d]);\n        }\n      }\n\n      if (i > 0) {\n        holeIndex += data[i - 1].length;\n        result.holes.push(holeIndex);\n      }\n    }\n\n    return result;\n  };\n\n  var vs_s$2 = ['attribute vec4 a_Position;', 'void main() {', 'gl_Position = a_Position;', 'gl_PointSize = 30.0;', '}'].join('');\n  var fs_s$2 = ['precision mediump float;', 'uniform vec4 u_FragColor;', 'void main() {', 'gl_FragColor = u_FragColor;', '}'].join('');\n\n  function draw$4(gl, data, options) {\n    if (!data) {\n      return;\n    } // gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    var program = initShaders(gl, vs_s$2, fs_s$2);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n    var halfCanvasWidth = gl.canvas.width / 2;\n    var halfCanvasHeight = gl.canvas.height / 2; // Bind the buffer object to target\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n    var a_Position = gl.getAttribLocation(program, 'a_Position'); // Assign the buffer object to a_Position variable\n\n    gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 0, 0); // Enable the assignment to a_Position variable\n\n    gl.enableVertexAttribArray(a_Position);\n    var uFragColor = gl.getUniformLocation(program, 'u_FragColor');\n    var colored = getColorData(options.fillStyle || 'red');\n    gl.uniform4f(uFragColor, colored[0] / 255, colored[1] / 255, colored[2] / 255, colored[3] / 255);\n    gl.lineWidth(options.lineWidth || 1);\n    var verticesArr = [];\n    var trianglesArr = [];\n    var maxSize = 65536;\n    var indexOffset = 0;\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var flatten = earcut.flatten(data[i].geometry._coordinates || data[i].geometry.coordinates);\n      var vertices = flatten.vertices;\n      indexOffset = verticesArr.length / 2;\n\n      for (var j = 0; j < vertices.length; j += 2) {\n        vertices[j] = (vertices[j] - halfCanvasWidth) / halfCanvasWidth;\n        vertices[j + 1] = (halfCanvasHeight - vertices[j + 1]) / halfCanvasHeight;\n      }\n\n      if ((verticesArr.length + vertices.length) / 2 > maxSize) {\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArr), gl.STATIC_DRAW);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(trianglesArr), gl.STATIC_DRAW);\n        gl.drawElements(gl.TRIANGLES, trianglesArr.length, gl.UNSIGNED_SHORT, 0);\n        verticesArr.length = 0;\n        trianglesArr.length = 0;\n        indexOffset = 0;\n      }\n\n      for (var j = 0; j < vertices.length; j++) {\n        verticesArr.push(vertices[j]);\n      }\n\n      var triangles = earcut(vertices, flatten.holes, flatten.dimensions);\n\n      for (var j = 0; j < triangles.length; j++) {\n        trianglesArr.push(triangles[j] + indexOffset);\n      }\n    }\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArr), gl.STATIC_DRAW);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(trianglesArr), gl.STATIC_DRAW);\n    gl.drawElements(gl.TRIANGLES, trianglesArr.length, gl.UNSIGNED_SHORT, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n\n  var polygon = {\n    draw: draw$4\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  var webglDrawSimple = {\n    draw: function draw(gl, dataSet, options) {\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n\n      if (data.length > 0) {\n        if (data[0].geometry.type == \"LineString\") {\n          line.draw(gl, data, options);\n        } else if (data[0].geometry.type == \"Polygon\" || data[0].geometry.type == \"MultiPolygon\") {\n          polygon.draw(gl, data, options);\n        } else {\n          point.draw(gl, data, options);\n        }\n      }\n    }\n  };\n  /**\n    * 根据弧线的坐标节点数组\n    */\n\n  function getCurvePoints(points, options) {\n    options = options || {};\n    var curvePoints = [];\n\n    for (var i = 0; i < points.length - 1; i++) {\n      var p = getCurveByTwoPoints(points[i], points[i + 1], options.count);\n\n      if (p && p.length > 0) {\n        curvePoints = curvePoints.concat(p);\n      }\n    }\n\n    return curvePoints;\n  }\n  /**\n   * 根据两点获取曲线坐标点数组\n   * @param Point 起点\n   * @param Point 终点\n   */\n\n\n  function getCurveByTwoPoints(obj1, obj2, count) {\n    if (!obj1 || !obj2) {\n      return null;\n    }\n\n    var B1 = function B1(x) {\n      return 1 - 2 * x + x * x;\n    };\n\n    var B2 = function B2(x) {\n      return 2 * x - 2 * x * x;\n    };\n\n    var B3 = function B3(x) {\n      return x * x;\n    };\n\n    var curveCoordinates = [];\n    var count = count || 40; // 曲线是由一些小的线段组成的，这个表示这个曲线所有到的折线的个数\n\n    var isFuture = false;\n    var t, h, h2, lat3, lng3, j, t2;\n    var LnArray = [];\n    var i = 0;\n    var inc = 0;\n\n    if (typeof obj2 == \"undefined\") {\n      if (typeof curveCoordinates != \"undefined\") {\n        curveCoordinates = [];\n      }\n\n      return;\n    }\n\n    var lat1 = parseFloat(obj1.lat);\n    var lat2 = parseFloat(obj2.lat);\n    var lng1 = parseFloat(obj1.lng);\n    var lng2 = parseFloat(obj2.lng); // 计算曲线角度的方法\n\n    if (lng2 > lng1) {\n      if (parseFloat(lng2 - lng1) > 180) {\n        if (lng1 < 0) {\n          lng1 = parseFloat(180 + 180 + lng1);\n          lng2 = parseFloat(180 + 180 + lng2);\n        }\n      }\n    } // 此时纠正了 lng1 lng2\n\n\n    j = 0;\n    t2 = 0; // 纬度相同\n\n    if (lat2 == lat1) {\n      t = 0;\n      h = lng1 - lng2; // 经度相同\n    } else if (lng2 == lng1) {\n      t = Math.PI / 2;\n      h = lat1 - lat2;\n    } else {\n      t = Math.atan((lat2 - lat1) / (lng2 - lng1));\n      h = (lat2 - lat1) / Math.sin(t);\n    }\n\n    if (t2 == 0) {\n      t2 = t + Math.PI / 5;\n    }\n\n    h2 = h / 2;\n    lng3 = h2 * Math.cos(t2) + lng1;\n    lat3 = h2 * Math.sin(t2) + lat1;\n\n    for (i = 0; i < count + 1; i++) {\n      var x = lng1 * B1(inc) + lng3 * B2(inc) + lng2 * B3(inc);\n      var y = lat1 * B1(inc) + lat3 * B2(inc) + lat2 * B3(inc);\n      var lng1_src = obj1.lng;\n      var lng2_src = obj2.lng;\n      curveCoordinates.push([lng1_src < 0 && lng2_src > 0 ? x - 360 : x, y]);\n      inc = inc + 1 / count;\n    }\n\n    return curveCoordinates;\n  }\n\n  var curve = {\n    getPoints: getCurvePoints\n  };\n  /* \n  FDEB algorithm implementation [www.win.tue.nl/~dholten/papers/forcebundles_eurovis.pdf].\n  \n  Author:  (github.com/upphiminn)\n  2013\n  \n  */\n\n  var ForceEdgeBundling = function ForceEdgeBundling() {\n    var data_nodes = {},\n        // {'nodeid':{'x':,'y':},..}\n    data_edges = [],\n        // [{'source':'nodeid1', 'target':'nodeid2'},..]\n    compatibility_list_for_edge = [],\n        subdivision_points_for_edge = [],\n        K = 0.1,\n        // global bundling constant controling edge stiffness\n    S_initial = 0.1,\n        // init. distance to move points\n    P_initial = 1,\n        // init. subdivision number\n    P_rate = 2,\n        // subdivision rate increase\n    C = 6,\n        // number of cycles to perform\n    I_initial = 70,\n        // init. number of iterations for cycle\n    I_rate = 0.6666667,\n        // rate at which iteration number decreases i.e. 2/3\n    compatibility_threshold = 0.6,\n        invers_quadratic_mode = false,\n        eps = 1e-8;\n    /*** Geometry Helper Methods ***/\n\n    function vector_dot_product(p, q) {\n      return p.x * q.x + p.y * q.y;\n    }\n\n    function edge_as_vector(P) {\n      return {\n        'x': data_nodes[P.target].x - data_nodes[P.source].x,\n        'y': data_nodes[P.target].y - data_nodes[P.source].y\n      };\n    }\n\n    function edge_length(e) {\n      return Math.sqrt(Math.pow(data_nodes[e.source].x - data_nodes[e.target].x, 2) + Math.pow(data_nodes[e.source].y - data_nodes[e.target].y, 2));\n    }\n\n    function custom_edge_length(e) {\n      return Math.sqrt(Math.pow(e.source.x - e.target.x, 2) + Math.pow(e.source.y - e.target.y, 2));\n    }\n\n    function edge_midpoint(e) {\n      var middle_x = (data_nodes[e.source].x + data_nodes[e.target].x) / 2.0;\n      var middle_y = (data_nodes[e.source].y + data_nodes[e.target].y) / 2.0;\n      return {\n        'x': middle_x,\n        'y': middle_y\n      };\n    }\n\n    function compute_divided_edge_length(e_idx) {\n      var length = 0;\n\n      for (var i = 1; i < subdivision_points_for_edge[e_idx].length; i++) {\n        var segment_length = euclidean_distance(subdivision_points_for_edge[e_idx][i], subdivision_points_for_edge[e_idx][i - 1]);\n        length += segment_length;\n      }\n\n      return length;\n    }\n\n    function euclidean_distance(p, q) {\n      return Math.sqrt(Math.pow(p.x - q.x, 2) + Math.pow(p.y - q.y, 2));\n    }\n\n    function project_point_on_line(p, Q) {\n      var L = Math.sqrt((Q.target.x - Q.source.x) * (Q.target.x - Q.source.x) + (Q.target.y - Q.source.y) * (Q.target.y - Q.source.y));\n      var r = ((Q.source.y - p.y) * (Q.source.y - Q.target.y) - (Q.source.x - p.x) * (Q.target.x - Q.source.x)) / (L * L);\n      return {\n        'x': Q.source.x + r * (Q.target.x - Q.source.x),\n        'y': Q.source.y + r * (Q.target.y - Q.source.y)\n      };\n    }\n    /*** ********************** ***/\n\n    /*** Initialization Methods ***/\n\n\n    function initialize_edge_subdivisions() {\n      for (var i = 0; i < data_edges.length; i++) {\n        if (P_initial == 1) subdivision_points_for_edge[i] = []; //0 subdivisions\n        else {\n            subdivision_points_for_edge[i] = [];\n            subdivision_points_for_edge[i].push(data_nodes[data_edges[i].source]);\n            subdivision_points_for_edge[i].push(data_nodes[data_edges[i].target]);\n          }\n      }\n    }\n\n    function initialize_compatibility_lists() {\n      for (var i = 0; i < data_edges.length; i++) {\n        compatibility_list_for_edge[i] = [];\n      } //0 compatible edges.\n\n    }\n\n    function filter_self_loops(edgelist) {\n      var filtered_edge_list = [];\n\n      for (var e = 0; e < edgelist.length; e++) {\n        if (data_nodes[edgelist[e].source].x != data_nodes[edgelist[e].target].x && data_nodes[edgelist[e].source].y != data_nodes[edgelist[e].target].y) {\n          //or smaller than eps\n          filtered_edge_list.push(edgelist[e]);\n        }\n      }\n\n      return filtered_edge_list;\n    }\n    /*** ********************** ***/\n\n    /*** Force Calculation Methods ***/\n\n\n    function apply_spring_force(e_idx, i, kP) {\n      var prev = subdivision_points_for_edge[e_idx][i - 1];\n      var next = subdivision_points_for_edge[e_idx][i + 1];\n      var crnt = subdivision_points_for_edge[e_idx][i];\n      var x = prev.x - crnt.x + next.x - crnt.x;\n      var y = prev.y - crnt.y + next.y - crnt.y;\n      x *= kP;\n      y *= kP;\n      return {\n        'x': x,\n        'y': y\n      };\n    }\n\n    function apply_electrostatic_force(e_idx, i, S) {\n      var sum_of_forces = {\n        'x': 0,\n        'y': 0\n      };\n      var compatible_edges_list = compatibility_list_for_edge[e_idx];\n\n      for (var oe = 0; oe < compatible_edges_list.length; oe++) {\n        var force = {\n          'x': subdivision_points_for_edge[compatible_edges_list[oe]][i].x - subdivision_points_for_edge[e_idx][i].x,\n          'y': subdivision_points_for_edge[compatible_edges_list[oe]][i].y - subdivision_points_for_edge[e_idx][i].y\n        };\n\n        if (Math.abs(force.x) > eps || Math.abs(force.y) > eps) {\n          var diff = 1 / Math.pow(custom_edge_length({\n            'source': subdivision_points_for_edge[compatible_edges_list[oe]][i],\n            'target': subdivision_points_for_edge[e_idx][i]\n          }), 1);\n          sum_of_forces.x += force.x * diff;\n          sum_of_forces.y += force.y * diff;\n        }\n      }\n\n      return sum_of_forces;\n    }\n\n    function apply_resulting_forces_on_subdivision_points(e_idx, P, S) {\n      var kP = K / (edge_length(data_edges[e_idx]) * (P + 1)); // kP=K/|P|(number of segments), where |P| is the initial length of edge P.\n      // (length * (num of sub division pts - 1))\n\n      var resulting_forces_for_subdivision_points = [{\n        'x': 0,\n        'y': 0\n      }];\n\n      for (var i = 1; i < P + 1; i++) {\n        // exclude initial end points of the edge 0 and P+1\n        var resulting_force = {\n          'x': 0,\n          'y': 0\n        };\n        var spring_force = apply_spring_force(e_idx, i, kP);\n        var electrostatic_force = apply_electrostatic_force(e_idx, i, S);\n        resulting_force.x = S * (spring_force.x + electrostatic_force.x);\n        resulting_force.y = S * (spring_force.y + electrostatic_force.y);\n        resulting_forces_for_subdivision_points.push(resulting_force);\n      }\n\n      resulting_forces_for_subdivision_points.push({\n        'x': 0,\n        'y': 0\n      });\n      return resulting_forces_for_subdivision_points;\n    }\n    /*** ********************** ***/\n\n    /*** Edge Division Calculation Methods ***/\n\n\n    function update_edge_divisions(P) {\n      for (var e_idx = 0; e_idx < data_edges.length; e_idx++) {\n        if (P == 1) {\n          subdivision_points_for_edge[e_idx].push(data_nodes[data_edges[e_idx].source]); // source\n\n          subdivision_points_for_edge[e_idx].push(edge_midpoint(data_edges[e_idx])); // mid point\n\n          subdivision_points_for_edge[e_idx].push(data_nodes[data_edges[e_idx].target]); // target\n        } else {\n          var divided_edge_length = compute_divided_edge_length(e_idx);\n          var segment_length = divided_edge_length / (P + 1);\n          var current_segment_length = segment_length;\n          var new_subdivision_points = [];\n          new_subdivision_points.push(data_nodes[data_edges[e_idx].source]); //source\n\n          for (var i = 1; i < subdivision_points_for_edge[e_idx].length; i++) {\n            var old_segment_length = euclidean_distance(subdivision_points_for_edge[e_idx][i], subdivision_points_for_edge[e_idx][i - 1]);\n\n            while (old_segment_length > current_segment_length) {\n              var percent_position = current_segment_length / old_segment_length;\n              var new_subdivision_point_x = subdivision_points_for_edge[e_idx][i - 1].x;\n              var new_subdivision_point_y = subdivision_points_for_edge[e_idx][i - 1].y;\n              new_subdivision_point_x += percent_position * (subdivision_points_for_edge[e_idx][i].x - subdivision_points_for_edge[e_idx][i - 1].x);\n              new_subdivision_point_y += percent_position * (subdivision_points_for_edge[e_idx][i].y - subdivision_points_for_edge[e_idx][i - 1].y);\n              new_subdivision_points.push({\n                'x': new_subdivision_point_x,\n                'y': new_subdivision_point_y\n              });\n              old_segment_length -= current_segment_length;\n              current_segment_length = segment_length;\n            }\n\n            current_segment_length -= old_segment_length;\n          }\n\n          new_subdivision_points.push(data_nodes[data_edges[e_idx].target]); //target\n\n          subdivision_points_for_edge[e_idx] = new_subdivision_points;\n        }\n      }\n    }\n    /*** ********************** ***/\n\n    /*** Edge compatibility measures ***/\n\n\n    function angle_compatibility(P, Q) {\n      var result = Math.abs(vector_dot_product(edge_as_vector(P), edge_as_vector(Q)) / (edge_length(P) * edge_length(Q)));\n      return result;\n    }\n\n    function scale_compatibility(P, Q) {\n      var lavg = (edge_length(P) + edge_length(Q)) / 2.0;\n      var result = 2.0 / (lavg / Math.min(edge_length(P), edge_length(Q)) + Math.max(edge_length(P), edge_length(Q)) / lavg);\n      return result;\n    }\n\n    function position_compatibility(P, Q) {\n      var lavg = (edge_length(P) + edge_length(Q)) / 2.0;\n      var midP = {\n        'x': (data_nodes[P.source].x + data_nodes[P.target].x) / 2.0,\n        'y': (data_nodes[P.source].y + data_nodes[P.target].y) / 2.0\n      };\n      var midQ = {\n        'x': (data_nodes[Q.source].x + data_nodes[Q.target].x) / 2.0,\n        'y': (data_nodes[Q.source].y + data_nodes[Q.target].y) / 2.0\n      };\n      var result = lavg / (lavg + euclidean_distance(midP, midQ));\n      return result;\n    }\n\n    function edge_visibility(P, Q) {\n      var I0 = project_point_on_line(data_nodes[Q.source], {\n        'source': data_nodes[P.source],\n        'target': data_nodes[P.target]\n      });\n      var I1 = project_point_on_line(data_nodes[Q.target], {\n        'source': data_nodes[P.source],\n        'target': data_nodes[P.target]\n      }); //send acutal edge points positions\n\n      var midI = {\n        'x': (I0.x + I1.x) / 2.0,\n        'y': (I0.y + I1.y) / 2.0\n      };\n      var midP = {\n        'x': (data_nodes[P.source].x + data_nodes[P.target].x) / 2.0,\n        'y': (data_nodes[P.source].y + data_nodes[P.target].y) / 2.0\n      };\n      var result = Math.max(0, 1 - 2 * euclidean_distance(midP, midI) / euclidean_distance(I0, I1));\n      return result;\n    }\n\n    function visibility_compatibility(P, Q) {\n      return Math.min(edge_visibility(P, Q), edge_visibility(Q, P));\n    }\n\n    function compatibility_score(P, Q) {\n      var result = angle_compatibility(P, Q) * scale_compatibility(P, Q) * position_compatibility(P, Q) * visibility_compatibility(P, Q);\n      return result;\n    }\n\n    function are_compatible(P, Q) {\n      // console.log('compatibility ' + P.source +' - '+ P.target + ' and ' + Q.source +' '+ Q.target);\n      return compatibility_score(P, Q) >= compatibility_threshold;\n    }\n\n    function compute_compatibility_lists() {\n      for (var e = 0; e < data_edges.length - 1; e++) {\n        for (var oe = e + 1; oe < data_edges.length; oe++) {\n          // don't want any duplicates\n          if (e == oe) continue;else {\n            if (are_compatible(data_edges[e], data_edges[oe])) {\n              compatibility_list_for_edge[e].push(oe);\n              compatibility_list_for_edge[oe].push(e);\n            }\n          }\n        }\n      }\n    }\n    /*** ************************ ***/\n\n    /*** Main Bundling Loop Methods ***/\n\n\n    var forcebundle = function forcebundle() {\n      var S = S_initial;\n      var I = I_initial;\n      var P = P_initial;\n      initialize_edge_subdivisions();\n      initialize_compatibility_lists();\n      update_edge_divisions(P);\n      compute_compatibility_lists();\n\n      for (var cycle = 0; cycle < C; cycle++) {\n        for (var iteration = 0; iteration < I; iteration++) {\n          var forces = [];\n\n          for (var edge = 0; edge < data_edges.length; edge++) {\n            forces[edge] = apply_resulting_forces_on_subdivision_points(edge, P, S);\n          }\n\n          for (var e = 0; e < data_edges.length; e++) {\n            for (var i = 0; i < P + 1; i++) {\n              subdivision_points_for_edge[e][i].x += forces[e][i].x;\n              subdivision_points_for_edge[e][i].y += forces[e][i].y;\n            }\n          }\n        } //prepare for next cycle\n\n\n        S = S / 2;\n        P = P * 2;\n        I = I_rate * I;\n        update_edge_divisions(P); // console.log('C' + cycle);\n        // console.log('P' + P);\n        // console.log('S' + S);\n      }\n\n      return subdivision_points_for_edge;\n    };\n    /*** ************************ ***/\n\n    /*** Getters/Setters Methods ***/\n\n\n    forcebundle.nodes = function (nl) {\n      if (arguments.length == 0) {\n        return data_nodes;\n      } else {\n        data_nodes = nl;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.edges = function (ll) {\n      if (arguments.length == 0) {\n        return data_edges;\n      } else {\n        data_edges = filter_self_loops(ll); //remove edges to from to the same point\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.bundling_stiffness = function (k) {\n      if (arguments.length == 0) {\n        return K;\n      } else {\n        K = k;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.step_size = function (step) {\n      if (arguments.length == 0) {\n        return S_initial;\n      } else {\n        S_initial = step;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.cycles = function (c) {\n      if (arguments.length == 0) {\n        return C;\n      } else {\n        C = c;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.iterations = function (i) {\n      if (arguments.length == 0) {\n        return I_initial;\n      } else {\n        I_initial = i;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.iterations_rate = function (i) {\n      if (arguments.length == 0) {\n        return I_rate;\n      } else {\n        I_rate = i;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.subdivision_points_seed = function (p) {\n      if (arguments.length == 0) {\n        return P;\n      } else {\n        P = p;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.subdivision_rate = function (r) {\n      if (arguments.length == 0) {\n        return P_rate;\n      } else {\n        P_rate = r;\n      }\n\n      return forcebundle;\n    };\n\n    forcebundle.compatbility_threshold = function (t) {\n      if (arguments.length == 0) {\n        return compatbility_threshold;\n      } else {\n        compatibility_threshold = t;\n      }\n\n      return forcebundle;\n    };\n    /*** ************************ ***/\n\n\n    return forcebundle;\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  /**\n   * Category\n   * @param {Object} splitList:\n   *   { \n   *       other: 1,\n   *       1: 2,\n   *       2: 3,\n   *       3: 4,\n   *       4: 5,\n   *       5: 6,\n   *       6: 7\n   *   }\n   */\n\n\n  function Category(splitList) {\n    this.splitList = splitList || {\n      other: 1\n    };\n  }\n\n  Category.prototype.get = function (count) {\n    var splitList = this.splitList;\n    var value = splitList['other'];\n\n    for (var i in splitList) {\n      if (count == i) {\n        value = splitList[i];\n        break;\n      }\n    }\n\n    return value;\n  };\n  /**\n   * 根据DataSet自动生成对应的splitList\n   */\n\n\n  Category.prototype.generateByDataSet = function (dataSet, color) {\n    var colors = color || ['rgba(255, 255, 0, 0.8)', 'rgba(253, 98, 104, 0.8)', 'rgba(255, 146, 149, 0.8)', 'rgba(255, 241, 193, 0.8)', 'rgba(110, 176, 253, 0.8)', 'rgba(52, 139, 251, 0.8)', 'rgba(17, 102, 252, 0.8)'];\n    var data = dataSet.get();\n    this.splitList = {};\n    var count = 0;\n\n    for (var i = 0; i < data.length; i++) {\n      if (this.splitList[data[i].count] === undefined) {\n        this.splitList[data[i].count] = colors[count];\n        count++;\n      }\n\n      if (count >= colors.length - 1) {\n        break;\n      }\n    }\n\n    this.splitList['other'] = colors[colors.length - 1];\n  };\n\n  Category.prototype.getLegend = function (options) {\n    var splitList = this.splitList;\n    var container = document.createElement('div');\n    container.style.cssText = \"background:#fff; padding: 5px; border: 1px solid #ccc;\";\n    var html = '';\n\n    for (var key in splitList) {\n      html += '<div style=\"line-height: 19px;\" value=\"' + key + '\"><span style=\"vertical-align: -2px; display: inline-block; width: 30px;height: 19px;background:' + splitList[key] + ';\"></span><span style=\"margin-left: 3px;\">' + key + '<span></div>';\n    }\n\n    container.innerHTML = html;\n    return container;\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  /**\n   * Choropleth\n   * @param {Object} splitList:\n   *       [\n   *           {\n   *               start: 0,\n   *               end: 2,\n   *               value: randomColor()\n   *           },{\n   *               start: 2,\n   *               end: 4,\n   *               value: randomColor()\n   *           },{\n   *               start: 4,\n   *               value: randomColor()\n   *           }\n   *       ];\n   *\n   */\n\n\n  function Choropleth(splitList) {\n    this.splitList = splitList || [{\n      start: 0,\n      value: 'red'\n    }];\n  }\n\n  Choropleth.prototype.get = function (count) {\n    var splitList = this.splitList;\n    var value = false;\n\n    for (var i = 0; i < splitList.length; i++) {\n      if ((splitList[i].start === undefined || splitList[i].start !== undefined && count >= splitList[i].start) && (splitList[i].end === undefined || splitList[i].end !== undefined && count < splitList[i].end)) {\n        value = splitList[i].value;\n        break;\n      }\n    }\n\n    return value;\n  };\n  /**\n   * 根据DataSet自动生成对应的splitList\n   */\n\n\n  Choropleth.prototype.generateByDataSet = function (dataSet) {\n    var min = dataSet.getMin('count');\n    var max = dataSet.getMax('count');\n    this.generateByMinMax(min, max);\n  };\n  /**\n   * 根据DataSet自动生成对应的splitList\n   */\n\n\n  Choropleth.prototype.generateByMinMax = function (min, max) {\n    var colors = ['rgba(255, 255, 0, 0.8)', 'rgba(253, 98, 104, 0.8)', 'rgba(255, 146, 149, 0.8)', 'rgba(255, 241, 193, 0.8)', 'rgba(110, 176, 253, 0.8)', 'rgba(52, 139, 251, 0.8)', 'rgba(17, 102, 252, 0.8)'];\n    var splitNum = Number((max - min) / 7); // console.log(splitNum)\n\n    max = Number(max);\n    var index = Number(min);\n    this.splitList = [];\n    var count = 0;\n\n    while (index < max) {\n      this.splitList.push({\n        start: index,\n        end: index + splitNum,\n        value: colors[count]\n      });\n      count++;\n      index += splitNum; // console.log(index, max)\n    } // console.log('splitNum')\n\n  };\n\n  Choropleth.prototype.getLegend = function (options) {\n    var splitList = this.splitList;\n  };\n  /**\n   * @author Mofei<http://www.zhuwenlong.com>\n   */\n\n\n  var MapHelper = function () {\n    function MapHelper(id, type, opt) {\n      classCallCheck(this, MapHelper);\n\n      if (!id || !type) {\n        console.warn('id 和 type 为必填项');\n        return false;\n      }\n\n      if (type == 'baidu') {\n        if (!BMap) {\n          console.warn('请先引入百度地图JS API');\n          return false;\n        }\n      } else {\n        console.warn('暂不支持你的地图类型');\n      }\n\n      this.type = type;\n      var center = opt && opt.center ? opt.center : [106.962497, 38.208726];\n      var zoom = opt && opt.zoom ? opt.zoom : 5;\n      var map = this.map = new BMap.Map(id, {\n        enableMapClick: false\n      });\n      map.centerAndZoom(new BMap.Point(center[0], center[1]), zoom);\n      map.enableScrollWheelZoom(true);\n      map.setMapStyle({\n        style: 'light'\n      });\n    }\n\n    createClass(MapHelper, [{\n      key: 'addLayer',\n      value: function addLayer(datas, options) {\n        if (this.type == 'baidu') {\n          return new mapv.baiduMapLayer(this.map, dataSet, options);\n        }\n      }\n    }, {\n      key: 'getMap',\n      value: function getMap() {\n        return this.map;\n      }\n    }]);\n    return MapHelper;\n  }();\n  /**\n   * 一直覆盖在当前地图视野的Canvas对象\n   *\n   * @author nikai (@胖嘟嘟的骨头, nikai@baidu.com)\n   *\n   * @param \n   * {\n   *     map 地图实例对象\n   * }\n   */\n\n\n  function CanvasLayer(options) {\n    this.options = options || {};\n    this.paneName = this.options.paneName || 'mapPane';\n    this.context = this.options.context || '2d';\n    this.zIndex = this.options.zIndex || 0;\n    this.mixBlendMode = this.options.mixBlendMode || null;\n    this.enableMassClear = this.options.enableMassClear;\n    this._map = options.map;\n    this._lastDrawTime = null;\n    this.show();\n  }\n\n  var global$3 = typeof window === 'undefined' ? {} : window;\n\n  if (global$3.BMap) {\n    CanvasLayer.prototype = new BMap.Overlay();\n\n    CanvasLayer.prototype.initialize = function (map) {\n      this._map = map;\n      var canvas = this.canvas = document.createElement(\"canvas\");\n      canvas.style.cssText = \"position:absolute;\" + \"left:0;\" + \"top:0;\" + \"z-index:\" + this.zIndex + \";user-select:none;\";\n      canvas.style.mixBlendMode = this.mixBlendMode;\n      this.adjustSize();\n      map.getPanes()[this.paneName].appendChild(canvas);\n      var that = this;\n      map.addEventListener('resize', function () {\n        that.adjustSize();\n\n        that._draw();\n      });\n      /*\n      map.addEventListener('moving', function() {\n          that._draw();\n      });\n      */\n\n      return this.canvas;\n    };\n\n    CanvasLayer.prototype.adjustSize = function () {\n      var size = this._map.getSize();\n\n      var canvas = this.canvas;\n      var devicePixelRatio = this.devicePixelRatio = global$3.devicePixelRatio || 1;\n      canvas.width = size.width * devicePixelRatio;\n      canvas.height = size.height * devicePixelRatio;\n\n      if (this.context == '2d') {\n        canvas.getContext(this.context).scale(devicePixelRatio, devicePixelRatio);\n      }\n\n      canvas.style.width = size.width + \"px\";\n      canvas.style.height = size.height + \"px\";\n    };\n\n    CanvasLayer.prototype.draw = function () {\n      var self = this;\n      clearTimeout(self.timeoutID);\n      self.timeoutID = setTimeout(function () {\n        self._draw();\n      }, 15);\n    };\n\n    CanvasLayer.prototype._draw = function () {\n      var map = this._map;\n      var size = map.getSize();\n      var center = map.getCenter();\n\n      if (center) {\n        var pixel = map.pointToOverlayPixel(center);\n        this.canvas.style.left = pixel.x - size.width / 2 + 'px';\n        this.canvas.style.top = pixel.y - size.height / 2 + 'px';\n        this.dispatchEvent('draw');\n        this.options.update && this.options.update.call(this);\n      }\n    };\n\n    CanvasLayer.prototype.getContainer = function () {\n      return this.canvas;\n    };\n\n    CanvasLayer.prototype.show = function () {\n      if (!this.canvas) {\n        this._map.addOverlay(this);\n      }\n\n      this.canvas.style.display = \"block\";\n    };\n\n    CanvasLayer.prototype.hide = function () {\n      this.canvas.style.display = \"none\"; //this._map.removeOverlay(this);\n    };\n\n    CanvasLayer.prototype.setZIndex = function (zIndex) {\n      this.zIndex = zIndex;\n      this.canvas.style.zIndex = this.zIndex;\n    };\n\n    CanvasLayer.prototype.getZIndex = function () {\n      return this.zIndex;\n    };\n  }\n  /**\n   * Tween.js - Licensed under the MIT license\n   * https://github.com/tweenjs/tween.js\n   * ----------------------------------------------\n   *\n   * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n   * Thank you all, you're awesome!\n   */\n\n\n  var TWEEN = TWEEN || function () {\n    var _tweens = [];\n    return {\n      getAll: function getAll() {\n        return _tweens;\n      },\n      removeAll: function removeAll() {\n        _tweens = [];\n      },\n      add: function add(tween) {\n        _tweens.push(tween);\n      },\n      remove: function remove(tween) {\n        var i = _tweens.indexOf(tween);\n\n        if (i !== -1) {\n          _tweens.splice(i, 1);\n        }\n      },\n      update: function update(time, preserve) {\n        if (_tweens.length === 0) {\n          return false;\n        }\n\n        var i = 0;\n        time = time !== undefined ? time : TWEEN.now();\n\n        while (i < _tweens.length) {\n          if (_tweens[i].update(time) || preserve) {\n            i++;\n          } else {\n            _tweens.splice(i, 1);\n          }\n        }\n\n        return true;\n      }\n    };\n  }(); // Include a performance.now polyfill.\n  // In node.js, use process.hrtime.\n\n\n  if (typeof window === 'undefined' && typeof process !== 'undefined') {\n    TWEEN.now = function () {\n      var time = process.hrtime(); // Convert [seconds, nanoseconds] to milliseconds.\n\n      return time[0] * 1000 + time[1] / 1000000;\n    };\n  } // In a browser, use window.performance.now if it is available.\n  else if (typeof window !== 'undefined' && window.performance !== undefined && window.performance.now !== undefined) {\n      // This must be bound, because directly assigning this function\n      // leads to an invocation exception in Chrome.\n      TWEEN.now = window.performance.now.bind(window.performance);\n    } // Use Date.now if it is available.\n    else if (Date.now !== undefined) {\n        TWEEN.now = Date.now;\n      } // Otherwise, use 'new Date().getTime()'.\n      else {\n          TWEEN.now = function () {\n            return new Date().getTime();\n          };\n        }\n\n  TWEEN.Tween = function (object) {\n    var _object = object;\n    var _valuesStart = {};\n    var _valuesEnd = {};\n    var _valuesStartRepeat = {};\n    var _duration = 1000;\n    var _repeat = 0;\n\n    var _repeatDelayTime;\n\n    var _yoyo = false;\n    var _isPlaying = false;\n    var _reversed = false;\n    var _delayTime = 0;\n    var _startTime = null;\n    var _easingFunction = TWEEN.Easing.Linear.None;\n    var _interpolationFunction = TWEEN.Interpolation.Linear;\n    var _chainedTweens = [];\n    var _onStartCallback = null;\n    var _onStartCallbackFired = false;\n    var _onUpdateCallback = null;\n    var _onCompleteCallback = null;\n    var _onStopCallback = null;\n\n    this.to = function (properties, duration) {\n      _valuesEnd = properties;\n\n      if (duration !== undefined) {\n        _duration = duration;\n      }\n\n      return this;\n    };\n\n    this.start = function (time) {\n      TWEEN.add(this);\n      _isPlaying = true;\n      _onStartCallbackFired = false;\n      _startTime = time !== undefined ? time : TWEEN.now();\n      _startTime += _delayTime;\n\n      for (var property in _valuesEnd) {\n        // Check if an Array was provided as property value\n        if (_valuesEnd[property] instanceof Array) {\n          if (_valuesEnd[property].length === 0) {\n            continue;\n          } // Create a local copy of the Array with the start value at the front\n\n\n          _valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);\n        } // If `to()` specifies a property that doesn't exist in the source object,\n        // we should not set that property in the object\n\n\n        if (_object[property] === undefined) {\n          continue;\n        } // Save the starting value.\n\n\n        _valuesStart[property] = _object[property];\n\n        if (_valuesStart[property] instanceof Array === false) {\n          _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n        }\n\n        _valuesStartRepeat[property] = _valuesStart[property] || 0;\n      }\n\n      return this;\n    };\n\n    this.stop = function () {\n      if (!_isPlaying) {\n        return this;\n      }\n\n      TWEEN.remove(this);\n      _isPlaying = false;\n\n      if (_onStopCallback !== null) {\n        _onStopCallback.call(_object, _object);\n      }\n\n      this.stopChainedTweens();\n      return this;\n    };\n\n    this.end = function () {\n      this.update(_startTime + _duration);\n      return this;\n    };\n\n    this.stopChainedTweens = function () {\n      for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n        _chainedTweens[i].stop();\n      }\n    };\n\n    this.delay = function (amount) {\n      _delayTime = amount;\n      return this;\n    };\n\n    this.repeat = function (times) {\n      _repeat = times;\n      return this;\n    };\n\n    this.repeatDelay = function (amount) {\n      _repeatDelayTime = amount;\n      return this;\n    };\n\n    this.yoyo = function (yoyo) {\n      _yoyo = yoyo;\n      return this;\n    };\n\n    this.easing = function (easing) {\n      _easingFunction = easing;\n      return this;\n    };\n\n    this.interpolation = function (interpolation) {\n      _interpolationFunction = interpolation;\n      return this;\n    };\n\n    this.chain = function () {\n      _chainedTweens = arguments;\n      return this;\n    };\n\n    this.onStart = function (callback) {\n      _onStartCallback = callback;\n      return this;\n    };\n\n    this.onUpdate = function (callback) {\n      _onUpdateCallback = callback;\n      return this;\n    };\n\n    this.onComplete = function (callback) {\n      _onCompleteCallback = callback;\n      return this;\n    };\n\n    this.onStop = function (callback) {\n      _onStopCallback = callback;\n      return this;\n    };\n\n    this.update = function (time) {\n      var property;\n      var elapsed;\n      var value;\n\n      if (time < _startTime) {\n        return true;\n      }\n\n      if (_onStartCallbackFired === false) {\n        if (_onStartCallback !== null) {\n          _onStartCallback.call(_object, _object);\n        }\n\n        _onStartCallbackFired = true;\n      }\n\n      elapsed = (time - _startTime) / _duration;\n      elapsed = elapsed > 1 ? 1 : elapsed;\n      value = _easingFunction(elapsed);\n\n      for (property in _valuesEnd) {\n        // Don't update properties that do not exist in the source object\n        if (_valuesStart[property] === undefined) {\n          continue;\n        }\n\n        var start = _valuesStart[property] || 0;\n        var end = _valuesEnd[property];\n\n        if (end instanceof Array) {\n          _object[property] = _interpolationFunction(end, value);\n        } else {\n          // Parses relative end values with start as base (e.g.: +10, -3)\n          if (typeof end === 'string') {\n            if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n              end = start + parseFloat(end);\n            } else {\n              end = parseFloat(end);\n            }\n          } // Protect against non numeric properties.\n\n\n          if (typeof end === 'number') {\n            _object[property] = start + (end - start) * value;\n          }\n        }\n      }\n\n      if (_onUpdateCallback !== null) {\n        _onUpdateCallback.call(_object, value);\n      }\n\n      if (elapsed === 1) {\n        if (_repeat > 0) {\n          if (isFinite(_repeat)) {\n            _repeat--;\n          } // Reassign starting values, restart by making startTime = now\n\n\n          for (property in _valuesStartRepeat) {\n            if (typeof _valuesEnd[property] === 'string') {\n              _valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property]);\n            }\n\n            if (_yoyo) {\n              var tmp = _valuesStartRepeat[property];\n              _valuesStartRepeat[property] = _valuesEnd[property];\n              _valuesEnd[property] = tmp;\n            }\n\n            _valuesStart[property] = _valuesStartRepeat[property];\n          }\n\n          if (_yoyo) {\n            _reversed = !_reversed;\n          }\n\n          if (_repeatDelayTime !== undefined) {\n            _startTime = time + _repeatDelayTime;\n          } else {\n            _startTime = time + _delayTime;\n          }\n\n          return true;\n        } else {\n          if (_onCompleteCallback !== null) {\n            _onCompleteCallback.call(_object, _object);\n          }\n\n          for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {\n            // Make the chained tweens start exactly at the time they should,\n            // even if the `update()` method was called way past the duration of the tween\n            _chainedTweens[i].start(_startTime + _duration);\n          }\n\n          return false;\n        }\n      }\n\n      return true;\n    };\n  };\n\n  TWEEN.Easing = {\n    Linear: {\n      None: function None(k) {\n        return k;\n      }\n    },\n    Quadratic: {\n      In: function In(k) {\n        return k * k;\n      },\n      Out: function Out(k) {\n        return k * (2 - k);\n      },\n      InOut: function InOut(k) {\n        if ((k *= 2) < 1) {\n          return 0.5 * k * k;\n        }\n\n        return -0.5 * (--k * (k - 2) - 1);\n      }\n    },\n    Cubic: {\n      In: function In(k) {\n        return k * k * k;\n      },\n      Out: function Out(k) {\n        return --k * k * k + 1;\n      },\n      InOut: function InOut(k) {\n        if ((k *= 2) < 1) {\n          return 0.5 * k * k * k;\n        }\n\n        return 0.5 * ((k -= 2) * k * k + 2);\n      }\n    },\n    Quartic: {\n      In: function In(k) {\n        return k * k * k * k;\n      },\n      Out: function Out(k) {\n        return 1 - --k * k * k * k;\n      },\n      InOut: function InOut(k) {\n        if ((k *= 2) < 1) {\n          return 0.5 * k * k * k * k;\n        }\n\n        return -0.5 * ((k -= 2) * k * k * k - 2);\n      }\n    },\n    Quintic: {\n      In: function In(k) {\n        return k * k * k * k * k;\n      },\n      Out: function Out(k) {\n        return --k * k * k * k * k + 1;\n      },\n      InOut: function InOut(k) {\n        if ((k *= 2) < 1) {\n          return 0.5 * k * k * k * k * k;\n        }\n\n        return 0.5 * ((k -= 2) * k * k * k * k + 2);\n      }\n    },\n    Sinusoidal: {\n      In: function In(k) {\n        return 1 - Math.cos(k * Math.PI / 2);\n      },\n      Out: function Out(k) {\n        return Math.sin(k * Math.PI / 2);\n      },\n      InOut: function InOut(k) {\n        return 0.5 * (1 - Math.cos(Math.PI * k));\n      }\n    },\n    Exponential: {\n      In: function In(k) {\n        return k === 0 ? 0 : Math.pow(1024, k - 1);\n      },\n      Out: function Out(k) {\n        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n      },\n      InOut: function InOut(k) {\n        if (k === 0) {\n          return 0;\n        }\n\n        if (k === 1) {\n          return 1;\n        }\n\n        if ((k *= 2) < 1) {\n          return 0.5 * Math.pow(1024, k - 1);\n        }\n\n        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n      }\n    },\n    Circular: {\n      In: function In(k) {\n        return 1 - Math.sqrt(1 - k * k);\n      },\n      Out: function Out(k) {\n        return Math.sqrt(1 - --k * k);\n      },\n      InOut: function InOut(k) {\n        if ((k *= 2) < 1) {\n          return -0.5 * (Math.sqrt(1 - k * k) - 1);\n        }\n\n        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n      }\n    },\n    Elastic: {\n      In: function In(k) {\n        if (k === 0) {\n          return 0;\n        }\n\n        if (k === 1) {\n          return 1;\n        }\n\n        return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n      },\n      Out: function Out(k) {\n        if (k === 0) {\n          return 0;\n        }\n\n        if (k === 1) {\n          return 1;\n        }\n\n        return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n      },\n      InOut: function InOut(k) {\n        if (k === 0) {\n          return 0;\n        }\n\n        if (k === 1) {\n          return 1;\n        }\n\n        k *= 2;\n\n        if (k < 1) {\n          return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n        }\n\n        return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n      }\n    },\n    Back: {\n      In: function In(k) {\n        var s = 1.70158;\n        return k * k * ((s + 1) * k - s);\n      },\n      Out: function Out(k) {\n        var s = 1.70158;\n        return --k * k * ((s + 1) * k + s) + 1;\n      },\n      InOut: function InOut(k) {\n        var s = 1.70158 * 1.525;\n\n        if ((k *= 2) < 1) {\n          return 0.5 * (k * k * ((s + 1) * k - s));\n        }\n\n        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n      }\n    },\n    Bounce: {\n      In: function In(k) {\n        return 1 - TWEEN.Easing.Bounce.Out(1 - k);\n      },\n      Out: function Out(k) {\n        if (k < 1 / 2.75) {\n          return 7.5625 * k * k;\n        } else if (k < 2 / 2.75) {\n          return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;\n        } else if (k < 2.5 / 2.75) {\n          return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;\n        } else {\n          return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;\n        }\n      },\n      InOut: function InOut(k) {\n        if (k < 0.5) {\n          return TWEEN.Easing.Bounce.In(k * 2) * 0.5;\n        }\n\n        return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n      }\n    }\n  };\n  TWEEN.Interpolation = {\n    Linear: function Linear(v, k) {\n      var m = v.length - 1;\n      var f = m * k;\n      var i = Math.floor(f);\n      var fn = TWEEN.Interpolation.Utils.Linear;\n\n      if (k < 0) {\n        return fn(v[0], v[1], f);\n      }\n\n      if (k > 1) {\n        return fn(v[m], v[m - 1], m - f);\n      }\n\n      return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function Bezier(v, k) {\n      var b = 0;\n      var n = v.length - 1;\n      var pw = Math.pow;\n      var bn = TWEEN.Interpolation.Utils.Bernstein;\n\n      for (var i = 0; i <= n; i++) {\n        b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n      }\n\n      return b;\n    },\n    CatmullRom: function CatmullRom(v, k) {\n      var m = v.length - 1;\n      var f = m * k;\n      var i = Math.floor(f);\n      var fn = TWEEN.Interpolation.Utils.CatmullRom;\n\n      if (v[0] === v[m]) {\n        if (k < 0) {\n          i = Math.floor(f = m * (1 + k));\n        }\n\n        return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n      } else {\n        if (k < 0) {\n          return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n        }\n\n        if (k > 1) {\n          return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n        }\n\n        return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n      }\n    },\n    Utils: {\n      Linear: function Linear(p0, p1, t) {\n        return (p1 - p0) * t + p0;\n      },\n      Bernstein: function Bernstein(n, i) {\n        var fc = TWEEN.Interpolation.Utils.Factorial;\n        return fc(n) / fc(i) / fc(n - i);\n      },\n      Factorial: function () {\n        var a = [1];\n        return function (n) {\n          var s = 1;\n\n          if (a[n]) {\n            return a[n];\n          }\n\n          for (var i = n; i > 1; i--) {\n            s *= i;\n          }\n\n          a[n] = s;\n          return s;\n        };\n      }(),\n      CatmullRom: function CatmullRom(p0, p1, p2, p3, t) {\n        var v0 = (p2 - p0) * 0.5;\n        var v1 = (p3 - p1) * 0.5;\n        var t2 = t * t;\n        var t3 = t * t2;\n        return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n      }\n    }\n  };\n  /**\n   * 根据2点获取角度\n   * @param Array [123, 23] 点1\n   * @param Array [123, 23] 点2\n   * @return angle 角度,不是弧度\n   */\n\n  function getAngle(start, end) {\n    var diff_x = end[0] - start[0];\n    var diff_y = end[1] - start[1];\n    var deg = 360 * Math.atan(diff_y / diff_x) / (2 * Math.PI);\n\n    if (end[0] < start[0]) {\n      deg = deg + 180;\n    }\n\n    return deg;\n  }\n  /**\n   * 绘制沿线箭头\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var imageCache = {};\n  var object = {\n    draw: function draw(context, dataSet, options) {\n      var imageCacheKey = 'http://huiyan.baidu.com/github/tools/gis-drawing/static/images/direction.png';\n\n      if (options.arrow && options.arrow.url) {\n        imageCacheKey = options.arrow.url;\n      }\n\n      if (!imageCache[imageCacheKey]) {\n        imageCache[imageCacheKey] = null;\n      }\n\n      var directionImage = imageCache[imageCacheKey];\n\n      if (!directionImage) {\n        var args = Array.prototype.slice.call(arguments);\n        var image = new Image();\n\n        image.onload = function () {\n          imageCache[imageCacheKey] = image;\n          object.draw.apply(null, args);\n        };\n\n        image.src = imageCacheKey;\n        return;\n      }\n\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet; // console.log('xxxx',options)\n\n      context.save();\n\n      for (var key in options) {\n        context[key] = options[key];\n      }\n\n      var points = [];\n      var preCoordinate = null;\n\n      for (var i = 0, len = data.length; i < len; i++) {\n        var item = data[i];\n        context.save();\n\n        if (item.fillStyle || item._fillStyle) {\n          context.fillStyle = item.fillStyle || item._fillStyle;\n        }\n\n        if (item.strokeStyle || item._strokeStyle) {\n          context.strokeStyle = item.strokeStyle || item._strokeStyle;\n        }\n\n        var type = item.geometry.type;\n        context.beginPath();\n\n        if (type === 'LineString') {\n          var coordinates = item.geometry._coordinates || item.geometry.coordinates;\n          var interval = options.arrow.interval !== undefined ? options.arrow.interval : 1;\n\n          for (var j = 0; j < coordinates.length; j += interval) {\n            if (coordinates[j] && coordinates[j + 1]) {\n              var coordinate = coordinates[j];\n\n              if (preCoordinate && getDistance(coordinate, preCoordinate) < 30) {\n                continue;\n              }\n\n              context.save();\n              var angle = getAngle(coordinates[j], coordinates[j + 1]);\n              context.translate(coordinate[0], coordinate[1]);\n              context.rotate(angle * Math.PI / 180);\n              context.drawImage(directionImage, -directionImage.width / 2 / 2, -directionImage.height / 2 / 2, directionImage.width / 2, directionImage.height / 2);\n              context.restore();\n              points.push(coordinate);\n              preCoordinate = coordinate;\n            }\n          }\n        }\n\n        context.restore();\n      }\n\n      context.restore();\n    }\n  };\n\n  function getDistance(coordinateA, coordinateB) {\n    return Math.sqrt(Math.pow(coordinateA[0] - coordinateB[0], 2) + Math.pow(coordinateA[1] - coordinateB[1], 2));\n  }\n  /**\n   * @author Mofei Zhu<mapv@zhuwenlong.com>\n   * This file is to draw text\n   */\n\n\n  var drawClip = {\n    draw: function draw(context, dataSet, options) {\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n      context.save();\n      context.fillStyle = options.fillStyle || 'rgba(0, 0, 0, 0.5)';\n      context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n\n      options.multiPolygonDraw = function () {\n        context.save();\n        context.clip();\n        clear(context);\n        context.restore();\n      };\n\n      for (var i = 0, len = data.length; i < len; i++) {\n        context.beginPath();\n        pathSimple.drawDataSet(context, [data[i]], options);\n        context.save();\n        context.clip();\n        clear(context);\n        context.restore();\n      }\n\n      context.restore();\n    }\n  };\n  /**\n   * @author Mofei Zhu<mapv@zhuwenlong.com>\n   * This file is to draw text\n   */\n\n  var drawText = {\n    draw: function draw(context, dataSet, options) {\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n      context.save(); // set from options\n\n      for (var key in options) {\n        context[key] = options[key];\n      }\n\n      var offset = options.offset || {\n        x: 0,\n        y: 0\n      };\n      var rects = [];\n      var size = options._size || options.size;\n\n      if (size) {\n        context.font = \"bold \" + size + \"px Arial\";\n      } else {\n        size = 12;\n      }\n\n      var textKey = options.textKey || 'text';\n\n      if (!options.textAlign) {\n        context.textAlign = 'center';\n      }\n\n      if (!options.textBaseline) {\n        context.textBaseline = 'middle';\n      }\n\n      if (options.avoid) {\n        // 标注避让\n        for (var i = 0, len = data.length; i < len; i++) {\n          var coordinates = data[i].geometry._coordinates || data[i].geometry.coordinates;\n          var x = coordinates[0] + offset.x;\n          var y = coordinates[1] + offset.y;\n          var text = data[i][textKey];\n          var textWidth = context.measureText(text).width; // 根据文本宽度和高度调整x，y位置，使得绘制文本时候坐标点在文本中心点，这个计算出的是左上角坐标\n\n          var px = x - textWidth / 2;\n          var py = y - size / 2;\n          var rect = {\n            sw: {\n              x: px,\n              y: py + size\n            },\n            ne: {\n              x: px + textWidth,\n              y: py\n            }\n          };\n\n          if (!hasOverlay(rects, rect)) {\n            rects.push(rect);\n            px = px + textWidth / 2;\n            py = py + size / 2;\n            context.fillText(text, px, py);\n          }\n        }\n      } else {\n        for (var i = 0, len = data.length; i < len; i++) {\n          var coordinates = data[i].geometry._coordinates || data[i].geometry.coordinates;\n          var x = coordinates[0] + offset.x;\n          var y = coordinates[1] + offset.y;\n          var text = data[i][textKey];\n          context.fillText(text, x, y);\n        }\n      }\n\n      context.restore();\n    }\n    /*\n     *  当前文字区域和已有的文字区域是否有重叠部分\n     */\n\n  };\n\n  function hasOverlay(rects, overlay) {\n    for (var i = 0; i < rects.length; i++) {\n      if (isRectOverlay(rects[i], overlay)) {\n        return true;\n      }\n    }\n\n    return false;\n  } //判断2个矩形是否有重叠部分\n\n\n  function isRectOverlay(rect1, rect2) {\n    //minx、miny 2个矩形右下角最小的x和y\n    //maxx、maxy 2个矩形左上角最大的x和y\n    var minx = Math.min(rect1.ne.x, rect2.ne.x);\n    var miny = Math.min(rect1.sw.y, rect2.sw.y);\n    var maxx = Math.max(rect1.sw.x, rect2.sw.x);\n    var maxy = Math.max(rect1.ne.y, rect2.ne.y);\n\n    if (minx > maxx && miny > maxy) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @author Mofei Zhu<mapv@zhuwenlong.com>\n   * This file is to draw text\n   */\n\n\n  var drawIcon = {\n    draw: function draw(context, dataSet, options) {\n      var data = dataSet instanceof DataSet ? dataSet.get() : dataSet;\n      context.fillStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      var offset = options.offset || {\n        x: 0,\n        y: 0\n      }; // set from options\n      // for (var key in options) {\n      //     context[key] = options[key];\n      // }\n      // console.log(data)\n\n      for (var i = 0, len = data.length; i < len; i++) {\n        if (data[i].geometry) {\n          var deg = data[i].deg || options.deg;\n          var icon = data[i].icon || options.icon;\n          var coordinates = data[i].geometry._coordinates || data[i].geometry.coordinates;\n          var x = coordinates[0];\n          var y = coordinates[1];\n\n          if (deg) {\n            context.save();\n            context.translate(x, y);\n            context.rotate(deg * Math.PI / 180);\n            context.translate(-x, -y);\n          }\n\n          var width = options._width || options.width || icon.width;\n          var height = options._height || options.height || icon.height;\n          x = x - width / 2 + offset.x;\n          y = y - height / 2 + offset.y;\n\n          if (options.sx && options.sy && options.swidth && options.sheight && options.width && options.height) {\n            context.drawImage(icon, options.sx, options.sy, options.swidth, options.sheight, x, y, width, height);\n          } else if (options.width && options.height) {\n            context.drawImage(icon, x, y, width, height);\n          } else {\n            context.drawImage(icon, x, y);\n          }\n\n          if (deg) {\n            context.restore();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  if (typeof window !== 'undefined') {\n    requestAnimationFrame(animate);\n  }\n\n  function animate(time) {\n    requestAnimationFrame(animate);\n    TWEEN.update(time);\n  }\n\n  var BaseLayer = function () {\n    function BaseLayer(map, dataSet, options) {\n      classCallCheck(this, BaseLayer);\n\n      if (!(dataSet instanceof DataSet)) {\n        dataSet = new DataSet(dataSet);\n      }\n\n      this.dataSet = dataSet;\n      this.map = map;\n    }\n\n    createClass(BaseLayer, [{\n      key: \"getDefaultContextConfig\",\n      value: function getDefaultContextConfig() {\n        return {\n          globalAlpha: 1,\n          globalCompositeOperation: 'source-over',\n          imageSmoothingEnabled: true,\n          strokeStyle: '#000000',\n          fillStyle: '#000000',\n          shadowOffsetX: 0,\n          shadowOffsetY: 0,\n          shadowBlur: 0,\n          shadowColor: 'rgba(0, 0, 0, 0)',\n          lineWidth: 1,\n          lineCap: 'butt',\n          lineJoin: 'miter',\n          miterLimit: 10,\n          lineDashOffset: 0,\n          font: '10px sans-serif',\n          textAlign: 'start',\n          textBaseline: 'alphabetic'\n        };\n      }\n    }, {\n      key: \"initDataRange\",\n      value: function initDataRange(options) {\n        var self = this;\n        self.intensity = new Intensity({\n          maxSize: self.options.maxSize,\n          minSize: self.options.minSize,\n          gradient: self.options.gradient,\n          max: self.options.max || this.dataSet.getMax('count')\n        });\n        self.category = new Category(self.options.splitList);\n        self.choropleth = new Choropleth(self.options.splitList);\n\n        if (self.options.splitList === undefined) {\n          self.category.generateByDataSet(this.dataSet, self.options.color);\n        }\n\n        if (self.options.splitList === undefined) {\n          var min = self.options.min || this.dataSet.getMin('count');\n          var max = self.options.max || this.dataSet.getMax('count');\n          self.choropleth.generateByMinMax(min, max);\n        }\n      }\n    }, {\n      key: \"getLegend\",\n      value: function getLegend(options) {\n        var draw = this.options.draw;\n        var legend = null;\n        var self = this;\n\n        if (self.options.draw == 'intensity' || self.options.draw == 'heatmap') {\n          return this.intensity.getLegend(options);\n        } else if (self.options.draw == 'category') {\n          return this.category.getLegend(options);\n        }\n      }\n    }, {\n      key: \"processData\",\n      value: function processData(data) {\n        var self = this;\n        var draw = self.options.draw;\n\n        if (draw == 'bubble' || draw == 'intensity' || draw == 'category' || draw == 'choropleth' || draw == 'simple') {\n          for (var i = 0; i < data.length; i++) {\n            var item = data[i];\n\n            if (self.options.draw == 'bubble') {\n              data[i]._size = self.intensity.getSize(item.count);\n            } else {\n              data[i]._size = undefined;\n            }\n\n            var styleType = '_fillStyle';\n\n            if (data[i].geometry.type === 'LineString' || self.options.styleType === 'stroke') {\n              styleType = '_strokeStyle';\n            }\n\n            if (self.options.draw == 'intensity') {\n              data[i][styleType] = self.intensity.getColor(item.count);\n            } else if (self.options.draw == 'category') {\n              data[i][styleType] = self.category.get(item.count);\n            } else if (self.options.draw == 'choropleth') {\n              data[i][styleType] = self.choropleth.get(item.count);\n            }\n          }\n        }\n      }\n    }, {\n      key: \"isEnabledTime\",\n      value: function isEnabledTime() {\n        var animationOptions = this.options.animation;\n        var flag = animationOptions && !(animationOptions.enabled === false);\n        return flag;\n      }\n    }, {\n      key: \"argCheck\",\n      value: function argCheck(options) {\n        if (options.draw == 'heatmap') {\n          if (options.strokeStyle) {\n            console.warn('[heatmap] options.strokeStyle is discard, pleause use options.strength [eg: options.strength = 0.1]');\n          }\n        }\n      }\n    }, {\n      key: \"drawContext\",\n      value: function drawContext(context, dataSet, options, nwPixel) {\n        var self = this;\n\n        switch (self.options.draw) {\n          case 'heatmap':\n            drawHeatmap.draw(context, dataSet, self.options);\n            break;\n\n          case 'grid':\n          case 'honeycomb':\n            self.options.offset = {\n              x: nwPixel.x,\n              y: nwPixel.y\n            };\n\n            if (self.options.draw == 'grid') {\n              drawGrid.draw(context, dataSet, self.options);\n            } else {\n              drawHoneycomb.draw(context, dataSet, self.options);\n            }\n\n            break;\n\n          case 'text':\n            drawText.draw(context, dataSet, self.options);\n            break;\n\n          case 'icon':\n            drawIcon.draw(context, dataSet, self.options);\n            break;\n\n          case 'clip':\n            drawClip.draw(context, dataSet, self.options);\n            break;\n\n          default:\n            if (self.options.context == \"webgl\") {\n              webglDrawSimple.draw(self.canvasLayer.canvas.getContext('webgl'), dataSet, self.options);\n            } else {\n              drawSimple.draw(context, dataSet, self.options);\n            }\n\n        }\n\n        if (self.options.arrow && self.options.arrow.show !== false) {\n          object.draw(context, dataSet, self.options);\n        }\n      }\n    }, {\n      key: \"isPointInPath\",\n      value: function isPointInPath(context, pixel) {\n        var context = this.canvasLayer.canvas.getContext(this.context);\n        var data = this.dataSet.get();\n\n        for (var i = 0; i < data.length; i++) {\n          context.beginPath();\n          pathSimple.draw(context, data[i], this.options);\n          var x = pixel.x * this.canvasLayer.devicePixelRatio;\n          var y = pixel.y * this.canvasLayer.devicePixelRatio;\n          var geoType = data[i].geometry && data[i].geometry.type;\n\n          if (geoType.indexOf('LineString') > -1) {\n            if (context.isPointInStroke && context.isPointInStroke(x, y)) {\n              return data[i];\n            }\n          } else {\n            if (context.isPointInPath(x, y)) {\n              return data[i];\n            }\n          }\n        }\n      }\n    }, {\n      key: \"clickEvent\",\n      value: function clickEvent(pixel, e) {\n        if (!this.options.methods) {\n          return;\n        }\n\n        var dataItem = this.isPointInPath(this.getContext(), pixel);\n\n        if (dataItem) {\n          this.options.methods.click(dataItem, e);\n        } else {\n          this.options.methods.click(null, e);\n        }\n      }\n    }, {\n      key: \"mousemoveEvent\",\n      value: function mousemoveEvent(pixel, e) {\n        if (!this.options.methods) {\n          return;\n        }\n\n        var dataItem = this.isPointInPath(this.getContext(), pixel);\n\n        if (dataItem) {\n          this.options.methods.mousemove(dataItem, e);\n        } else {\n          this.options.methods.mousemove(null, e);\n        }\n      }\n      /**\n       * obj.options\n       */\n\n    }, {\n      key: \"update\",\n      value: function update(obj, isDraw) {\n        var self = this;\n        var _options = obj.options;\n        var options = self.options;\n\n        for (var i in _options) {\n          options[i] = _options[i];\n        }\n\n        self.init(options);\n\n        if (isDraw !== false) {\n          self.draw();\n        }\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        var self = this;\n        self.dataSet.reset(); // console.log('xxx1')\n\n        self.init(options); // console.log('xxx')\n\n        self.draw();\n      }\n    }, {\n      key: \"set\",\n      value: function set$$1(obj) {\n        var self = this;\n        var ctx = this.getContext();\n        var conf = this.getDefaultContextConfig();\n\n        for (var i in conf) {\n          ctx[i] = conf[i];\n        }\n\n        self.init(obj.options);\n        self.draw();\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.unbindEvent();\n        this.hide();\n      }\n    }, {\n      key: \"initAnimator\",\n      value: function initAnimator() {\n        var self = this;\n        var animationOptions = self.options.animation;\n\n        if (self.options.draw == 'time' || self.isEnabledTime()) {\n          if (!animationOptions.stepsRange) {\n            animationOptions.stepsRange = {\n              start: this.dataSet.getMin('time') || 0,\n              end: this.dataSet.getMax('time') || 0\n            };\n          }\n\n          this.steps = {\n            step: animationOptions.stepsRange.start\n          };\n          self.animator = new TWEEN.Tween(this.steps).onUpdate(function () {\n            self._canvasUpdate(this.step);\n          }).repeat(Infinity);\n          this.addAnimatorEvent();\n          var duration = animationOptions.duration * 1000 || 5000;\n          self.animator.to({\n            step: animationOptions.stepsRange.end\n          }, duration);\n          self.animator.start();\n        } else {\n          self.animator && self.animator.stop();\n        }\n      }\n    }, {\n      key: \"addAnimatorEvent\",\n      value: function addAnimatorEvent() {}\n    }, {\n      key: \"animatorMovestartEvent\",\n      value: function animatorMovestartEvent() {\n        var animationOptions = this.options.animation;\n\n        if (this.isEnabledTime() && this.animator) {\n          this.steps.step = animationOptions.stepsRange.start;\n          this.animator.stop();\n        }\n      }\n    }, {\n      key: \"animatorMoveendEvent\",\n      value: function animatorMoveendEvent() {\n        if (this.isEnabledTime() && this.animator) {\n          this.animator.start();\n        }\n      }\n    }]);\n    return BaseLayer;\n  }();\n\n  var AnimationLayer = function (_BaseLayer) {\n    inherits(AnimationLayer, _BaseLayer);\n\n    function AnimationLayer(map, dataSet, options) {\n      classCallCheck(this, AnimationLayer);\n\n      var _this = possibleConstructorReturn(this, (AnimationLayer.__proto__ || Object.getPrototypeOf(AnimationLayer)).call(this, map, dataSet, options));\n\n      _this.map = map;\n      _this.options = options || {};\n      _this.dataSet = dataSet;\n      var canvasLayer = new CanvasLayer({\n        map: map,\n        zIndex: _this.options.zIndex,\n        update: _this._canvasUpdate.bind(_this)\n      });\n\n      _this.init(_this.options);\n\n      _this.canvasLayer = canvasLayer;\n\n      _this.transferToMercator();\n\n      var self = _this;\n      dataSet.on('change', function () {\n        self.transferToMercator();\n        canvasLayer.draw();\n      });\n      _this.ctx = canvasLayer.canvas.getContext('2d');\n\n      _this.start();\n\n      return _this;\n    }\n\n    createClass(AnimationLayer, [{\n      key: \"draw\",\n      value: function draw() {\n        this.canvasLayer.draw();\n      }\n    }, {\n      key: \"init\",\n      value: function init(options) {\n        var self = this;\n        self.options = options;\n        this.initDataRange(options);\n        this.context = self.options.context || '2d';\n\n        if (self.options.zIndex) {\n          this.canvasLayer && this.canvasLayer.setZIndex(self.options.zIndex);\n        }\n\n        if (self.options.max) {\n          this.intensity.setMax(self.options.max);\n        }\n\n        if (self.options.min) {\n          this.intensity.setMin(self.options.min);\n        }\n\n        this.initAnimator();\n      } // 经纬度左边转换为墨卡托坐标\n\n    }, {\n      key: \"transferToMercator\",\n      value: function transferToMercator() {\n        var projection = this.map.getMapType().getProjection();\n\n        if (this.options.coordType !== 'bd09mc') {\n          var data = this.dataSet.get();\n          data = this.dataSet.transferCoordinate(data, function (coordinates) {\n            var pixel = projection.lngLatToPoint({\n              lng: coordinates[0],\n              lat: coordinates[1]\n            });\n            return [pixel.x, pixel.y];\n          }, 'coordinates', 'coordinates_mercator');\n\n          this.dataSet._set(data);\n        }\n      }\n    }, {\n      key: \"_canvasUpdate\",\n      value: function _canvasUpdate() {\n        var ctx = this.ctx;\n\n        if (!ctx) {\n          return;\n        } //clear(ctx);\n\n\n        var map = this.map;\n        var zoomUnit = Math.pow(2, 18 - map.getZoom());\n        var projection = map.getMapType().getProjection();\n        var mcCenter = projection.lngLatToPoint(map.getCenter());\n        var nwMc = new BMap.Pixel(mcCenter.x - map.getSize().width / 2 * zoomUnit, mcCenter.y + map.getSize().height / 2 * zoomUnit); //左上角墨卡托坐标\n\n        clear(ctx);\n        var dataGetOptions = {\n          fromColumn: this.options.coordType == 'bd09mc' ? 'coordinates' : 'coordinates_mercator',\n          transferCoordinate: function transferCoordinate(coordinate) {\n            if (!coordinate) {\n              return;\n            }\n\n            var x = (coordinate[0] - nwMc.x) / zoomUnit;\n            var y = (nwMc.y - coordinate[1]) / zoomUnit;\n            return [x, y];\n          }\n        };\n        this.data = this.dataSet.get(dataGetOptions);\n        this.processData(this.data);\n        this.drawAnimation();\n      }\n    }, {\n      key: \"drawAnimation\",\n      value: function drawAnimation() {\n        var ctx = this.ctx;\n        var data = this.data;\n\n        if (!data) {\n          return;\n        }\n\n        ctx.save();\n        ctx.globalCompositeOperation = 'destination-out';\n        ctx.fillStyle = 'rgba(0, 0, 0, .1)';\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ctx.restore();\n        ctx.save();\n\n        if (this.options.shadowColor) {\n          ctx.shadowColor = this.options.shadowColor;\n        }\n\n        if (this.options.shadowBlur) {\n          ctx.shadowBlur = this.options.shadowBlur;\n        }\n\n        if (this.options.globalAlpha) {\n          ctx.globalAlpha = this.options.globalAlpha;\n        }\n\n        if (this.options.globalCompositeOperation) {\n          ctx.globalCompositeOperation = this.options.globalCompositeOperation;\n        }\n\n        var options = this.options;\n\n        for (var i = 0; i < data.length; i++) {\n          if (data[i].geometry.type === 'Point') {\n            ctx.beginPath();\n            var maxSize = data[i].size || this.options.size;\n            var minSize = data[i].minSize || this.options.minSize || 0;\n\n            if (data[i]._size === undefined) {\n              data[i]._size = minSize;\n            }\n\n            ctx.arc(data[i].geometry._coordinates[0], data[i].geometry._coordinates[1], data[i]._size, 0, Math.PI * 2, true);\n            ctx.closePath();\n            data[i]._size++;\n\n            if (data[i]._size > maxSize) {\n              data[i]._size = minSize;\n            }\n\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = data[i].strokeStyle || data[i]._strokeStyle || options.strokeStyle || 'yellow';\n            ctx.stroke();\n            var fillStyle = data[i].fillStyle || data[i]._fillStyle || options.fillStyle;\n\n            if (fillStyle) {\n              ctx.fillStyle = fillStyle;\n              ctx.fill();\n            }\n          } else if (data[i].geometry.type === 'LineString') {\n            ctx.beginPath();\n            var size = data[i].size || this.options.size || 5;\n            var minSize = data[i].minSize || this.options.minSize || 0;\n\n            if (data[i]._index === undefined) {\n              data[i]._index = 0;\n            }\n\n            var index = data[i]._index;\n            ctx.arc(data[i].geometry._coordinates[index][0], data[i].geometry._coordinates[index][1], size, 0, Math.PI * 2, true);\n            ctx.closePath();\n            data[i]._index++;\n\n            if (data[i]._index >= data[i].geometry._coordinates.length) {\n              data[i]._index = 0;\n            }\n\n            var strokeStyle = data[i].strokeStyle || options.strokeStyle;\n            var fillStyle = data[i].fillStyle || options.fillStyle || 'yellow';\n            ctx.fillStyle = fillStyle;\n            ctx.fill();\n\n            if (strokeStyle && options.lineWidth) {\n              ctx.lineWidth = options.lineWidth || 1;\n              ctx.strokeStyle = strokeStyle;\n              ctx.stroke();\n            }\n          }\n        }\n\n        ctx.restore();\n      }\n    }, {\n      key: \"animate\",\n      value: function animate() {\n        this.drawAnimation();\n        var animateTime = this.options.animateTime || 100;\n        this.timeout = setTimeout(this.animate.bind(this), animateTime);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        this.stop();\n        this.animate();\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        clearTimeout(this.timeout);\n      }\n    }, {\n      key: \"unbindEvent\",\n      value: function unbindEvent() {}\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.canvasLayer.hide();\n        this.stop();\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.start();\n      }\n    }]);\n    return AnimationLayer;\n  }(BaseLayer);\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var Layer = function (_BaseLayer) {\n    inherits(Layer, _BaseLayer);\n\n    function Layer(map, dataSet, options) {\n      classCallCheck(this, Layer);\n\n      var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, map, dataSet, options));\n\n      var self = _this;\n      var data = null;\n      options = options || {};\n      _this.clickEvent = _this.clickEvent.bind(_this);\n      _this.mousemoveEvent = _this.mousemoveEvent.bind(_this);\n      self.init(options);\n      self.argCheck(options);\n      self.transferToMercator();\n      var canvasLayer = _this.canvasLayer = new CanvasLayer({\n        map: map,\n        context: _this.context,\n        paneName: options.paneName,\n        mixBlendMode: options.mixBlendMode,\n        enableMassClear: options.enableMassClear,\n        zIndex: options.zIndex,\n        update: function update() {\n          self._canvasUpdate();\n        }\n      });\n      dataSet.on('change', function () {\n        self.transferToMercator();\n        canvasLayer.draw();\n      });\n      return _this;\n    }\n\n    createClass(Layer, [{\n      key: \"clickEvent\",\n      value: function clickEvent(e) {\n        var pixel = e.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"clickEvent\", this).call(this, pixel, e);\n      }\n    }, {\n      key: \"mousemoveEvent\",\n      value: function mousemoveEvent(e) {\n        var pixel = e.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"mousemoveEvent\", this).call(this, pixel, e);\n      }\n    }, {\n      key: \"bindEvent\",\n      value: function bindEvent(e) {\n        this.unbindEvent();\n        var map = this.map;\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.setDefaultCursor(\"default\");\n            map.addEventListener('click', this.clickEvent);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.addEventListener('mousemove', this.mousemoveEvent);\n          }\n        }\n      }\n    }, {\n      key: \"unbindEvent\",\n      value: function unbindEvent(e) {\n        var map = this.map;\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.removeEventListener('click', this.clickEvent);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.removeEventListener('mousemove', this.mousemoveEvent);\n          }\n        }\n      } // 经纬度左边转换为墨卡托坐标\n\n    }, {\n      key: \"transferToMercator\",\n      value: function transferToMercator() {\n        var projection = this.map.getMapType().getProjection();\n\n        if (this.options.coordType !== 'bd09mc') {\n          var data = this.dataSet.get();\n          data = this.dataSet.transferCoordinate(data, function (coordinates) {\n            if (coordinates[0] < -180 || coordinates[0] > 180 || coordinates[1] < -90 || coordinates[1] > 90) {\n              return coordinates;\n            } else {\n              var pixel = projection.lngLatToPoint({\n                lng: coordinates[0],\n                lat: coordinates[1]\n              });\n              return [pixel.x, pixel.y];\n            }\n          }, 'coordinates', 'coordinates_mercator');\n\n          this.dataSet._set(data);\n        }\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.canvasLayer.canvas.getContext(this.context);\n      }\n    }, {\n      key: \"_canvasUpdate\",\n      value: function _canvasUpdate(time) {\n        if (!this.canvasLayer) {\n          return;\n        }\n\n        var self = this;\n        var animationOptions = self.options.animation;\n        var map = this.canvasLayer._map;\n        var zoomUnit = Math.pow(2, 18 - map.getZoom());\n        var projection = map.getMapType().getProjection();\n        var mcCenter = projection.lngLatToPoint(map.getCenter());\n        var nwMc = new BMap.Pixel(mcCenter.x - map.getSize().width / 2 * zoomUnit, mcCenter.y + map.getSize().height / 2 * zoomUnit); //左上角墨卡托坐标\n\n        var context = this.getContext();\n\n        if (self.isEnabledTime()) {\n          if (time === undefined) {\n            clear(context);\n            return;\n          }\n\n          if (this.context == '2d') {\n            context.save();\n            context.globalCompositeOperation = 'destination-out';\n            context.fillStyle = 'rgba(0, 0, 0, .1)';\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n            context.restore();\n          }\n        } else {\n          clear(context);\n        }\n\n        if (this.context == '2d') {\n          for (var key in self.options) {\n            context[key] = self.options[key];\n          }\n        } else {\n          context.clear(context.COLOR_BUFFER_BIT);\n        }\n\n        if (self.options.minZoom && map.getZoom() < self.options.minZoom || self.options.maxZoom && map.getZoom() > self.options.maxZoom) {\n          return;\n        }\n\n        var scale = 1;\n\n        if (this.context != '2d') {\n          scale = this.canvasLayer.devicePixelRatio;\n        }\n\n        var dataGetOptions = {\n          fromColumn: self.options.coordType == 'bd09mc' ? 'coordinates' : 'coordinates_mercator',\n          transferCoordinate: function transferCoordinate(coordinate) {\n            var x = (coordinate[0] - nwMc.x) / zoomUnit * scale;\n            var y = (nwMc.y - coordinate[1]) / zoomUnit * scale;\n            return [x, y];\n          }\n        };\n\n        if (time !== undefined) {\n          dataGetOptions.filter = function (item) {\n            var trails = animationOptions.trails || 10;\n\n            if (time && item.time > time - trails && item.time < time) {\n              return true;\n            } else {\n              return false;\n            }\n          };\n        } // get data from data set\n\n\n        var data = self.dataSet.get(dataGetOptions);\n        this.processData(data);\n        var nwPixel = map.pointToPixel(new BMap.Point(0, 0));\n\n        if (self.options.unit == 'm') {\n          if (self.options.size) {\n            self.options._size = self.options.size / zoomUnit;\n          }\n\n          if (self.options.width) {\n            self.options._width = self.options.width / zoomUnit;\n          }\n\n          if (self.options.height) {\n            self.options._height = self.options.height / zoomUnit;\n          }\n        } else {\n          self.options._size = self.options.size;\n          self.options._height = self.options.height;\n          self.options._width = self.options.width;\n        }\n\n        this.drawContext(context, data, self.options, nwPixel); //console.timeEnd('draw');\n        //console.timeEnd('update')\n\n        self.options.updateCallback && self.options.updateCallback(time);\n      }\n    }, {\n      key: \"init\",\n      value: function init(options) {\n        var self = this;\n        self.options = options;\n        this.initDataRange(options);\n        this.context = self.options.context || '2d';\n\n        if (self.options.zIndex) {\n          this.canvasLayer && this.canvasLayer.setZIndex(self.options.zIndex);\n        }\n\n        if (self.options.max) {\n          this.intensity.setMax(self.options.max);\n        }\n\n        if (self.options.min) {\n          this.intensity.setMin(self.options.min);\n        }\n\n        this.initAnimator();\n        this.bindEvent();\n      }\n    }, {\n      key: \"addAnimatorEvent\",\n      value: function addAnimatorEvent() {\n        this.map.addEventListener('movestart', this.animatorMovestartEvent.bind(this));\n        this.map.addEventListener('moveend', this.animatorMoveendEvent.bind(this));\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.map.addOverlay(this.canvasLayer);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.map.removeOverlay(this.canvasLayer);\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        this.canvasLayer.draw();\n      }\n    }]);\n    return Layer;\n  }(BaseLayer);\n  /**\n   * Copyright 2012 Google Inc. All Rights Reserved.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   */\n\n  /**\n   * @fileoverview Extends OverlayView to provide a canvas \"Layer\".\n   * @author Brendan Kenny\n   */\n\n  /**\n   * A map layer that provides a canvas over the slippy map and a callback\n   * system for efficient animation. Requires canvas and CSS 2D transform\n   * support.\n   * @constructor\n   * @extends google.maps.OverlayView\n   * @param {CanvasLayerOptions=} opt_options Options to set in this CanvasLayer.\n   */\n\n\n  function CanvasLayer$2(opt_options) {\n    /**\n     * If true, canvas is in a map pane and the OverlayView is fully functional.\n     * See google.maps.OverlayView.onAdd for more information.\n     * @type {boolean}\n     * @private\n     */\n    this.isAdded_ = false;\n    /**\n     * If true, each update will immediately schedule the next.\n     * @type {boolean}\n     * @private\n     */\n\n    this.isAnimated_ = false;\n    /**\n     * The name of the MapPane in which this layer will be displayed.\n     * @type {string}\n     * @private\n     */\n\n    this.paneName_ = CanvasLayer$2.DEFAULT_PANE_NAME_;\n    /**\n     * A user-supplied function called whenever an update is required. Null or\n     * undefined if a callback is not provided.\n     * @type {?function=}\n     * @private\n     */\n\n    this.updateHandler_ = null;\n    /**\n     * A user-supplied function called whenever an update is required and the\n     * map has been resized since the last update. Null or undefined if a\n     * callback is not provided.\n     * @type {?function}\n     * @private\n     */\n\n    this.resizeHandler_ = null;\n    /**\n     * The LatLng coordinate of the top left of the current view of the map. Will\n     * be null when this.isAdded_ is false.\n     * @type {google.maps.LatLng}\n     * @private\n     */\n\n    this.topLeft_ = null;\n    /**\n     * The map-pan event listener. Will be null when this.isAdded_ is false. Will\n     * be null when this.isAdded_ is false.\n     * @type {?function}\n     * @private\n     */\n\n    this.centerListener_ = null;\n    /**\n     * The map-resize event listener. Will be null when this.isAdded_ is false.\n     * @type {?function}\n     * @private\n     */\n\n    this.resizeListener_ = null;\n    /**\n     * If true, the map size has changed and this.resizeHandler_ must be called\n     * on the next update.\n     * @type {boolean}\n     * @private\n     */\n\n    this.needsResize_ = true;\n    /**\n     * A browser-defined id for the currently requested callback. Null when no\n     * callback is queued.\n     * @type {?number}\n     * @private\n     */\n\n    this.requestAnimationFrameId_ = null;\n    var canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = 0;\n    canvas.style.left = 0;\n    canvas.style.pointerEvents = 'none';\n    /**\n     * The canvas element.\n     * @type {!HTMLCanvasElement}\n     */\n\n    this.canvas = canvas;\n    /**\n     * The CSS width of the canvas, which may be different than the width of the\n     * backing store.\n     * @private {number}\n     */\n\n    this.canvasCssWidth_ = 300;\n    /**\n     * The CSS height of the canvas, which may be different than the height of\n     * the backing store.\n     * @private {number}\n     */\n\n    this.canvasCssHeight_ = 150;\n    /**\n     * A value for scaling the CanvasLayer resolution relative to the CanvasLayer\n     * display size.\n     * @private {number}\n     */\n\n    this.resolutionScale_ = 1;\n    /**\n     * Simple bind for functions with no args for bind-less browsers (Safari).\n     * @param {Object} thisArg The this value used for the target function.\n     * @param {function} func The function to be bound.\n     */\n\n    function simpleBindShim(thisArg, func) {\n      return function () {\n        func.apply(thisArg);\n      };\n    }\n    /**\n     * A reference to this.repositionCanvas_ with this bound as its this value.\n     * @type {function}\n     * @private\n     */\n\n\n    this.repositionFunction_ = simpleBindShim(this, this.repositionCanvas_);\n    /**\n     * A reference to this.resize_ with this bound as its this value.\n     * @type {function}\n     * @private\n     */\n\n    this.resizeFunction_ = simpleBindShim(this, this.resize_);\n    /**\n     * A reference to this.update_ with this bound as its this value.\n     * @type {function}\n     * @private\n     */\n\n    this.requestUpdateFunction_ = simpleBindShim(this, this.update_); // set provided options, if any\n\n    if (opt_options) {\n      this.setOptions(opt_options);\n    }\n  }\n\n  var global$4 = typeof window === 'undefined' ? {} : window;\n\n  if (global$4.google && global$4.google.maps) {\n    CanvasLayer$2.prototype = new google.maps.OverlayView();\n    /**\n     * The default MapPane to contain the canvas.\n     * @type {string}\n     * @const\n     * @private\n     */\n\n    CanvasLayer$2.DEFAULT_PANE_NAME_ = 'overlayLayer';\n    /**\n     * Transform CSS property name, with vendor prefix if required. If browser\n     * does not support transforms, property will be ignored.\n     * @type {string}\n     * @const\n     * @private\n     */\n\n    CanvasLayer$2.CSS_TRANSFORM_ = function () {\n      var div = document.createElement('div');\n      var transformProps = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform'];\n\n      for (var i = 0; i < transformProps.length; i++) {\n        var prop = transformProps[i];\n\n        if (div.style[prop] !== undefined) {\n          return prop;\n        }\n      } // return unprefixed version by default\n\n\n      return transformProps[0];\n    }();\n    /**\n     * The requestAnimationFrame function, with vendor-prefixed or setTimeout-based\n     * fallbacks. MUST be called with window as thisArg.\n     * @type {function}\n     * @param {function} callback The function to add to the frame request queue.\n     * @return {number} The browser-defined id for the requested callback.\n     * @private\n     */\n\n\n    CanvasLayer$2.prototype.requestAnimFrame_ = global$4.requestAnimationFrame || global$4.webkitRequestAnimationFrame || global$4.mozRequestAnimationFrame || global$4.oRequestAnimationFrame || global$4.msRequestAnimationFrame || function (callback) {\n      return global$4.setTimeout(callback, 1000 / 60);\n    };\n    /**\n     * The cancelAnimationFrame function, with vendor-prefixed fallback. Does not\n     * fall back to clearTimeout as some platforms implement requestAnimationFrame\n     * but not cancelAnimationFrame, and the cost is an extra frame on onRemove.\n     * MUST be called with window as thisArg.\n     * @type {function}\n     * @param {number=} requestId The id of the frame request to cancel.\n     * @private\n     */\n\n\n    CanvasLayer$2.prototype.cancelAnimFrame_ = global$4.cancelAnimationFrame || global$4.webkitCancelAnimationFrame || global$4.mozCancelAnimationFrame || global$4.oCancelAnimationFrame || global$4.msCancelAnimationFrame || function (requestId) {};\n    /**\n     * Sets any options provided. See CanvasLayerOptions for more information.\n     * @param {CanvasLayerOptions} options The options to set.\n     */\n\n\n    CanvasLayer$2.prototype.setOptions = function (options) {\n      if (options.animate !== undefined) {\n        this.setAnimate(options.animate);\n      }\n\n      if (options.paneName !== undefined) {\n        this.setPaneName(options.paneName);\n      }\n\n      if (options.updateHandler !== undefined) {\n        this.setUpdateHandler(options.updateHandler);\n      }\n\n      if (options.resizeHandler !== undefined) {\n        this.setResizeHandler(options.resizeHandler);\n      }\n\n      if (options.resolutionScale !== undefined) {\n        this.setResolutionScale(options.resolutionScale);\n      }\n\n      if (options.map !== undefined) {\n        this.setMap(options.map);\n      }\n    };\n    /**\n     * Set the animated state of the layer. If true, updateHandler will be called\n     * repeatedly, once per frame. If false, updateHandler will only be called when\n     * a map property changes that could require the canvas content to be redrawn.\n     * @param {boolean} animate Whether the canvas is animated.\n     */\n\n\n    CanvasLayer$2.prototype.setAnimate = function (animate) {\n      this.isAnimated_ = !!animate;\n\n      if (this.isAnimated_) {\n        this.scheduleUpdate();\n      }\n    };\n    /**\n     * @return {boolean} Whether the canvas is animated.\n     */\n\n\n    CanvasLayer$2.prototype.isAnimated = function () {\n      return this.isAnimated_;\n    };\n    /**\n     * Set the MapPane in which this layer will be displayed, by name. See\n     * {@code google.maps.MapPanes} for the panes available.\n     * @param {string} paneName The name of the desired MapPane.\n     */\n\n\n    CanvasLayer$2.prototype.setPaneName = function (paneName) {\n      this.paneName_ = paneName;\n      this.setPane_();\n    };\n    /**\n     * @return {string} The name of the current container pane.\n     */\n\n\n    CanvasLayer$2.prototype.getPaneName = function () {\n      return this.paneName_;\n    };\n    /**\n     * Adds the canvas to the specified container pane. Since this is guaranteed to\n     * execute only after onAdd is called, this is when paneName's existence is\n     * checked (and an error is thrown if it doesn't exist).\n     * @private\n     */\n\n\n    CanvasLayer$2.prototype.setPane_ = function () {\n      if (!this.isAdded_) {\n        return;\n      } // onAdd has been called, so panes can be used\n\n\n      var panes = this.getPanes();\n\n      if (!panes[this.paneName_]) {\n        throw new Error('\"' + this.paneName_ + '\" is not a valid MapPane name.');\n      }\n\n      panes[this.paneName_].appendChild(this.canvas);\n    };\n    /**\n     * Set a function that will be called whenever the parent map and the overlay's\n     * canvas have been resized. If opt_resizeHandler is null or unspecified, any\n     * existing callback is removed.\n     * @param {?function=} opt_resizeHandler The resize callback function.\n     */\n\n\n    CanvasLayer$2.prototype.setResizeHandler = function (opt_resizeHandler) {\n      this.resizeHandler_ = opt_resizeHandler;\n    };\n    /**\n     * Sets a value for scaling the canvas resolution relative to the canvas\n     * display size. This can be used to save computation by scaling the backing\n     * buffer down, or to support high DPI devices by scaling it up (by e.g.\n     * window.devicePixelRatio).\n     * @param {number} scale\n     */\n\n\n    CanvasLayer$2.prototype.setResolutionScale = function (scale) {\n      if (typeof scale === 'number') {\n        this.resolutionScale_ = scale;\n        this.resize_();\n      }\n    };\n    /**\n     * Set a function that will be called when a repaint of the canvas is required.\n     * If opt_updateHandler is null or unspecified, any existing callback is\n     * removed.\n     * @param {?function=} opt_updateHandler The update callback function.\n     */\n\n\n    CanvasLayer$2.prototype.setUpdateHandler = function (opt_updateHandler) {\n      this.updateHandler_ = opt_updateHandler;\n    };\n    /**\n     * @inheritDoc\n     */\n\n\n    CanvasLayer$2.prototype.onAdd = function () {\n      if (this.isAdded_) {\n        return;\n      }\n\n      this.isAdded_ = true;\n      this.setPane_();\n      this.resizeListener_ = google.maps.event.addListener(this.getMap(), 'resize', this.resizeFunction_);\n      this.centerListener_ = google.maps.event.addListener(this.getMap(), 'center_changed', this.repositionFunction_);\n      this.resize_();\n      this.repositionCanvas_();\n    };\n    /**\n     * @inheritDoc\n     */\n\n\n    CanvasLayer$2.prototype.onRemove = function () {\n      if (!this.isAdded_) {\n        return;\n      }\n\n      this.isAdded_ = false;\n      this.topLeft_ = null; // remove canvas and listeners for pan and resize from map\n\n      this.canvas.parentElement.removeChild(this.canvas);\n\n      if (this.centerListener_) {\n        google.maps.event.removeListener(this.centerListener_);\n        this.centerListener_ = null;\n      }\n\n      if (this.resizeListener_) {\n        google.maps.event.removeListener(this.resizeListener_);\n        this.resizeListener_ = null;\n      } // cease canvas update callbacks\n\n\n      if (this.requestAnimationFrameId_) {\n        this.cancelAnimFrame_.call(global$4, this.requestAnimationFrameId_);\n        this.requestAnimationFrameId_ = null;\n      }\n    };\n    /**\n     * The internal callback for resize events that resizes the canvas to keep the\n     * map properly covered.\n     * @private\n     */\n\n\n    CanvasLayer$2.prototype.resize_ = function () {\n      if (!this.isAdded_) {\n        return;\n      }\n\n      var map = this.getMap();\n      var mapWidth = map.getDiv().offsetWidth;\n      var mapHeight = map.getDiv().offsetHeight;\n      var newWidth = mapWidth * this.resolutionScale_;\n      var newHeight = mapHeight * this.resolutionScale_;\n      var oldWidth = this.canvas.width;\n      var oldHeight = this.canvas.height; // resizing may allocate a new back buffer, so do so conservatively\n\n      if (oldWidth !== newWidth || oldHeight !== newHeight) {\n        this.canvas.width = newWidth;\n        this.canvas.height = newHeight;\n        this.needsResize_ = true;\n        this.scheduleUpdate();\n      } // reset styling if new sizes don't match; resize of data not needed\n\n\n      if (this.canvasCssWidth_ !== mapWidth || this.canvasCssHeight_ !== mapHeight) {\n        this.canvasCssWidth_ = mapWidth;\n        this.canvasCssHeight_ = mapHeight;\n        this.canvas.style.width = mapWidth + 'px';\n        this.canvas.style.height = mapHeight + 'px';\n      }\n    };\n    /**\n     * @inheritDoc\n     */\n\n\n    CanvasLayer$2.prototype.draw = function () {\n      this.repositionCanvas_();\n    };\n    /**\n     * Internal callback for map view changes. Since the Maps API moves the overlay\n     * along with the map, this function calculates the opposite translation to\n     * keep the canvas in place.\n     * @private\n     */\n\n\n    CanvasLayer$2.prototype.repositionCanvas_ = function () {\n      // TODO(bckenny): *should* only be executed on RAF, but in current browsers\n      //     this causes noticeable hitches in map and overlay relative\n      //     positioning.\n      var map = this.getMap(); // topLeft can't be calculated from map.getBounds(), because bounds are\n      // clamped to -180 and 180 when completely zoomed out. Instead, calculate\n      // left as an offset from the center, which is an unwrapped LatLng.\n\n      var top = map.getBounds().getNorthEast().lat();\n      var center = map.getCenter();\n      var scale = Math.pow(2, map.getZoom());\n      var left = center.lng() - this.canvasCssWidth_ * 180 / (256 * scale);\n      this.topLeft_ = new google.maps.LatLng(top, left); // Canvas position relative to draggable map's container depends on\n      // overlayView's projection, not the map's. Have to use the center of the\n      // map for this, not the top left, for the same reason as above.\n\n      var projection = this.getProjection();\n      var divCenter = projection.fromLatLngToDivPixel(center);\n      var offsetX = -Math.round(this.canvasCssWidth_ / 2 - divCenter.x);\n      var offsetY = -Math.round(this.canvasCssHeight_ / 2 - divCenter.y);\n      this.canvas.style[CanvasLayer$2.CSS_TRANSFORM_] = 'translate(' + offsetX + 'px,' + offsetY + 'px)';\n      this.scheduleUpdate();\n    };\n    /**\n     * Internal callback that serves as main animation scheduler via\n     * requestAnimationFrame. Calls resize and update callbacks if set, and\n     * schedules the next frame if overlay is animated.\n     * @private\n     */\n\n\n    CanvasLayer$2.prototype.update_ = function () {\n      this.requestAnimationFrameId_ = null;\n\n      if (!this.isAdded_) {\n        return;\n      }\n\n      if (this.isAnimated_) {\n        this.scheduleUpdate();\n      }\n\n      if (this.needsResize_ && this.resizeHandler_) {\n        this.needsResize_ = false;\n        this.resizeHandler_();\n      }\n\n      if (this.updateHandler_) {\n        this.updateHandler_();\n      }\n    };\n    /**\n     * A convenience method to get the current LatLng coordinate of the top left of\n     * the current view of the map.\n     * @return {google.maps.LatLng} The top left coordinate.\n     */\n\n\n    CanvasLayer$2.prototype.getTopLeft = function () {\n      return this.topLeft_;\n    };\n    /**\n     * Schedule a requestAnimationFrame callback to updateHandler. If one is\n     * already scheduled, there is no effect.\n     */\n\n\n    CanvasLayer$2.prototype.scheduleUpdate = function () {\n      if (this.isAdded_ && !this.requestAnimationFrameId_) {\n        this.requestAnimationFrameId_ = this.requestAnimFrame_.call(global$4, this.requestUpdateFunction_);\n      }\n    };\n  }\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var Layer$2 = function (_BaseLayer) {\n    inherits(Layer, _BaseLayer);\n\n    function Layer(map, dataSet, options) {\n      classCallCheck(this, Layer);\n\n      var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, map, dataSet, options));\n\n      var self = _this;\n      var data = null;\n      options = options || {};\n      self.init(options);\n      self.argCheck(options);\n      var canvasLayerOptions = {\n        map: map,\n        animate: false,\n        updateHandler: function updateHandler() {\n          self._canvasUpdate();\n        },\n        resolutionScale: resolutionScale\n      };\n      var canvasLayer = _this.canvasLayer = new CanvasLayer$2(canvasLayerOptions);\n      _this.clickEvent = _this.clickEvent.bind(_this);\n      _this.mousemoveEvent = _this.mousemoveEvent.bind(_this);\n\n      _this.bindEvent();\n\n      return _this;\n    }\n\n    createClass(Layer, [{\n      key: \"clickEvent\",\n      value: function clickEvent(e) {\n        var pixel = e.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"clickEvent\", this).call(this, pixel, e);\n      }\n    }, {\n      key: \"mousemoveEvent\",\n      value: function mousemoveEvent(e) {\n        var pixel = e.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"mousemoveEvent\", this).call(this, pixel, e);\n      }\n    }, {\n      key: \"bindEvent\",\n      value: function bindEvent(e) {\n        var map = this.map;\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.setDefaultCursor(\"default\");\n            map.addListener('click', this.clickEvent);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.addListener('mousemove', this.mousemoveEvent);\n          }\n        }\n      }\n    }, {\n      key: \"unbindEvent\",\n      value: function unbindEvent(e) {\n        var map = this.map;\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.removeListener('click', this.clickEvent);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.removeListener('mousemove', this.mousemoveEvent);\n          }\n        }\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.canvasLayer.canvas.getContext(this.context);\n      }\n    }, {\n      key: \"_canvasUpdate\",\n      value: function _canvasUpdate(time) {\n        if (!this.canvasLayer) {\n          return;\n        }\n\n        var self = this;\n        var animationOptions = self.options.animation;\n        var context = this.getContext();\n\n        if (self.isEnabledTime()) {\n          if (time === undefined) {\n            clear(context);\n            return;\n          }\n\n          if (this.context == '2d') {\n            context.save();\n            context.globalCompositeOperation = 'destination-out';\n            context.fillStyle = 'rgba(0, 0, 0, .1)';\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n            context.restore();\n          }\n        } else {\n          clear(context);\n        }\n\n        if (this.context == '2d') {\n          for (var key in self.options) {\n            context[key] = self.options[key];\n          }\n        } else {\n          context.clear(context.COLOR_BUFFER_BIT);\n        }\n\n        if (self.options.minZoom && map.getZoom() < self.options.minZoom || self.options.maxZoom && map.getZoom() > self.options.maxZoom) {\n          return;\n        }\n\n        var scale = 1;\n\n        if (this.context != '2d') {\n          scale = this.canvasLayer.devicePixelRatio;\n        }\n\n        var map = this.map;\n        var mapProjection = map.getProjection();\n        var scale = Math.pow(2, map.zoom) * resolutionScale;\n        var offset = mapProjection.fromLatLngToPoint(this.canvasLayer.getTopLeft());\n        var dataGetOptions = {\n          //fromColumn: self.options.coordType == 'bd09mc' ? 'coordinates' : 'coordinates_mercator',\n          transferCoordinate: function transferCoordinate(coordinate) {\n            var latLng = new google.maps.LatLng(coordinate[1], coordinate[0]);\n            var worldPoint = mapProjection.fromLatLngToPoint(latLng);\n            var pixel = {\n              x: (worldPoint.x - offset.x) * scale,\n              y: (worldPoint.y - offset.y) * scale\n            };\n            return [pixel.x, pixel.y];\n          }\n        };\n\n        if (time !== undefined) {\n          dataGetOptions.filter = function (item) {\n            var trails = animationOptions.trails || 10;\n\n            if (time && item.time > time - trails && item.time < time) {\n              return true;\n            } else {\n              return false;\n            }\n          };\n        } // get data from data set\n\n\n        var data = self.dataSet.get(dataGetOptions);\n        this.processData(data);\n        var latLng = new google.maps.LatLng(0, 0);\n        var worldPoint = mapProjection.fromLatLngToPoint(latLng);\n        var pixel = {\n          x: (worldPoint.x - offset.x) * scale,\n          y: (worldPoint.y - offset.y) * scale\n        };\n\n        if (self.options.unit == 'm' && self.options.size) {\n          self.options._size = self.options.size / zoomUnit;\n        } else {\n          self.options._size = self.options.size;\n        }\n\n        this.drawContext(context, new DataSet(data), self.options, pixel); //console.timeEnd('draw');\n        //console.timeEnd('update')\n\n        self.options.updateCallback && self.options.updateCallback(time);\n      }\n    }, {\n      key: \"init\",\n      value: function init(options) {\n        var self = this;\n        self.options = options;\n        this.initDataRange(options);\n        this.context = self.options.context || '2d';\n\n        if (self.options.zIndex) {\n          this.canvasLayer && this.canvasLayer.setZIndex(self.options.zIndex);\n        }\n\n        this.initAnimator();\n      }\n    }, {\n      key: \"addAnimatorEvent\",\n      value: function addAnimatorEvent() {\n        this.map.addListener('movestart', this.animatorMovestartEvent.bind(this));\n        this.map.addListener('moveend', this.animatorMoveendEvent.bind(this));\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.map.addOverlay(this.canvasLayer);\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.map.removeOverlay(this.canvasLayer);\n      }\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        self.canvasLayer.draw();\n      }\n    }]);\n    return Layer;\n  }(BaseLayer);\n  /**\n   * MapV for maptalks.js (https://github.com/maptalks/maptalks.js)\n   * @author fuzhenn / https://github.com/fuzhenn\n   */\n  // import * as maptalks from 'maptalks';\n\n\n  var Layer$4 = void 0;\n\n  if (typeof maptalks !== 'undefined') {\n    Layer$4 = function (_maptalks$Layer) {\n      inherits(Layer, _maptalks$Layer);\n\n      function Layer(id, dataSet, options) {\n        classCallCheck(this, Layer);\n\n        var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, id, options));\n\n        _this.options_ = options;\n        _this.dataSet = dataSet;\n\n        _this._initBaseLayer(options);\n\n        return _this;\n      }\n\n      createClass(Layer, [{\n        key: \"_initBaseLayer\",\n        value: function _initBaseLayer(options) {\n          var self = this;\n          var baseLayer = this.baseLayer = new BaseLayer(null, this.dataSet, options);\n          self.init(options);\n          baseLayer.argCheck(options);\n        }\n      }, {\n        key: \"clickEvent\",\n        value: function clickEvent(e) {\n          if (!this.baseLayer) {\n            return;\n          }\n\n          var pixel = e.containerPoint;\n          this.baseLayer.clickEvent(pixel, e.domEvent);\n        }\n      }, {\n        key: \"mousemoveEvent\",\n        value: function mousemoveEvent(e) {\n          if (!this.baseLayer) {\n            return;\n          }\n\n          var pixel = e.containerPoint;\n          this.baseLayer.mousemoveEvent(pixel, e.domEvent);\n        }\n      }, {\n        key: \"getEvents\",\n        value: function getEvents() {\n          return {\n            'click': this.clickEvent,\n            'mousemove': this.mousemoveEvent\n          };\n        }\n      }, {\n        key: \"init\",\n        value: function init(options) {\n          var base = this.baseLayer;\n          base.options = options;\n          base.initDataRange(options);\n          base.context = base.options.context || '2d';\n          base.initAnimator();\n        }\n      }, {\n        key: \"addAnimatorEvent\",\n        value: function addAnimatorEvent() {\n          this.map.addListener('movestart', this.animatorMovestartEvent.bind(this));\n          this.map.addListener('moveend', this.animatorMoveendEvent.bind(this));\n        }\n      }]);\n      return Layer;\n    }(maptalks.Layer);\n\n    var LayerRenderer = function (_maptalks$renderer$Ca) {\n      inherits(LayerRenderer, _maptalks$renderer$Ca);\n\n      function LayerRenderer() {\n        classCallCheck(this, LayerRenderer);\n        return possibleConstructorReturn(this, (LayerRenderer.__proto__ || Object.getPrototypeOf(LayerRenderer)).apply(this, arguments));\n      }\n\n      createClass(LayerRenderer, [{\n        key: \"needToRedraw\",\n        value: function needToRedraw() {\n          var base = this.layer.baseLayer;\n\n          if (base.isEnabledTime()) {\n            return true;\n          }\n\n          return get(LayerRenderer.prototype.__proto__ || Object.getPrototypeOf(LayerRenderer.prototype), \"needToRedraw\", this).call(this);\n        }\n      }, {\n        key: \"draw\",\n        value: function draw() {\n          var base = this.layer.baseLayer;\n\n          if (!this.canvas || !base.isEnabledTime() || this._shouldClear) {\n            this.prepareCanvas();\n            this._shouldClear = false;\n          }\n\n          this._update(this.gl || this.context, this._mapvFrameTime);\n\n          delete this._mapvFrameTime;\n          this.completeRender();\n        }\n      }, {\n        key: \"drawOnInteracting\",\n        value: function drawOnInteracting() {\n          this.draw();\n          this._shouldClear = false;\n        }\n      }, {\n        key: \"onSkipDrawOnInteracting\",\n        value: function onSkipDrawOnInteracting() {\n          this._shouldClear = true;\n        }\n      }, {\n        key: \"_canvasUpdate\",\n        value: function _canvasUpdate(time) {\n          this.setToRedraw();\n          this._mapvFrameTime = time;\n        }\n      }, {\n        key: \"_update\",\n        value: function _update(context, time) {\n          if (!this.canvas) {\n            return;\n          }\n\n          var self = this.layer.baseLayer;\n          var animationOptions = self.options.animation;\n          var map = this.getMap();\n\n          if (self.isEnabledTime()) {\n            if (time === undefined) {\n              clear(context);\n              return;\n            }\n\n            if (self.context == '2d') {\n              context.save();\n              context.globalCompositeOperation = 'destination-out';\n              context.fillStyle = 'rgba(0, 0, 0, .1)';\n              context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n              context.restore();\n            }\n          } else {\n            clear(context);\n          }\n\n          if (self.context == '2d') {\n            for (var key in self.options) {\n              context[key] = self.options[key];\n            }\n          } else {\n            context.clear(context.COLOR_BUFFER_BIT);\n          }\n\n          var scale = 1;\n\n          if (self.context === '2d' && self.options.draw !== 'heatmap') {\n            //in heatmap.js, devicePixelRatio is being mulitplied independently\n            scale = self.canvasLayer.devicePixelRatio;\n          } //reuse to save coordinate instance creation\n\n\n          var coord = new maptalks.Coordinate(0, 0);\n          var dataGetOptions = {\n            fromColumn: self.options.coordType === 'bd09mc' ? 'coordinates_mercator' : 'coordinates',\n            transferCoordinate: function transferCoordinate(coordinate) {\n              coord.x = coordinate[0];\n              coord.y = coordinate[1];\n\n              var r = map.coordToContainerPoint(coord)._multi(scale).toArray();\n\n              return r;\n            }\n          };\n\n          if (time !== undefined) {\n            dataGetOptions.filter = function (item) {\n              var trails = animationOptions.trails || 10;\n\n              if (time && item.time > time - trails && item.time < time) {\n                return true;\n              } else {\n                return false;\n              }\n            };\n          } // get data from data set\n\n\n          var data = self.dataSet.get(dataGetOptions);\n          self.processData(data);\n\n          if (self.options.unit == 'm') {\n            if (self.options.size) {\n              self.options._size = self.options.size / zoomUnit;\n            }\n\n            if (self.options.width) {\n              self.options._width = self.options.width / zoomUnit;\n            }\n\n            if (self.options.height) {\n              self.options._height = self.options.height / zoomUnit;\n            }\n          } else {\n            self.options._size = self.options.size;\n            self.options._height = self.options.height;\n            self.options._width = self.options.width;\n          }\n\n          var zeroZero = new maptalks.Point(0, 0); //screen position of the [0, 0] point\n\n          var zeroZeroScreen = map._pointToContainerPoint(zeroZero)._multi(scale);\n\n          self.drawContext(context, data, self.options, zeroZeroScreen); //console.timeEnd('draw');\n          //console.timeEnd('update')\n\n          self.options.updateCallback && self.options.updateCallback(time);\n        }\n      }, {\n        key: \"createCanvas\",\n        value: function createCanvas() {\n          if (this.canvas) {\n            return;\n          }\n\n          var map = this.getMap();\n          var size = map.getSize();\n          var r = maptalks.Browser.retina ? 2 : 1,\n              w = r * size.width,\n              h = r * size.height;\n          this.canvas = maptalks.Canvas.createCanvas(w, h, map.CanvasClass);\n          var mapvContext = this.layer.baseLayer.context;\n\n          if (mapvContext === '2d') {\n            this.context = this.canvas.getContext('2d');\n\n            if (this.layer.options['globalCompositeOperation']) {\n              this.context.globalCompositeOperation = this.layer.options['globalCompositeOperation'];\n            }\n          } else {\n            var attributes = {\n              'alpha': true,\n              'preserveDrawingBuffer': true,\n              'antialias': false\n            };\n            this.gl = this.canvas.getContext('webgl', attributes);\n          }\n\n          this.onCanvasCreate();\n\n          this._bindToMapv();\n\n          this.layer.fire('canvascreate', {\n            'context': this.context,\n            'gl': this.gl\n          });\n        }\n      }, {\n        key: \"_bindToMapv\",\n        value: function _bindToMapv() {\n          //some bindings needed by mapv baselayer\n          var base = this.layer.baseLayer;\n          this.devicePixelRatio = maptalks.Browser.retina ? 2 : 1;\n          base.canvasLayer = this;\n          base._canvasUpdate = this._canvasUpdate.bind(this);\n\n          base.getContext = function () {\n            var renderer = self.getRenderer();\n            return renderer.gl || renderer.context;\n          };\n        }\n      }]);\n      return LayerRenderer;\n    }(maptalks.renderer.CanvasRenderer);\n\n    Layer$4.registerRenderer('canvas', LayerRenderer);\n  }\n\n  var Layer$5 = Layer$4;\n  /**\n   * MapV for AMap\n   * @author sakitam-fdd - https://github.com/sakitam-fdd\n   */\n\n  /**\n   * create canvas\n   * @param width\n   * @param height\n   * @param Canvas\n   * @returns {HTMLCanvasElement}\n   */\n\n  var createCanvas = function createCanvas(width, height, Canvas) {\n    if (typeof document !== 'undefined') {\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      return canvas;\n    } else {\n      // create a new canvas instance in node.js\n      // the canvas class needs to have a default constructor without any parameter\n      return new Canvas(width, height);\n    }\n  };\n\n  var Layer$6 = function (_BaseLayer) {\n    inherits(Layer, _BaseLayer);\n\n    function Layer() {\n      var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var dataSet = arguments[1];\n      var options = arguments[2];\n      classCallCheck(this, Layer);\n\n      var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, map, dataSet, options));\n\n      _this.options = options;\n      /**\n       * internal\n       * @type {{canvas: null, devicePixelRatio: number}}\n       */\n\n      _this.canvasLayer = {\n        canvas: null,\n        devicePixelRatio: window.devicePixelRatio\n      };\n      /**\n       * canvas layer\n       * @type {null}\n       * @private\n       */\n\n      _this.layer_ = null;\n\n      _this.initDataRange(options);\n\n      _this.initAnimator();\n\n      _this.onEvents();\n\n      map.on('complete', function () {\n        this.init(map, options);\n        this.argCheck(options);\n      }, _this);\n      return _this;\n    }\n    /**\n     * init mapv layer\n     * @param map\n     * @param options\n     */\n\n\n    createClass(Layer, [{\n      key: \"init\",\n      value: function init(map, options) {\n        if (map) {\n          this.map = map;\n          this.context = this.options.context || '2d';\n          this.getCanvasLayer();\n        } else {\n          throw new Error('not map object');\n        }\n      }\n      /**\n       * update layer\n       * @param time\n       * @private\n       */\n\n    }, {\n      key: \"_canvasUpdate\",\n      value: function _canvasUpdate(time) {\n        this.render(this.canvasLayer.canvas, time);\n      }\n      /**\n       * render layer\n       * @param canvas\n       * @param time\n       * @returns {Layer}\n       */\n\n    }, {\n      key: \"render\",\n      value: function render(canvas, time) {\n        if (!canvas) return;\n        var map = this.map;\n        var context = canvas.getContext(this.context);\n        var animationOptions = this.options.animation;\n\n        if (this.isEnabledTime()) {\n          if (time === undefined) {\n            clear(context);\n            return this;\n          }\n\n          if (this.context === '2d') {\n            context.save();\n            context.globalCompositeOperation = 'destination-out';\n            context.fillStyle = 'rgba(0, 0, 0, .1)';\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n            context.restore();\n          }\n        } else {\n          clear(context);\n        }\n\n        if (this.context === '2d') {\n          for (var key in this.options) {\n            context[key] = this.options[key];\n          }\n        } else {\n          context.clear(context.COLOR_BUFFER_BIT);\n        }\n\n        var dataGetOptions = {\n          transferCoordinate: function transferCoordinate(coordinate) {\n            var _pixel = map.lngLatToContainer(new AMap.LngLat(coordinate[0], coordinate[1]));\n\n            return [_pixel['x'], _pixel['y']];\n          }\n        };\n\n        if (time !== undefined) {\n          dataGetOptions.filter = function (item) {\n            var trails = animationOptions.trails || 10;\n\n            if (time && item.time > time - trails && item.time < time) {\n              return true;\n            } else {\n              return false;\n            }\n          };\n        }\n\n        var data = this.dataSet.get(dataGetOptions);\n        this.processData(data);\n\n        if (this.options.unit === 'm') {\n          if (this.options.size) {\n            this.options._size = this.options.size / zoomUnit;\n          }\n\n          if (this.options.width) {\n            this.options._width = this.options.width / zoomUnit;\n          }\n\n          if (this.options.height) {\n            this.options._height = this.options.height / zoomUnit;\n          }\n        } else {\n          this.options._size = this.options.size;\n          this.options._height = this.options.height;\n          this.options._width = this.options.width;\n        }\n\n        this.drawContext(context, new DataSet(data), this.options, {\n          x: 0,\n          y: 0\n        });\n        this.options.updateCallback && this.options.updateCallback(time);\n        return this;\n      }\n      /**\n       * get canvas layer\n       */\n\n    }, {\n      key: \"getCanvasLayer\",\n      value: function getCanvasLayer() {\n        if (!this.canvasLayer.canvas && !this.layer_) {\n          var canvas = this.canvasFunction();\n          var bounds = this.map.getBounds();\n          this.layer_ = new AMap.CanvasLayer({\n            canvas: canvas,\n            bounds: this.options.bounds || bounds,\n            zooms: this.options.zooms || [0, 22]\n          });\n          this.layer_.setMap(this.map);\n          this.map.on('mapmove', this.canvasFunction, this);\n          this.map.on('zoomchange', this.canvasFunction, this);\n        }\n      }\n      /**\n       * canvas constructor\n       * @returns {*}\n       */\n\n    }, {\n      key: \"canvasFunction\",\n      value: function canvasFunction() {\n        var _ref = [this.map.getSize().width, this.map.getSize().height],\n            width = _ref[0],\n            height = _ref[1];\n\n        if (!this.canvasLayer.canvas) {\n          this.canvasLayer.canvas = createCanvas(width, height);\n        } else {\n          this.canvasLayer.canvas.width = width;\n          this.canvasLayer.canvas.height = height;\n          var bounds = this.map.getBounds();\n\n          if (this.layer_) {\n            this.layer_.setBounds(this.options.bounds || bounds);\n          }\n        }\n\n        this.render(this.canvasLayer.canvas);\n        return this.canvasLayer.canvas;\n      }\n      /**\n       * remove layer\n       */\n\n    }, {\n      key: \"removeLayer\",\n      value: function removeLayer() {\n        if (!this.map) return;\n        this.unEvents();\n        this.map.removeLayer(this.layer_);\n        delete this.map;\n        delete this.layer_;\n        delete this.canvasLayer.canvas;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.canvasLayer.canvas.getContext(this.context);\n      }\n      /**\n       * handle click event\n       * @param event\n       */\n\n    }, {\n      key: \"clickEvent\",\n      value: function clickEvent(event) {\n        var pixel = event.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"clickEvent\", this).call(this, pixel, event);\n      }\n      /**\n       * handle mousemove/pointermove event\n       * @param event\n       */\n\n    }, {\n      key: \"mousemoveEvent\",\n      value: function mousemoveEvent(event) {\n        var pixel = event.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"mousemoveEvent\", this).call(this, pixel, event);\n      }\n      /**\n       * add animator event\n       */\n\n    }, {\n      key: \"addAnimatorEvent\",\n      value: function addAnimatorEvent() {\n        this.map.on('movestart', this.animatorMovestartEvent, this);\n        this.map.on('moveend', this.animatorMoveendEvent, this);\n      }\n      /**\n       * bind event\n       */\n\n    }, {\n      key: \"onEvents\",\n      value: function onEvents() {\n        var map = this.map;\n        this.unEvents();\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.on('click', this.clickEvent, this);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.on('mousemove', this.mousemoveEvent, this);\n          }\n        }\n      }\n      /**\n       * unbind events\n       */\n\n    }, {\n      key: \"unEvents\",\n      value: function unEvents() {\n        var map = this.map;\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.off('click', this.clickEvent, this);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.off('mousemove', this.mousemoveEvent, this);\n          }\n        }\n      }\n    }]);\n    return Layer;\n  }(BaseLayer);\n  /**\n   * MapV for openlayers (https://openlayers.org)\n   * @author sakitam-fdd - https://github.com/sakitam-fdd\n   */\n\n  /**\n   * create canvas\n   * @param width\n   * @param height\n   * @returns {HTMLCanvasElement}\n   */\n\n\n  var createCanvas$1 = function createCanvas(width, height) {\n    if (typeof document !== 'undefined') {\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      return canvas;\n    } else {// create a new canvas instance in node.js\n      // the canvas class needs to have a default constructor without any parameter\n    }\n  };\n\n  var Layer$8 = function (_BaseLayer) {\n    inherits(Layer, _BaseLayer);\n\n    function Layer() {\n      var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var dataSet = arguments[1];\n      var options = arguments[2];\n      classCallCheck(this, Layer);\n\n      var _this = possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, map, dataSet, options));\n\n      _this.options = options;\n      /**\n       * internal\n       * @type {{canvas: null, devicePixelRatio: number}}\n       */\n\n      _this.canvasLayer = {\n        canvas: null,\n        devicePixelRatio: window.devicePixelRatio\n        /**\n         * cavnas layer\n         * @type {null}\n         * @private\n         */\n\n      };\n      _this.layer_ = null;\n      /**\n       * previous cursor\n       * @type {undefined}\n       * @private\n       */\n\n      _this.previousCursor_ = undefined;\n\n      _this.init(map, options);\n\n      _this.argCheck(options);\n\n      return _this;\n    }\n    /**\n     * init mapv layer\n     * @param map\n     * @param options\n     */\n\n\n    createClass(Layer, [{\n      key: \"init\",\n      value: function init(map, options) {\n        if (map && map instanceof ol.Map) {\n          this.$Map = map;\n          this.context = this.options.context || '2d';\n          this.getCanvasLayer();\n          this.initDataRange(options);\n          this.initAnimator();\n          this.onEvents();\n        } else {\n          throw new Error('not map object');\n        }\n      }\n      /**\n       * update layer\n       * @param time\n       * @private\n       */\n\n    }, {\n      key: \"_canvasUpdate\",\n      value: function _canvasUpdate(time) {\n        this.render(this.canvasLayer.canvas, time);\n      }\n      /**\n       * render layer\n       * @param canvas\n       * @param time\n       * @returns {Layer}\n       */\n\n    }, {\n      key: \"render\",\n      value: function render(canvas, time) {\n        var map = this.$Map;\n        var context = canvas.getContext(this.context);\n        var animationOptions = this.options.animation;\n\n        var _projection = this.options.hasOwnProperty('projection') ? this.options.projection : 'EPSG:4326';\n\n        if (this.isEnabledTime()) {\n          if (time === undefined) {\n            clear(context);\n            return this;\n          }\n\n          if (this.context === '2d') {\n            context.save();\n            context.globalCompositeOperation = 'destination-out';\n            context.fillStyle = 'rgba(0, 0, 0, .1)';\n            context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n            context.restore();\n          }\n        } else {\n          clear(context);\n        }\n\n        if (this.context === '2d') {\n          for (var key in this.options) {\n            context[key] = this.options[key];\n          }\n        } else {\n          context.clear(context.COLOR_BUFFER_BIT);\n        }\n\n        var dataGetOptions = {\n          transferCoordinate: function transferCoordinate(coordinate) {\n            return map.getPixelFromCoordinate(ol.proj.transform(coordinate, _projection, 'EPSG:4326'));\n          }\n        };\n\n        if (time !== undefined) {\n          dataGetOptions.filter = function (item) {\n            var trails = animationOptions.trails || 10;\n\n            if (time && item.time > time - trails && item.time < time) {\n              return true;\n            } else {\n              return false;\n            }\n          };\n        }\n\n        var data = this.dataSet.get(dataGetOptions);\n        this.processData(data);\n\n        if (this.options.unit === 'm') {\n          if (this.options.size) {\n            this.options._size = this.options.size / zoomUnit;\n          }\n\n          if (this.options.width) {\n            this.options._width = this.options.width / zoomUnit;\n          }\n\n          if (this.options.height) {\n            this.options._height = this.options.height / zoomUnit;\n          }\n        } else {\n          this.options._size = this.options.size;\n          this.options._height = this.options.height;\n          this.options._width = this.options.width;\n        }\n\n        this.drawContext(context, new DataSet(data), this.options, {\n          x: 0,\n          y: 0\n        });\n        this.options.updateCallback && this.options.updateCallback(time);\n        return this;\n      }\n      /**\n       * get canvas layer\n       */\n\n    }, {\n      key: \"getCanvasLayer\",\n      value: function getCanvasLayer() {\n        if (!this.canvasLayer.canvas && !this.layer_) {\n          var extent = this.getMapExtent();\n          this.layer_ = new ol.layer.Image({\n            layerName: this.options.layerName,\n            minResolution: this.options.minResolution,\n            maxResolution: this.options.maxResolution,\n            zIndex: this.options.zIndex,\n            extent: extent,\n            source: new ol.source.ImageCanvas({\n              canvasFunction: this.canvasFunction.bind(this),\n              projection: this.options.hasOwnProperty('projection') ? this.options.projection : 'EPSG:4326',\n              ratio: this.options.hasOwnProperty('ratio') ? this.options.ratio : 1\n            })\n          });\n          this.$Map.addLayer(this.layer_);\n          this.$Map.un('precompose', this.reRender, this);\n          this.$Map.on('precompose', this.reRender, this);\n        }\n      }\n      /**\n       * re render\n       */\n\n    }, {\n      key: \"reRender\",\n      value: function reRender() {\n        if (!this.layer_) return;\n        var extent = this.getMapExtent();\n        this.layer_.setExtent(extent);\n      }\n      /**\n       * canvas constructor\n       * @param extent\n       * @param resolution\n       * @param pixelRatio\n       * @param size\n       * @param projection\n       * @returns {*}\n       */\n\n    }, {\n      key: \"canvasFunction\",\n      value: function canvasFunction(extent, resolution, pixelRatio, size, projection) {\n        if (!this.canvasLayer.canvas) {\n          this.canvasLayer.canvas = createCanvas$1(size[0], size[1]);\n        } else {\n          this.canvasLayer.canvas.width = size[0];\n          this.canvasLayer.canvas.height = size[1];\n        }\n\n        this.render(this.canvasLayer.canvas);\n        return this.canvasLayer.canvas;\n      }\n      /**\n       * get map current extent\n       * @returns {Array}\n       */\n\n    }, {\n      key: \"getMapExtent\",\n      value: function getMapExtent() {\n        var size = this.$Map.getSize();\n        return this.$Map.getView().calculateExtent(size);\n      }\n      /**\n       * add layer to map\n       * @param map\n       */\n\n    }, {\n      key: \"addTo\",\n      value: function addTo(map) {\n        this.init(map, this.options);\n      }\n      /**\n       * remove layer\n       */\n\n    }, {\n      key: \"removeLayer\",\n      value: function removeLayer() {\n        if (!this.$Map) return;\n        this.unEvents();\n        this.$Map.un('precompose', this.reRender, this);\n        this.$Map.removeLayer(this.layer_);\n        delete this.$Map;\n        delete this.layer_;\n        delete this.canvasLayer.canvas;\n      }\n    }, {\n      key: \"getContext\",\n      value: function getContext() {\n        return this.canvasLayer.canvas.getContext(this.context);\n      }\n      /**\n       * handle click event\n       * @param event\n       */\n\n    }, {\n      key: \"clickEvent\",\n      value: function clickEvent(event) {\n        var pixel = event.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"clickEvent\", this).call(this, {\n          x: pixel[0],\n          y: pixel[1]\n        }, event);\n      }\n      /**\n       * handle mousemove/pointermove event\n       * @param event\n       */\n\n    }, {\n      key: \"mousemoveEvent\",\n      value: function mousemoveEvent(event) {\n        var pixel = event.pixel;\n        get(Layer.prototype.__proto__ || Object.getPrototypeOf(Layer.prototype), \"mousemoveEvent\", this).call(this, {\n          x: pixel[0],\n          y: pixel[1]\n        }, event);\n      }\n      /**\n       * add animator event\n       */\n\n    }, {\n      key: \"addAnimatorEvent\",\n      value: function addAnimatorEvent() {\n        this.$Map.on('movestart', this.animatorMovestartEvent, this);\n        this.$Map.on('moveend', this.animatorMoveendEvent, this);\n      }\n      /**\n       * bind event\n       */\n\n    }, {\n      key: \"onEvents\",\n      value: function onEvents() {\n        var map = this.$Map;\n        this.unEvents();\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.on('click', this.clickEvent, this);\n          }\n\n          if (this.options.methods.mousemove) {\n            map.on('pointermove', this.mousemoveEvent, this);\n          }\n        }\n      }\n      /**\n       * unbind events\n       */\n\n    }, {\n      key: \"unEvents\",\n      value: function unEvents() {\n        var map = this.$Map;\n\n        if (this.options.methods) {\n          if (this.options.methods.click) {\n            map.un('click', this.clickEvent, this);\n          }\n\n          if (this.options.methods.pointermove) {\n            map.un('pointermove', this.mousemoveEvent, this);\n          }\n        }\n      }\n      /**\n       * set map cursor\n       * @param cursor\n       * @param feature\n       */\n\n    }, {\n      key: \"setDefaultCursor\",\n      value: function setDefaultCursor(cursor, feature) {\n        if (!this.$Map) return;\n        var element = this.$Map.getTargetElement();\n\n        if (feature) {\n          if (element.style.cursor !== cursor) {\n            this.previousCursor_ = element.style.cursor;\n            element.style.cursor = cursor;\n          }\n        } else if (this.previousCursor_ !== undefined) {\n          element.style.cursor = this.previousCursor_;\n          this.previousCursor_ = undefined;\n        }\n      }\n    }]);\n    return Layer;\n  }(BaseLayer);\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n\n  var geojson = {\n    getDataSet: function getDataSet(geoJson) {\n      var data = [];\n      var features = geoJson.features;\n\n      if (features) {\n        for (var i = 0; i < features.length; i++) {\n          var feature = features[i];\n          var geometry = feature.geometry;\n          var properties = feature.properties;\n          var item = {};\n\n          for (var key in properties) {\n            item[key] = properties[key];\n          }\n\n          item.geometry = geometry;\n          data.push(item);\n        }\n      }\n\n      return new DataSet(data);\n    }\n  };\n  /**\n   * @author kyle / http://nikai.us/\n   */\n\n  var csv = {\n    CSVToArray: function CSVToArray(strData, strDelimiter) {\n      // Check to see if the delimiter is defined. If not,\n      // then default to comma.\n      strDelimiter = strDelimiter || \",\"; // Create a regular expression to parse the CSV values.\n\n      var objPattern = new RegExp( // Delimiters.\n      \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" + // Quoted fields.\n      \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" + // Standard fields.\n      \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\", \"gi\"); // Create an array to hold our data. Give the array\n      // a default empty first row.\n\n      var arrData = [[]]; // Create an array to hold our individual pattern\n      // matching groups.\n\n      var arrMatches = null; // Keep looping over the regular expression matches\n      // until we can no longer find a match.\n\n      while (arrMatches = objPattern.exec(strData)) {\n        // Get the delimiter that was found.\n        var strMatchedDelimiter = arrMatches[1]; // Check to see if the given delimiter has a length\n        // (is not the start of string) and if it matches\n        // field delimiter. If id does not, then we know\n        // that this delimiter is a row delimiter.\n\n        if (strMatchedDelimiter.length && strMatchedDelimiter !== strDelimiter) {\n          // Since we have reached a new row of data,\n          // add an empty row to our data array.\n          arrData.push([]);\n        }\n\n        var strMatchedValue; // Now that we have our delimiter out of the way,\n        // let's check to see which kind of value we\n        // captured (quoted or unquoted).\n\n        if (arrMatches[2]) {\n          // We found a quoted value. When we capture\n          // this value, unescape any double quotes.\n          strMatchedValue = arrMatches[2].replace(new RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n        } else {\n          // We found a non-quoted value.\n          strMatchedValue = arrMatches[3];\n        } // Now that we have our value string, let's add\n        // it to the data array.\n\n\n        arrData[arrData.length - 1].push(strMatchedValue);\n      } // Return the parsed data.\n\n\n      return arrData;\n    },\n    getDataSet: function getDataSet(csvStr, split) {\n      var arr = this.CSVToArray(csvStr, split || ',');\n      var data = [];\n      var header = arr[0];\n\n      for (var i = 1; i < arr.length - 1; i++) {\n        var line = arr[i];\n        var item = {};\n\n        for (var j = 0; j < line.length; j++) {\n          var value = line[j];\n\n          if (header[j] == 'geometry') {\n            value = JSON.parse(value);\n          }\n\n          item[header[j]] = value;\n        }\n\n        data.push(item);\n      }\n\n      return new DataSet(data);\n    }\n  };\n  exports.version = version;\n  exports.canvasClear = clear;\n  exports.canvasResolutionScale = resolutionScale$1;\n  exports.canvasDrawSimple = drawSimple;\n  exports.canvasDrawHeatmap = drawHeatmap;\n  exports.canvasDrawGrid = drawGrid;\n  exports.canvasDrawHoneycomb = drawHoneycomb;\n  exports.webglDrawSimple = webglDrawSimple;\n  exports.webglDrawPoint = point;\n  exports.webglDrawLine = line;\n  exports.webglDrawPolygon = polygon;\n  exports.utilCityCenter = cityCenter;\n  exports.utilCurve = curve;\n  exports.utilForceEdgeBundling = ForceEdgeBundling;\n  exports.utilDataRangeIntensity = Intensity;\n  exports.utilDataRangeCategory = Category;\n  exports.utilDataRangeChoropleth = Choropleth;\n  exports.Map = MapHelper;\n  exports.baiduMapCanvasLayer = CanvasLayer;\n  exports.baiduMapAnimationLayer = AnimationLayer;\n  exports.baiduMapLayer = Layer;\n  exports.googleMapCanvasLayer = CanvasLayer$2;\n  exports.googleMapLayer = Layer$2;\n  exports.MaptalksLayer = Layer$5;\n  exports.AMapLayer = Layer$6;\n  exports.OpenlayersLayer = Layer$8;\n  exports.DataSet = DataSet;\n  exports.geojson = geojson;\n  exports.csv = csv;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}