{"ast":null,"code":"//sorter: (a, b) => a.name.length - b.name.length\nconst tableSort = (a, b) => {\n  const regnum = new RegExp(\"^[0-9]*$\"); //纯数字类型\n\n  const regunit = new RegExp(\"^[0-9]+(\\.[0-9]+)?[^0-9]+$\"); //数字加单位类型\n\n  if (regnum.test(a)) {\n    //纯数字\n    return a - b;\n  } else if (regunit.test(a)) {\n    //数字加单位\n    const numpartA = a.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[1];\n    const numpartB = b.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[1];\n    const unitpartA = a.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[3].trim();\n    const unitpartB = b.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[3].trim();\n\n    let getValue = (numpart, unitpart) => {\n      let compareValue;\n\n      if (unitpart === 'GB' || unitpart === 'Gb') {\n        compareValue = parseFloat(numpart) * 1024 * 1024 * 1024;\n      } else if (unitpart === 'MB' || unitpart === 'Mb') {\n        compareValue = parseFloat(numpart) * 1024 * 1024;\n      } else if (unitpart === 'KB' || unitpart === 'Kb') {\n        compareValue = parseFloat(numpart) * 1024;\n      } else if (unitpart === 'B' || unitpart === 'b') {\n        compareValue = parseFloat(numpart);\n      } else if (unitpart === 's') {\n        compareValue = parseFloat(numpart) * 1000 * 1000;\n      } else if (unitpart === 'ms') {\n        compareValue = parseFloat(numpart) * 1000;\n      } else if (unitpart === 'us') {\n        compareValue = parseFloat(numpart);\n      } else if (unitpart === '万') {\n        compareValue = parseFloat(numpart) * 10000;\n      } else if (unitpart === '百万') {\n        compareValue = parseFloat(numpart) * 1000000;\n      } else if (unitpart === '千万') {\n        compareValue = parseFloat(numpart) * 10000000;\n      } else if (unitpart === '亿') {\n        compareValue = parseFloat(numpart) * 100000000;\n      } else if (unitpart === '个') {\n        compareValue = parseFloat(numpart);\n      } else if (unitpart === '次') {\n        compareValue = parseFloat(numpart);\n      }\n\n      return compareValue;\n    };\n\n    const aValue = getValue(numpartA, unitpartA);\n    const bValue = getValue(numpartB, unitpartB);\n    return aValue - bValue;\n  }\n};\n\nconst sortStandardList = ['bytes', 'bytes_max', 'bytes_avg', 'packets', 'packets_max', 'packets_avg', 'drops', 'bytes_in', 'bytes_in_max', 'bytes_in_avg', 'bytes_out', 'bytes_out_max', 'bytes_out_avg', 'packets_in', 'packets_in_max', 'packets_in_avg', 'packets_out', 'packets_out_max', 'packets_out_avg', 'app_bytes', 'app_bytes_max', 'app_bytes_avg', 'app_bytes_in', 'app_bytes_in_max', 'app_bytes_in_avg', 'app_bytes_out', 'app_bytes_out_max', 'app_bytes_out_avg', 'app_packets', 'app_packets_max', 'app_packets_avg', 'app_packets_in', 'app_packets_in_max', 'app_packets_in_avg', 'app_packets_out', 'app_packets_out_max', 'app_packets_out_avg', 'rst', 'rst_max', 'rst_avg', 'rst_in', 'rst_in_max', 'rst_in_avg', 'rst_out', 'rst_out_max', 'rst_out_avg', 'window0', 'window0_max', 'window0_avg', 'window0_in', 'window0_in_max', 'window0_in_avg', 'window0_out', 'window0_out_max', 'window0_out_avg', 'drops_max', 'drops_avg', 'drops_in', 'drops_in_max', 'drops_in_avg', 'drops_out', 'drops_out_max', 'drops_out_avg', 'ret_max', 'ret_avg', 'ret_in', 'ret_in_max', 'ret_in_avg', 'ret_out', 'ret_out_max', 'ret_out_avg', 'rtt_in', 'tcp_conn_num', 'rtt_in_max', 'tcp_conn_num_max', 'rtt_in_avg', 'tcp_conn_num_avg', 'rtt_out', 'udp_conn_num', 'rtt_out_max', 'udp_conn_num_max', 'rtt_out_avg', 'udp_conn_num_avg', 'ret', 'bytes_client', 'bytes_server', 'packets_client', 'packets_server', 'app_bytes_client', 'app_bytes_server', 'app_packets_client', 'app_packets_server', 'ret_client', 'ret_server', 'drop', 'drop_client', 'drop_server', 'rst_client', 'rst_server', 'zero_window', 'zero_window_client', 'zero_window_server', 'request_num', 'succeed_request', 'fail_request', 'tran_time', 'server_time', 'ret_time', 'ret_time_client', 'ret_time_server', 'drop_time', 'drop_time_client', 'drop_time_server', 'conn_time', 'server_conn_time', 'client_conn_time', 'lianjie_time', 'fin_time', 'data_time', 'http_bytes', 'http_bytes_client', 'http_bytes_server', 'rttin', 'rttout', 'pkt64_bytes', 'pkt64_bytes_max', 'pkt64_bytes_avg', 'pkt64_bytes_in', 'pkt64_bytes_in_max', 'pkt64_bytes_in_avg', 'pkt64_bytes_out', 'pkt64_bytes_out_max', 'pkt64_bytes_out_avg', 'pkt64_num', 'pkt64_num_max', 'pkt64_num_avg', 'pkt64_num_in', 'pkt64_num_in_max', 'pkt64_num_in_avg', 'pkt64_num_out', 'pkt64_num_out_max', 'pkt64_num_out_avg', 'pkt128_bytes', 'pkt128_bytes_max', 'pkt128_bytes_avg', 'pkt128_bytes_in', 'pkt128_bytes_in_max', 'pkt128_bytes_in_avg', 'pkt128_bytes_out', 'pkt128_bytes_out_max', 'pkt128_num', 'pkt128_bytes_out_avg', 'pkt128_num_max', 'pkt128_num_avg', 'pkt128_num_in_max', 'pkt128_num_in', 'pkt128_num_in_avg', 'pkt128_num_out_max', 'pkt128_num_out', 'pkt128_num_out_avg', 'pkt512_bytes', 'pkt512_bytes_max', 'pkt512_bytes_avg', 'pkt512_bytes_in', 'pkt512_bytes_in_max', 'pkt512_bytes_in_avg', 'pkt512_bytes_out', 'pkt512_bytes_out_max', 'pkt512_num', 'pkt512_bytes_out_avg', 'pkt512_num_max', 'pkt512_num_avg', 'pkt512_num_in', 'pkt512_num_in_avg', 'pkt512_num_in_max', 'pkt512_num_out', 'pkt512_num_out_max', 'pkt512_num_out_avg', 'pkt1517_bytes_max', 'pkt1517_bytes', 'pkt1517_bytes_avg', 'pkt1517_bytes_in', 'pkt1517_bytes_in_max', 'pkt1517_bytes_out', 'pkt1517_bytes_in_avg', 'pkt1517_bytes_out_max', 'pkt1517_bytes_out_avg', 'pkt1517_num', 'pkt1517_num_avg', 'pkt1517_num_max', 'pkt1517_num_in', 'pkt1517_num_in_max', 'pkt1517_num_in_avg', 'pkt1517_num_out', 'pkt1517_num_out_max', 'pkt1517_num_out_avg', 'pkt1518_bytes_max', 'pkt1518_bytes', 'pkt1518_bytes_avg', 'pkt1518_bytes_in', 'pkt1518_bytes_in_max', 'pkt1518_bytes_in_avg', 'pkt1518_bytes_out', 'pkt1518_bytes_out_avg', 'pkt1518_bytes_out_max', 'pkt1518_num', 'pkt1518_num_max', 'pkt1518_num_avg', 'pkt1518_num_in_max', 'pkt1518_num_in', 'pkt1518_num_in_avg', 'pkt1518_num_out', 'pkt1518_num_out_avg', 'pkt1518_num_out_max', 'SYN_bytes', 'SYN_bytes_max', 'SYN_bytes_avg', 'SYN_bytes_in', 'SYN_bytes_in_max', 'SYN_bytes_in_avg', 'SYN_bytes_out', 'SYN_bytes_out_max', 'SYN_bytes_out_avg', 'SYN_num', 'SYN_num_max', 'SYN_num_avg', 'SYN_num_in', 'SYN_num_in_max', 'SYN_num_in_avg', 'SYN_num_out', 'SYN_num_out_max', 'SYN_num_out_avg', 'SYN_ACK_bytes', 'SYN_ACK_bytes_max', 'SYN_ACK_bytes_avg', 'SYN_ACK_bytes_in', 'SYN_ACK_bytes_in_max', 'SYN_ACK_bytes_in_avg', 'SYN_ACK_bytes_out', 'SYN_ACK_bytes_out_max', 'SYN_ACK_bytes_out_avg', 'SYN_ACK_num', 'SYN_ACK_num_max', 'SYN_ACK_num_avg', 'SYN_ACK_num_in', 'SYN_ACK_num_in_max', 'SYN_ACK_num_in_avg', 'SYN_ACK_num_out', 'SYN_ACK_num_out_max', 'SYN_ACK_num_out_avg', 'ACK_bytes', 'ACK_bytes_max', 'ACK_bytes_avg', 'ACK_bytes_in', 'ACK_bytes_in_max', 'ACK_bytes_in_avg', 'ACK_bytes_out', 'ACK_bytes_out_max', 'ACK_bytes_out_avg', 'ACK_num', 'ACK_num_max', 'ACK_num_avg', 'ACK_num_in', 'ACK_num_in_max', 'ACK_num_in_avg', 'ACK_num_out', 'ACK_num_out_max', 'ACK_num_out_avg', 'FIN_bytes', 'FIN_bytes_max', 'FIN_bytes_avg', 'FIN_bytes_in', 'FIN_bytes_in_max', 'FIN_bytes_in_avg', 'FIN_bytes_out', 'FIN_bytes_out_max', 'FIN_bytes_out_avg', 'FIN_num', 'FIN_num_max', 'FIN_num_avg', 'FIN_num_in', 'FIN_num_in_max', 'FIN_num_in_avg', 'FIN_num_out', 'FIN_num_out_max', 'FIN_num_out_avg', 'RST_bytes', 'RST_bytes_max', 'RST_bytes_avg', 'RST_bytes_in', 'RST_bytes_in_max', 'RST_bytes_in_avg', 'RST_bytes_out', 'RST_bytes_out_max', 'RST_bytes_out_avg', 'RST_num', 'RST_num_max', 'RST_num_avg', 'RST_num_in', 'RST_num_in_max', 'RST_num_in_avg', 'RST_num_out', 'RST_num_out_max', 'RST_num_out_avg', 'num', 'tol_app', 'succeed_app', 'fail_app', 'slow_res_time', 'average_data_time', 'request', 'num_100', 'num_200', 'num_300', 'num_400', 'num_500'];\n\nconst sortColumns = xData => {\n  let newColumns = [];\n\n  if (xData && xData.length > 0) {\n    newColumns = xData.map(item => {\n      if (sortStandardList.indexOf(item.dataIndex) !== -1) {\n        item.sorter = (a, b) => tableSort(a[item.dataIndex], b[item.dataIndex]);\n      }\n\n      return item;\n    });\n  }\n\n  return newColumns;\n};\n\nexport default sortColumns;","map":{"version":3,"sources":["/industry/app/src/components/TableSort/index.js"],"names":["tableSort","a","b","regnum","RegExp","regunit","test","numpartA","match","numpartB","unitpartA","trim","unitpartB","getValue","numpart","unitpart","compareValue","parseFloat","aValue","bValue","sortStandardList","sortColumns","xData","newColumns","length","map","item","indexOf","dataIndex","sorter"],"mappings":"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G,WADhG,EAC4G,eAD5G,EAC4H,eAD5H,EAC4I,YAD5I,EACyJ,gBADzJ,EAC0K,gBAD1K,EAC2L,aAD3L,EACyM,iBADzM,EAC2N,iBAD3N,EAC6O,WAD7O,EACyP,eADzP,EACyQ,eADzQ,EACyR,cADzR,EACwS,kBADxS,EAC2T,kBAD3T,EAC8U,eAD9U,EAC8V,mBAD9V,EACkX,mBADlX,EACsY,aADtY,EACoZ,iBADpZ,EACsa,iBADta,EACwb,gBADxb,EACyc,oBADzc,EAC8d,oBAD9d,EACmf,iBADnf,EACqgB,qBADrgB,EAC2hB,qBAD3hB,EACijB,KADjjB,EACujB,SADvjB,EACikB,SADjkB,EAC2kB,QAD3kB,EAColB,YADplB,EACimB,YADjmB,EAC8mB,SAD9mB,EACwnB,aADxnB,EACsoB,aADtoB,EACopB,SADppB,EAC8pB,aAD9pB,EAC4qB,aAD5qB,EAC0rB,YAD1rB,EACusB,gBADvsB,EACwtB,gBADxtB,EACyuB,aADzuB,EACuvB,iBADvvB,EACywB,iBADzwB,EAC2xB,WAD3xB,EACuyB,WADvyB,EACmzB,UADnzB,EAC8zB,cAD9zB,EAC60B,cAD70B,EAC41B,WAD51B,EACw2B,eADx2B,EACw3B,eADx3B,EACw4B,SADx4B,EACk5B,SADl5B,EAC45B,QAD55B,EACq6B,YADr6B,EACk7B,YADl7B,EAC+7B,SAD/7B,EACy8B,aADz8B,EACu9B,aADv9B,EACq+B,QADr+B,EAC8+B,cAD9+B,EAC6/B,YAD7/B,EAC0gC,kBAD1gC,EAC6hC,YAD7hC,EAC0iC,kBAD1iC,EAC6jC,SAD7jC,EACukC,cADvkC,EACslC,aADtlC,EAComC,kBADpmC,EACunC,aADvnC,EACqoC,kBADroC,EACwpC,KADxpC,EAC8pC,cAD9pC,EAC6qC,cAD7qC,EAC4rC,gBAD5rC,EAC6sC,gBAD7sC,EAC8tC,kBAD9tC,EACivC,kBADjvC,EACowC,oBADpwC,EACyxC,oBADzxC,EAC8yC,YAD9yC,EAC2zC,YAD3zC,EACw0C,MADx0C,EAC+0C,aAD/0C,EAC61C,aAD71C,EAC22C,YAD32C,EACw3C,YADx3C,EACq4C,aADr4C,EACm5C,oBADn5C,EACw6C,oBADx6C,EAC67C,aAD77C,EAC28C,iBAD38C,EAC69C,cAD79C,EAC4+C,WAD5+C,EACw/C,aADx/C,EACsgD,UADtgD,EACihD,iBADjhD,EACmiD,iBADniD,EACqjD,WADrjD,EACikD,kBADjkD,EAColD,kBADplD,EACumD,WADvmD,EACmnD,kBADnnD,EACsoD,kBADtoD,EACypD,cADzpD,EACwqD,UADxqD,EACmrD,WADnrD,EAC+rD,YAD/rD,EAC4sD,mBAD5sD,EACguD,mBADhuD,EACovD,OADpvD,EAC4vD,QAD5vD,EACqwD,aADrwD,EACmxD,iBADnxD,EACqyD,iBADryD,EACuzD,gBADvzD,EACw0D,oBADx0D,EAC61D,oBAD71D,EACk3D,iBADl3D,EACo4D,qBADp4D,EAC05D,qBAD15D,EACg7D,WADh7D,EAC47D,eAD57D,EAC48D,eAD58D,EAC49D,cAD59D,EAC2+D,kBAD3+D,EAC8/D,kBAD9/D,EACihE,eADjhE,EACiiE,mBADjiE,EACqjE,mBADrjE,EACykE,cADzkE,EACwlE,kBADxlE,EAC2mE,kBAD3mE,EAC8nE,iBAD9nE,EACgpE,qBADhpE,EACsqE,qBADtqE,EAC4rE,kBAD5rE,EAC+sE,sBAD/sE,EACsuE,YADtuE,EACmvE,sBADnvE,EAC0wE,gBAD1wE,EAC2xE,gBAD3xE,EAC4yE,mBAD5yE,EACg0E,eADh0E,EACg1E,mBADh1E,EACo2E,oBADp2E,EACy3E,gBADz3E,EAC04E,oBAD14E,EAC+5E,cAD/5E,EAC86E,kBAD96E,EACi8E,kBADj8E,EACo9E,iBADp9E,EACs+E,qBADt+E,EAC4/E,qBAD5/E,EACkhF,kBADlhF,EACqiF,sBADriF,EAC4jF,YAD5jF,EACykF,sBADzkF,EACgmF,gBADhmF,EACinF,gBADjnF,EACkoF,eADloF,EACkpF,mBADlpF,EACsqF,mBADtqF,EAC0rF,gBAD1rF,EAC2sF,oBAD3sF,EACguF,oBADhuF,EACqvF,mBADrvF,EACywF,eADzwF,EACyxF,mBADzxF,EAC6yF,kBAD7yF,EACg0F,sBADh0F,EACu1F,mBADv1F,EAC22F,sBAD32F,EACk4F,uBADl4F,EAC05F,uBAD15F,EACk7F,aADl7F,EACg8F,iBADh8F,EACk9F,iBADl9F,EACo+F,gBADp+F,EACq/F,oBADr/F,EAC0gG,oBAD1gG,EAC+hG,iBAD/hG,EACijG,qBADjjG,EACukG,qBADvkG,EAC6lG,mBAD7lG,EACinG,eADjnG,EACioG,mBADjoG,EACqpG,kBADrpG,EACwqG,sBADxqG,EAC+rG,sBAD/rG,EACstG,mBADttG,EAC0uG,uBAD1uG,EACkwG,uBADlwG,EAC0xG,aAD1xG,EACwyG,iBADxyG,EAC0zG,iBAD1zG,EAC40G,oBAD50G,EACi2G,gBADj2G,EACk3G,oBADl3G,EACu4G,iBADv4G,EACy5G,qBADz5G,EAC+6G,qBAD/6G,EACq8G,WADr8G,EACi9G,eADj9G,EACi+G,eADj+G,EACi/G,cADj/G,EACggH,kBADhgH,EACmhH,kBADnhH,EACsiH,eADtiH,EACsjH,mBADtjH,EAC0kH,mBAD1kH,EAC8lH,SAD9lH,EACwmH,aADxmH,EACsnH,aADtnH,EACooH,YADpoH,EACipH,gBADjpH,EACkqH,gBADlqH,EACmrH,aADnrH,EACisH,iBADjsH,EACmtH,iBADntH,EACquH,eADruH,EACqvH,mBADrvH,EACywH,mBADzwH,EAC6xH,kBAD7xH,EACgzH,sBADhzH,EACu0H,sBADv0H,EAC81H,mBAD91H,EACk3H,uBADl3H,EAC04H,uBAD14H,EACk6H,aADl6H,EACg7H,iBADh7H,EACk8H,iBADl8H,EACo9H,gBADp9H,EACq+H,oBADr+H,EAC0/H,oBAD1/H,EAC+gI,iBAD/gI,EACiiI,qBADjiI,EACujI,qBADvjI,EAC6kI,WAD7kI,EACylI,eADzlI,EACymI,eADzmI,EACynI,cADznI,EACwoI,kBADxoI,EAC2pI,kBAD3pI,EAC8qI,eAD9qI,EAC8rI,mBAD9rI,EACktI,mBADltI,EACsuI,SADtuI,EACgvI,aADhvI,EAC8vI,aAD9vI,EAC4wI,YAD5wI,EACyxI,gBADzxI,EAC0yI,gBAD1yI,EAC2zI,aAD3zI,EACy0I,iBADz0I,EAC21I,iBAD31I,EAC62I,WAD72I,EACy3I,eADz3I,EACy4I,eADz4I,EACy5I,cADz5I,EACw6I,kBADx6I,EAC27I,kBAD37I,EAC88I,eAD98I,EAC89I,mBAD99I,EACk/I,mBADl/I,EACsgJ,SADtgJ,EACghJ,aADhhJ,EAC8hJ,aAD9hJ,EAC4iJ,YAD5iJ,EACyjJ,gBADzjJ,EAC0kJ,gBAD1kJ,EAC2lJ,aAD3lJ,EACymJ,iBADzmJ,EAC2nJ,iBAD3nJ,EAC6oJ,WAD7oJ,EACypJ,eADzpJ,EACyqJ,eADzqJ,EACyrJ,cADzrJ,EACwsJ,kBADxsJ,EAC2tJ,kBAD3tJ,EAC8uJ,eAD9uJ,EAC8vJ,mBAD9vJ,EACkxJ,mBADlxJ,EACsyJ,SADtyJ,EACgzJ,aADhzJ,EAC8zJ,aAD9zJ,EAC40J,YAD50J,EACy1J,gBADz1J,EAC02J,gBAD12J,EAC23J,aAD33J,EACy4J,iBADz4J,EAC25J,iBAD35J,EAC66J,KAD76J,EACm7J,SADn7J,EAC67J,aAD77J,EAC28J,UAD38J,EACs9J,eADt9J,EACs+J,mBADt+J,EAC0/J,SAD1/J,EACogK,SADpgK,EAC8gK,SAD9gK,EACwhK,SADxhK,EACkiK,SADliK,EAC4iK,SAD5iK,CAAzB;;AAIA,MAAMC,WAAW,GAAIC,KAAD,IAAS;AAC3B,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAGD,KAAK,IAAIA,KAAK,CAACE,MAAN,GAAa,CAAzB,EAA2B;AACzBD,IAAAA,UAAU,GAAGD,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAE;AAC3B,UAAGN,gBAAgB,CAACO,OAAjB,CAAyBD,IAAI,CAACE,SAA9B,MAA6C,CAAC,CAAjD,EAAmD;AACjDF,QAAAA,IAAI,CAACG,MAAL,GAAc,CAAC5B,CAAD,EAAGC,CAAH,KAASF,SAAS,CAACC,CAAC,CAACyB,IAAI,CAACE,SAAN,CAAF,EAAmB1B,CAAC,CAACwB,IAAI,CAACE,SAAN,CAApB,CAAhC;AACD;;AACD,aAAOF,IAAP;AACD,KALY,CAAb;AAMD;;AACD,SAAOH,UAAP;AACD,CAXD;;AAcA,eAAeF,WAAf","sourcesContent":["//sorter: (a, b) => a.name.length - b.name.length\r\nconst tableSort = (a,b)=>{\r\n  const regnum = new RegExp(\"^[0-9]*$\");//纯数字类型\r\n\tconst regunit = new RegExp(\"^[0-9]+(\\.[0-9]+)?[^0-9]+$\"); //数字加单位类型\r\n  if(regnum.test(a)){\r\n    //纯数字\r\n    return (a-b)\r\n  }else if(regunit.test(a)){\r\n    //数字加单位\r\n    const numpartA = a.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[1];\r\n    const numpartB = b.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[1];\r\n\t\tconst unitpartA = a.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[3].trim();\r\n\t\tconst unitpartB = b.match(/(^[0-9]+(\\.[0-9]+)?)([^0-9]{1,})/)[3].trim();\r\n    let getValue = (numpart,unitpart)=>{\r\n      let compareValue\r\n      if(unitpart === 'GB' || unitpart === 'Gb'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*1024*1024*1024;\r\n  \t\t}else if(unitpart === 'MB' || unitpart === 'Mb'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*1024*1024;\r\n  \t\t}else if(unitpart === 'KB' || unitpart === 'Kb'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*1024;\r\n  \t\t}else if(unitpart === 'B' || unitpart === 'b'){\r\n  \t\t\tcompareValue = parseFloat(numpart);\r\n  \t\t}else if(unitpart === 's'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*1000*1000;\r\n  \t\t}else if(unitpart === 'ms'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*1000;\r\n  \t\t}else if(unitpart === 'us'){\r\n  \t\t\tcompareValue = parseFloat(numpart);\r\n  \t\t}else if(unitpart === '万'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*10000;\r\n  \t\t}else if(unitpart === '百万'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*1000000;\r\n  \t\t}else if(unitpart === '千万'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*10000000;\r\n  \t\t}else if(unitpart === '亿'){\r\n  \t\t\tcompareValue = parseFloat(numpart)*100000000;\r\n  \t\t}else if(unitpart === '个'){\r\n  \t\t\tcompareValue = parseFloat(numpart);\r\n  \t\t}else if(unitpart === '次'){\r\n  \t\t\tcompareValue = parseFloat(numpart);\r\n  \t\t}\r\n      return compareValue\r\n    }\r\n    const aValue = getValue(numpartA,unitpartA)\r\n    const bValue = getValue(numpartB,unitpartB)\r\n    return aValue - bValue\r\n  }\r\n}\r\nconst sortStandardList = [\r\n  'bytes','bytes_max','bytes_avg','packets','packets_max','packets_avg','drops','bytes_in','bytes_in_max','bytes_in_avg','bytes_out','bytes_out_max','bytes_out_avg','packets_in','packets_in_max','packets_in_avg','packets_out','packets_out_max','packets_out_avg','app_bytes','app_bytes_max','app_bytes_avg','app_bytes_in','app_bytes_in_max','app_bytes_in_avg','app_bytes_out','app_bytes_out_max','app_bytes_out_avg','app_packets','app_packets_max','app_packets_avg','app_packets_in','app_packets_in_max','app_packets_in_avg','app_packets_out','app_packets_out_max','app_packets_out_avg','rst','rst_max','rst_avg','rst_in','rst_in_max','rst_in_avg','rst_out','rst_out_max','rst_out_avg','window0','window0_max','window0_avg','window0_in','window0_in_max','window0_in_avg','window0_out','window0_out_max','window0_out_avg','drops_max','drops_avg','drops_in','drops_in_max','drops_in_avg','drops_out','drops_out_max','drops_out_avg','ret_max','ret_avg','ret_in','ret_in_max','ret_in_avg','ret_out','ret_out_max','ret_out_avg','rtt_in','tcp_conn_num','rtt_in_max','tcp_conn_num_max','rtt_in_avg','tcp_conn_num_avg','rtt_out','udp_conn_num','rtt_out_max','udp_conn_num_max','rtt_out_avg','udp_conn_num_avg','ret','bytes_client','bytes_server','packets_client','packets_server','app_bytes_client','app_bytes_server','app_packets_client','app_packets_server','ret_client','ret_server','drop','drop_client','drop_server','rst_client','rst_server','zero_window','zero_window_client','zero_window_server','request_num','succeed_request','fail_request','tran_time','server_time','ret_time','ret_time_client','ret_time_server','drop_time','drop_time_client','drop_time_server','conn_time','server_conn_time','client_conn_time','lianjie_time','fin_time','data_time','http_bytes','http_bytes_client','http_bytes_server','rttin','rttout','pkt64_bytes','pkt64_bytes_max','pkt64_bytes_avg','pkt64_bytes_in','pkt64_bytes_in_max','pkt64_bytes_in_avg','pkt64_bytes_out','pkt64_bytes_out_max','pkt64_bytes_out_avg','pkt64_num','pkt64_num_max','pkt64_num_avg','pkt64_num_in','pkt64_num_in_max','pkt64_num_in_avg','pkt64_num_out','pkt64_num_out_max','pkt64_num_out_avg','pkt128_bytes','pkt128_bytes_max','pkt128_bytes_avg','pkt128_bytes_in','pkt128_bytes_in_max','pkt128_bytes_in_avg','pkt128_bytes_out','pkt128_bytes_out_max','pkt128_num','pkt128_bytes_out_avg','pkt128_num_max','pkt128_num_avg','pkt128_num_in_max','pkt128_num_in','pkt128_num_in_avg','pkt128_num_out_max','pkt128_num_out','pkt128_num_out_avg','pkt512_bytes','pkt512_bytes_max','pkt512_bytes_avg','pkt512_bytes_in','pkt512_bytes_in_max','pkt512_bytes_in_avg','pkt512_bytes_out','pkt512_bytes_out_max','pkt512_num','pkt512_bytes_out_avg','pkt512_num_max','pkt512_num_avg','pkt512_num_in','pkt512_num_in_avg','pkt512_num_in_max','pkt512_num_out','pkt512_num_out_max','pkt512_num_out_avg','pkt1517_bytes_max','pkt1517_bytes','pkt1517_bytes_avg','pkt1517_bytes_in','pkt1517_bytes_in_max','pkt1517_bytes_out','pkt1517_bytes_in_avg','pkt1517_bytes_out_max','pkt1517_bytes_out_avg','pkt1517_num','pkt1517_num_avg','pkt1517_num_max','pkt1517_num_in','pkt1517_num_in_max','pkt1517_num_in_avg','pkt1517_num_out','pkt1517_num_out_max','pkt1517_num_out_avg','pkt1518_bytes_max','pkt1518_bytes','pkt1518_bytes_avg','pkt1518_bytes_in','pkt1518_bytes_in_max','pkt1518_bytes_in_avg','pkt1518_bytes_out','pkt1518_bytes_out_avg','pkt1518_bytes_out_max','pkt1518_num','pkt1518_num_max','pkt1518_num_avg','pkt1518_num_in_max','pkt1518_num_in','pkt1518_num_in_avg','pkt1518_num_out','pkt1518_num_out_avg','pkt1518_num_out_max','SYN_bytes','SYN_bytes_max','SYN_bytes_avg','SYN_bytes_in','SYN_bytes_in_max','SYN_bytes_in_avg','SYN_bytes_out','SYN_bytes_out_max','SYN_bytes_out_avg','SYN_num','SYN_num_max','SYN_num_avg','SYN_num_in','SYN_num_in_max','SYN_num_in_avg','SYN_num_out','SYN_num_out_max','SYN_num_out_avg','SYN_ACK_bytes','SYN_ACK_bytes_max','SYN_ACK_bytes_avg','SYN_ACK_bytes_in','SYN_ACK_bytes_in_max','SYN_ACK_bytes_in_avg','SYN_ACK_bytes_out','SYN_ACK_bytes_out_max','SYN_ACK_bytes_out_avg','SYN_ACK_num','SYN_ACK_num_max','SYN_ACK_num_avg','SYN_ACK_num_in','SYN_ACK_num_in_max','SYN_ACK_num_in_avg','SYN_ACK_num_out','SYN_ACK_num_out_max','SYN_ACK_num_out_avg','ACK_bytes','ACK_bytes_max','ACK_bytes_avg','ACK_bytes_in','ACK_bytes_in_max','ACK_bytes_in_avg','ACK_bytes_out','ACK_bytes_out_max','ACK_bytes_out_avg','ACK_num','ACK_num_max','ACK_num_avg','ACK_num_in','ACK_num_in_max','ACK_num_in_avg','ACK_num_out','ACK_num_out_max','ACK_num_out_avg','FIN_bytes','FIN_bytes_max','FIN_bytes_avg','FIN_bytes_in','FIN_bytes_in_max','FIN_bytes_in_avg','FIN_bytes_out','FIN_bytes_out_max','FIN_bytes_out_avg','FIN_num','FIN_num_max','FIN_num_avg','FIN_num_in','FIN_num_in_max','FIN_num_in_avg','FIN_num_out','FIN_num_out_max','FIN_num_out_avg','RST_bytes','RST_bytes_max','RST_bytes_avg','RST_bytes_in','RST_bytes_in_max','RST_bytes_in_avg','RST_bytes_out','RST_bytes_out_max','RST_bytes_out_avg','RST_num','RST_num_max','RST_num_avg','RST_num_in','RST_num_in_max','RST_num_in_avg','RST_num_out','RST_num_out_max','RST_num_out_avg','num','tol_app','succeed_app','fail_app','slow_res_time','average_data_time','request','num_100','num_200','num_300','num_400','num_500'\r\n]\r\n\r\nconst sortColumns = (xData)=>{\r\n  let newColumns = []\r\n  if(xData && xData.length>0){\r\n    newColumns = xData.map(item=>{\r\n      if(sortStandardList.indexOf(item.dataIndex) !== -1){\r\n        item.sorter = (a,b) => tableSort(a[item.dataIndex],b[item.dataIndex])\r\n      }\r\n      return item\r\n    })\r\n  }\r\n  return newColumns\r\n}\r\n\r\n\r\nexport default sortColumns\r\n"]},"metadata":{},"sourceType":"module"}