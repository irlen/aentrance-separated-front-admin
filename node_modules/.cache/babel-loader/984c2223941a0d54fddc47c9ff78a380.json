{"ast":null,"code":"import \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\nimport \"antd/es/popconfirm/style\";\nimport _Popconfirm from \"antd/es/popconfirm\";\nimport \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/cascader/style\";\nimport _Cascader from \"antd/es/cascader\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/typography/style\";\nimport _Typography from \"antd/es/typography\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nimport \"antd/es/collapse/style\";\nimport _Collapse from \"antd/es/collapse\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _styled from \"@emotion/styled-base\";\nvar _jsxFileName = \"/industry/app/src/SystemRule/Configure.js\";\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport WyTable from '../components/WyTable';\nimport WyDatePicker from '../components/WyDatePicker';\nimport { Amodule } from '../components/Amodule';\nimport { wyAxiosPost } from '../components/WyAxios';\nimport WySpin from '../components/WySpin';\nimport decodeArr from './decodeArr';\nimport { forName } from '../components/RegExp';\nconst TextArea = _Input.TextArea;\nconst Panel = _Collapse.Panel;\nconst Option = _Select.Option;\nconst Text = _Typography.Text;\n\nconst ColorChange = _styled(\"span\", {\n  target: \"elbfp2l0\",\n  label: \"ColorChange\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"10t8w15\",\n  styles: \"background:#3399cc;\"\n} : {\n  name: \"10t8w15\",\n  styles: \"background:#3399cc;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1i9ialk-Configure\",\n  styles: \"color:#01bd4c;label:Configure;\"\n} : {\n  name: \"1i9ialk-Configure\",\n  styles: \"color:#01bd4c;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"vot9gq-Configure\",\n  styles: \"margin-top:20px;label:Configure;\"\n} : {\n  name: \"vot9gq-Configure\",\n  styles: \"margin-top:20px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"u05ogg-Configure\",\n  styles: \"display:flex;height:40px;label:Configure;\"\n} : {\n  name: \"u05ogg-Configure\",\n  styles: \"display:flex;height:40px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref4 = process.env.NODE_ENV === \"production\" ? {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\"\n} : {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1r4fzg4-Configure\",\n  styles: \"min-width:240px;label:Configure;\"\n} : {\n  name: \"1r4fzg4-Configure\",\n  styles: \"min-width:240px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbVJ1bGUvQ29uZmlndXJlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQSt1Qm9CIiwiZmlsZSI6Ii9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbVJ1bGUvQ29uZmlndXJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXHJcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcclxuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXHJcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5pbXBvcnQgeyBSb3csIENvbCwgSW5wdXQsIEJ1dHRvbiwgQ29sbGFwc2UsIEljb24sIFNlbGVjdCwgbWVzc2FnZSwgQ2hlY2tib3gsIE1vZGFsLCBUeXBvZ3JhcGh5LCBEcmF3ZXIsIENhc2NhZGVyLCBQb3Bjb25maXJtIH0gZnJvbSAnYW50ZCdcclxuXHJcblxyXG5pbXBvcnQgV3lUYWJsZSBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBXeURhdGVQaWNrZXIgZnJvbSAnLi4vY29tcG9uZW50cy9XeURhdGVQaWNrZXInXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgZGVjb2RlQXJyIGZyb20gJy4vZGVjb2RlQXJyJ1xyXG5pbXBvcnQgeyBmb3JOYW1lIH0gZnJvbSAnLi4vY29tcG9uZW50cy9SZWdFeHAnXHJcblxyXG5jb25zdCB7IFRleHRBcmVhIH0gPSBJbnB1dFxyXG5jb25zdCB7IFBhbmVsIH0gPSBDb2xsYXBzZVxyXG5jb25zdCB7IE9wdGlvbiB9ICA9IFNlbGVjdFxyXG5jb25zdCB7IFRleHQgfSA9IFR5cG9ncmFwaHlcclxuY29uc3QgQ29sb3JDaGFuZ2UgPSBzdHlsZWQuc3Bhbih7XHJcbiAgYmFja2dyb3VuZDpcIiMzMzk5Y2NcIlxyXG59KVxyXG5jbGFzcyBDb25maWd1cmUgZXh0ZW5kcyBDb21wb25lbnR7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBtZXNzYWdlOiAnJywgLy/ml6Xlv5fmoLfkvotcclxuICAgIG1lc3NhZ2VGb3JTZWxlY3RNb2RlbDonJywgLy/liJLor43ml7blgJnnmoTml6Xlv5fmoLfkvotcclxuICAgIHBhdHRlcm46JycsIC8v5L6b5Yy56YWN55qE5q2j5YiZXHJcbiAgICByZXN1bHQ6ICcnLCAvL+ino+aekOWHuuadpeeahOe7k+aenFxyXG4gICAgbGFzdE9uZTogeyAgIC8v5pyA6L+R5LiA5qyh5omn6KGM6Kej5p6Q5LmL5ZCO55qE5LiJ5Liq6YeP55qE5YC8XHJcbiAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICBwYXR0ZXJuOiAnJyxcclxuICAgICAgcmVzdWx0OiAnJyxcclxuICAgIH0sXHJcblxyXG4gICAgeERhdGE6W10sXHJcbiAgICB5RGF0YTpbXSxcclxuICAgIHBhZ2VTaXplOjEwLFxyXG4gICAgaXNTcGluaW5nOiBmYWxzZSxcclxuXHJcbiAgICBhY3RpdmVLZXk6W10sXHJcblxyXG4gICAgY3VyVGltZTogW10sXHJcbiAgICAvL2luZGV4TGlzdDpbXSxcclxuICAgIGNvbXBpbGVfc3RhdHVzOidhbGwnLFxyXG5cclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcblxyXG4gICAgaXNTZWxlY3RNb2RlbDogZmFsc2UsLy/mmK/lkKbmmK/liJLor43ljLnphY3mqKHlvI9cclxuICAgIGlzRXhpc3RNb2RlbDogZmFsc2UsLy/mmK/lkKbmmK/ku47lt7Lnu4/mnInnmoTph4zpnaLpgInnmoTmqKHlvI9cclxuXHJcbiAgICBzZWxBcnI6W10sLy/liJLor43ml7booqvpgInkuK3nmoTmlbDmja7kvotcclxuICAgIHdob2xlQXJyOltdLC8v6YCa6L+H6YCJ5Lit55qE5pWw5o2u5L6L77yM57yW6K+R5Ye655qE5pW05p2h5pWw5o2u5L6LXHJcbiAgICBjdXJTbmlwcGV0OnsgLy/mnIDov5HkuIDmrKHpgInkuK3nmoTmlbDmja7kvovnmoTlkITkuKrlsZ7mgKfkv6Hmga9cclxuICAgICAgaWQ6JycsXHJcbiAgICAgIHN0YXJ0OicnLFxyXG4gICAgICBlbmQ6JycsXHJcbiAgICAgIHN0cjogJycsXHJcbiAgICAgIG5hbWU6JycsXHJcbiAgICAgIHNlbGVjdGVkOicnXHJcbiAgICB9LFxyXG4gICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICBtb2RhbFZpc2libGU6IGZhbHNlLFxyXG4gICAgcnVsZW5hbWU6JycsIC8v5b6F5L+d5a2Y55qE5paw6KeE5YiZ55qE5ZCN56ewXHJcbiAgICBydWxlZGVzOicnLC8v5b6F5L+d5a2Y55qE5paw6KeE5YiZ55qE5o+P6L+wXHJcbiAgICBhcHBuYW1lOicnLFxyXG4gICAgYXBwTmFtZUxpc3Q6W10sXHJcblxyXG4gICAgZHJhd2VyVmlzaWJsZTogZmFsc2UsXHJcbiAgICBncm91cF9hcHA6IFsnYWxsX2dyb3VwJ10sXHJcbiAgICBncm91cEFwcExpc3Q6W10sXHJcblxyXG4gICAgY3VycnVsZTonJywgLy/lt7LmnInop4TliJnkuK3pgInmi6nml7bvvIzooqvpgInkuK3nmoTop4TliJlcclxuICAgIHJ1bGVMaXN0OltdLCAvL+W3suacieinhOWImeWIl+ihqFxyXG5cclxuICAgIHBvcFZpc2libGU6IGZhbHNlLFxyXG4gICAgY29uZGl0aW9uOiB0cnVlXHJcblxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRMb2coKVxyXG4gICAgdGhpcy5nZXRBcHBOYW1lKClcclxuICAgIHRoaXMuZ2V0R291cEFwcExpc3QoKVxyXG4gIH1cclxuICBnZXRDdXJSdWxlTGlzdD0gKGFwcG5hbWUpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnUnVsZS9nZXRSdWxlTGlzdCcse2FwcG5hbWV9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQgJiYgcmVzcG9uc2VEYXRhLmxlbmd0aD4wKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHJ1bGVMaXN0OiByZXNwb25zZURhdGFcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBnZXRHb3VwQXBwTGlzdCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXBBcHAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBBcHBMaXN0OiByZXNwb25zZURhdGFcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBjb21waWxlX3N0YXR1c0NoYW5nZSA9ICh2YWx1ZSk9PntcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjb21waWxlX3N0YXR1czp2YWx1ZVxyXG4gICAgfSwoKT0+e1xyXG4gICAgICB0aGlzLmdldExvZygpXHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+WPluivjeato+WImeebuOWFs1xyXG4gIGlzU2VsZWN0TW9kZWxDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU2VsZWN0TW9kZWw6IGUudGFyZ2V0LmNoZWNrZWQsXHJcbiAgICAgICAgaXNFeGlzdE1vZGVsOiBmYWxzZSxcclxuICAgICAgICBtZXNzYWdlRm9yU2VsZWN0TW9kZWw6IGUudGFyZ2V0LmNoZWNrZWQ/dGhpcy5zdGF0ZS5tZXNzYWdlOicnLFxyXG4gICAgICAgIHNlbEFycjpbXSxcclxuICAgICAgICB3aG9sZUFycjpbXSxcclxuICAgICAgICBjdXJydWxlOicnLFxyXG4gICAgICAgIHBhdHRlcm46JycsXHJcbiAgICAgICAgcmVzdWx0OicnXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHNlbGVjdFdvcmQgPSAoZXZlbnQpPT57XHJcbiAgICBjb25zdCBlID0gd2luZG93LmV2ZW50IHx8IGV2ZW50XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgIGNvbnN0IGN1ck1lc3NhZ2UgPSB0aGlzLnN0YXRlLm1lc3NhZ2VcclxuICAgIGNvbnN0IHN0YXJ0ID0gZS50YXJnZXQuc2VsZWN0aW9uU3RhcnRcclxuICAgIGNvbnN0IGVuZCA9IGUudGFyZ2V0LnNlbGVjdGlvbkVuZFxyXG4gICAgLy/kuqTlj4npgInmi6nliKTmlq1cclxuICAgIGlmKHRoaXMuaXNJbnRlcnNlY3QodGhpcy5zdGF0ZS5zZWxBcnIsc3RhcnQsZW5kKSl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6YCJ5oup5peg5pWILOivt+mBv+WFjeS6pOWPiemAieaLqScpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gY3VyTWVzc2FnZS5zbGljZShzdGFydCwgZW5kKVxyXG4gICAgY29uc3Qgbm90cmltID0gXy50cmltKHNlbGVjdGVkVGV4dClcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBpZigoc2VsZWN0ZWRUZXh0Lmxlbmd0aD4wICYmIG5vdHJpbS5sZW5ndGggPT09IDApIHx8IHNlbGVjdGVkVGV4dC5sZW5ndGggPT09IDAgfHwgc2VsZWN0ZWRUZXh0ID09PSAnJyl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+35LiN6KaB6YCJ5oup56m65a2X56ymJylcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZihzZWxlY3RlZFRleHQgPT09IHRoaXMuc3RhdGUubWVzc2FnZSl7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VyU25pcHBldDp7XHJcbiAgICAgICAgICBpZCxcclxuICAgICAgICAgIHN0YXJ0LFxyXG4gICAgICAgICAgZW5kLFxyXG4gICAgICAgICAgc3RyOiBzZWxlY3RlZFRleHQsXHJcbiAgICAgICAgICBuYW1lOicnLFxyXG4gICAgICAgICAgc2VsZWN0ZWQ6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH0sKCk9PntcclxuICAgICAgICB0aGlzLnNob3dNb2RhbCgpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldEFwcE5hbWUgPSAoKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRBcHBOYW1lJyx7fSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGFwcE5hbWVMaXN0OiByZXNwb25zZURhdGFcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBhcHBuYW1lQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgYXBwbmFtZTogdmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lsIbpgInkuK3lrZfnrKbkuLLmlbDnu4TkuK3mj5LlhaXmnKrpgInkuK3lrZfnrKbkuLLmlbDnu4RcclxuICBjb21waWxlQXJyID0gKGFycixzdHIpPT57XHJcbiAgICBjb25zdCByZXNvbHZlQXJyID0gW11cclxuICAgIGlmKGFyciAmJiBhcnIubGVuZ3RoPjApe1xyXG4gICAgICBhcnIubWFwKChpdGVtLGluZGV4KT0+e1xyXG4gICAgICAgIGlmKGluZGV4ID09PSBhcnIubGVuZ3RoLTEpe1xyXG4gICAgICAgICAgaWYoaW5kZXg9PT0wICYmIGl0ZW0uc3RhcnQgIT09IDApe1xyXG4gICAgICAgICAgICBjb25zdCBub1NlbGVjdCA9IHt9XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBhc0lkID0gcGFyc2VJbnQocmFuZG9tQ291bnQsMTApICsgcGFyc2VJbnQoY3VyVGltZSwxMCkqMTAwXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCAtIDFcclxuICAgICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgICBub1NlbGVjdC5zZWxlY3RlZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gMFxyXG4gICAgICAgICAgICBub1NlbGVjdC5lbmQgPSBhcnJbaW5kZXhdLnN0YXJ0XHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0ciA9IHN0ci5zbGljZShub1NlbGVjdC5zdGFydCwgbm9TZWxlY3QuZW5kKVxyXG4gICAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2goaXRlbSlcclxuICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCArIDFcclxuICAgICAgICAgIG5vU2VsZWN0LmlkID0gaWRcclxuICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gaXRlbS5lbmRcclxuICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IHN0ci5sZW5ndGhcclxuICAgICAgICAgIG5vU2VsZWN0LnN0ciA9IHN0ci5zbGljZShub1NlbGVjdC5zdGFydCwgbm9TZWxlY3QuZW5kKVxyXG4gICAgICAgICAgcmVzb2x2ZUFyci5wdXNoKG5vU2VsZWN0KVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgaWYoaW5kZXg9PT0wICYmIGl0ZW0uc3RhcnQgIT09IDApe1xyXG4gICAgICAgICAgICBjb25zdCBub1NlbGVjdCA9IHt9XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBhc0lkID0gcGFyc2VJbnQocmFuZG9tQ291bnQsMTApICsgcGFyc2VJbnQoY3VyVGltZSwxMCkqMTAwXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCAtIDFcclxuICAgICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgICBub1NlbGVjdC5zZWxlY3RlZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gMFxyXG4gICAgICAgICAgICBub1NlbGVjdC5lbmQgPSBhcnJbaW5kZXhdLnN0YXJ0XHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0ciA9IHN0ci5zbGljZShub1NlbGVjdC5zdGFydCwgbm9TZWxlY3QuZW5kKVxyXG4gICAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2goaXRlbSlcclxuICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCArIDFcclxuICAgICAgICAgIG5vU2VsZWN0LmlkID0gaWRcclxuICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gaXRlbS5lbmRcclxuICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IGFycltpbmRleCsxXS5zdGFydFxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc29sdmVBcnJcclxuICB9XHJcbiAgLy/kuqTlj4npgInmi6nliKTmlq1cclxuICBpc0ludGVyc2VjdCA9IChhcnIsc3RhcnQsZW5kKT0+e1xyXG4gICAgbGV0IGlzSW4gPSBmYWxzZVxyXG4gICAgaWYoYXJyICYmIGFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlzSW4gPSBhcnIuc29tZShpdGVtPT57XHJcbiAgICAgICAgY29uc3QgaXN0YXJ0ID0gaXRlbS5zdGFydFxyXG4gICAgICAgIGNvbnN0IGllbmQgPSBpdGVtLmVuZFxyXG4gICAgICAgIHJldHVybiAoKGlzdGFydDxzdGFydCB8fCBpc3RhcnQgPT0gc3RhcnQpICYmIChzdGFydDxpZW5kKSkgfHwgKChpc3RhcnQ8ZW5kKSAmJiAoZW5kPGllbmQgfHwgZW5kID09IGllbmQpKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzSW5cclxuICB9XHJcblxyXG4gIHNob3dNb2RhbCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgaGFuZGxlT2sgPSBlID0+IHtcclxuICAgIGlmKHRoaXMuc3RhdGUuY3VyU25pcHBldC5uYW1lID09PSAnJyl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn5a2X5q615ZCN5LiN6IO95Li656m6JylcclxuICAgIH1lbHNle1xyXG4gICAgICBjb25zdCBzZWxBcnIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLnNlbEFycilcclxuICAgICAgY29uc3QgaXNSZW5hbWUgPSBzZWxBcnIuc29tZShpdGVtPT57XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZSA9PT0gZS50YXJnZXQudmFsdWVcclxuICAgICAgfSlcclxuICAgICAgaWYoaXNSZW5hbWUpe1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+35LiN6KaB55So6YeN5aSN5a2X5q615ZCNJylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgY29uc3QgY3VyQXJyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5zZWxBcnIpXHJcbiAgICAgICAgY29uc3QgbmV3QXJyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5jdXJTbmlwcGV0KVxyXG4gICAgICAgIGN1ckFyci5wdXNoKG5ld0FycilcclxuICAgICAgICAvL+WvueaVsOe7hOaOkuW6j1xyXG4gICAgICAgIGNvbnN0IGhhaGEgPSBfLnNvcnRCeShjdXJBcnIsKGl0ZW0pPT57XHJcbiAgICAgICAgICByZXR1cm4gaXRlbS5zdGFydFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBzZWxBcnI6IF8uY2xvbmVEZWVwKGhhaGEpXHJcbiAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgIGNvbnN0IHdob2xlQXJyID0gdGhpcy5jb21waWxlQXJyKHRoaXMuc3RhdGUuc2VsQXJyLHRoaXMuc3RhdGUubWVzc2FnZSlcclxuICAgICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHdob2xlQXJyXHJcbiAgICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDYW5jZWwoKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnID0gZGVjb2RlQXJyKHRoaXMuc3RhdGUud2hvbGVBcnIsIHRoaXMuc3RhdGUubWVzc2FnZUZvclNlbGVjdE1vZGVsKVxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogcmVnXHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhbmRsZUNhbmNlbCA9IGUgPT4ge1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgY3VyU25pcHBldDp7XHJcbiAgICAgICAgICBpZDonJyxcclxuICAgICAgICAgIHN0YXJ0OicnLFxyXG4gICAgICAgICAgZW5kOicnLFxyXG4gICAgICAgICAgc3RyOiAnJyxcclxuICAgICAgICAgIG5hbWU6JydcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG1vZGFsQ2FuY2VsID0gZT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbW9kYWxWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzZWxBcnI6W10sLy/ooqvpgInkuK3nmoTmlbDmja7mrrVcclxuICAgICAgICB3aG9sZUFycjpbXSwvL+acgOe7iOe8luivkeaVsOe7hFxyXG4gICAgICAgIGN1clNuaXBwZXQ6e1xyXG4gICAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgICBzdGFydDonJyxcclxuICAgICAgICAgIGVuZDonJyxcclxuICAgICAgICAgIHN0cjogJycsXHJcbiAgICAgICAgICBuYW1lOicnLFxyXG4gICAgICAgICAgc2VsZWN0ZWQ6JydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJ1bGVuYW1lOicnLFxyXG4gICAgICAgIGFwcG5hbWU6JycsXHJcbiAgICAgICAgcnVsZWRlczonJyxcclxuICAgICAgICBsYXN0T25lOiB7XHJcbiAgICAgICAgICBtZXNzYWdlOiAnJyxcclxuICAgICAgICAgIHBhdHRlcm46ICcnLFxyXG4gICAgICAgICAgcmVzdWx0OiAnJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1lc3NhZ2U6JycsXHJcbiAgICAgICAgcGF0dGVybjonJyxcclxuICAgICAgICByZXN1bHQ6JycsXHJcbiAgICAgICAgZHJhd2VyVmlzaWJsZTogZmFsc2VcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFydENhbmNlbCA9KCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIG1vZGFsVmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgcnVsZW5hbWU6JycsXHJcbiAgICAgICAgYXBwbmFtZTonJyxcclxuICAgICAgICBydWxlZGVzOicnLFxyXG4gICAgICAgIHJlc3VsdDonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW9kYWxTaG93ID0gIGU9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIG1vZGFsVmlzaWJsZTogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBjdXJTbmlwcGV0Q2hhbmdlID0gKGUpPT57XHJcbiAgICBjb25zdCBjdXIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmN1clNuaXBwZXQpXHJcbiAgICBjb25zdCBjb21waWxlQ3VyID0gT2JqZWN0LmFzc2lnbih7fSx0aGlzLnN0YXRlLmN1clNuaXBwZXQse25hbWU6IGUudGFyZ2V0LnZhbHVlfSlcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGN1clNuaXBwZXQ6IF8uY2xvbmVEZWVwKGNvbXBpbGVDdXIpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNsZWFyRGF0YSA9ICgpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzZWxBcnI6W10sLy/ooqvpgInkuK3nmoTmlbDmja7mrrVcclxuICAgICAgICB3aG9sZUFycjpbXSwvL+acgOe7iOe8luivkeaVsOe7hFxyXG4gICAgICAgIGN1clNuaXBwZXQ6e1xyXG4gICAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgICBzdGFydDonJyxcclxuICAgICAgICAgIGVuZDonJyxcclxuICAgICAgICAgIHN0cjogJycsXHJcbiAgICAgICAgICBuYW1lOicnLFxyXG4gICAgICAgICAgc2VsZWN0ZWQ6JydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhdHRlcm46JycsXHJcbiAgICAgICAgcmVzdWx0OicnXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtZXNzYWdlQ2hhbmdlID0gKGUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBtZXNzYWdlOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBjdXJydWxlQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VycnVsZTogdmFsdWUsXHJcbiAgICAgICAgaXNTZWxlY3RNb2RlbDpmYWxzZSxcclxuICAgICAgICBpc0V4aXN0TW9kZWw6IHRydWUsXHJcbiAgICAgICAgc2VsQXJyOltdLC8v5YiS6K+N5pe26KKr6YCJ5Lit55qE5pWw5o2u5L6LXHJcbiAgICAgICAgd2hvbGVBcnI6W10sLy/pgJrov4fpgInkuK3nmoTmlbDmja7kvovvvIznvJbor5Hlh7rnmoTmlbTmnaHmlbDmja7kvotcclxuICAgICAgfSwoKT0+e1xyXG4gICAgICAgIC8v5q2k5pe25Y+W5raI5YiS6K+N5qih5byPLOW5tuWMuemFjeWHunBhdHRlcm5cclxuICAgICAgICBsZXQgcGF0dGVybiA9ICcnXHJcbiAgICAgICAgY29uc3QgcnVsZUxpc3QgPSB0aGlzLnN0YXRlLnJ1bGVMaXN0XHJcbiAgICAgICAgaWYodmFsdWUgPT09ICcnKXtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBwYXR0ZXJuOicnXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBydWxlTGlzdCl7XHJcbiAgICAgICAgICAgIGlmKGl0ZW0ucnVsZW5hbWUgPT09IHZhbHVlKXtcclxuICAgICAgICAgICAgICBwYXR0ZXJuID0gaXRlbS5wYXR0ZXJuXHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBwYXR0ZXJuQ2hhbmdlID0gKGUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwYXR0ZXJuOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyBzZXRBY3RpdmVLZXkgPSAodmFsdWUpPT57XHJcbiAgLy8gICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gIC8vICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAvLyAgICAgICBhY3RpdmVLZXk6IHZhbHVlXHJcbiAgLy8gICAgIH0pXHJcbiAgLy8gICB9XHJcbiAgLy8gfVxyXG4gIGRvQW5hbHlzaXMgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5zdGF0ZS5tZXNzYWdlICE9PSAnJyAmJiB0aGlzLnN0YXRlLnBhdHRlcm4gIT09ICcnKXtcclxuICAgICAgY29uc3QgeyBtZXNzYWdlLCBwYXR0ZXJuIH0gPSAgdGhpcy5zdGF0ZVxyXG4gICAgICB3eUF4aW9zUG9zdCgnUnVsZS9nZXRNc2dCeUdyb2snLHttZXNzYWdlLCBwYXR0ZXJufSwocmVzdWx0KT0+e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3BvbnNlXHJcbiAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGxhc3RPbmU6IHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuc3RhdGUubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IHRoaXMuc3RhdGUucGF0dGVybixcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogdGhpcy5zdGF0ZS5yZXN1bHQsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfmirHmrYnvvIzmlbDmja7lrp7kvovlkozop6PmnpDop4TliJnlv4XpobvloavlhpknKTtcclxuICAgIH1cclxuICB9XHJcbiAgY3VyVGltZUNoYW5nZSA9ICh2YWx1ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGN1clRpbWU6IHZhbHVlXHJcbiAgICAgIH0sKCk9PntcclxuICAgICAgICB0aGlzLmdldExvZygpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pel5b+XXHJcbiAgZ2V0TG9nID0gKCk9PntcclxuICAgIGNvbnN0IHtjb21waWxlX3N0YXR1cyxncm91cF9hcHB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3Qgc3RhcnRfdGltZSA9IHRoaXMuc3RhdGUuY3VyVGltZVswXVxyXG4gICAgY29uc3QgbGFzdF90aW1lID0gdGhpcy5zdGF0ZS5jdXJUaW1lWzFdXHJcblxyXG4gICAgY29uc3QgaW5mbyA9IHtjb21waWxlX3N0YXR1cyxzdGFydF90aW1lLGxhc3RfdGltZSxncm91cF9hcHB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBpc1NwaW5pbmc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHd5QXhpb3NQb3N0KCdFbGFzdGljL2dldExvZ3MnLHtpbmZvfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGN1cnhEYXRhID0gXy5jbG9uZURlZXAocmVzcG9uc2VEYXRhLnh4eClcclxuICAgICAgY29uc3Qgc3RhdHVzSW5kZXggPSBfLmZpbmRJbmRleChjdXJ4RGF0YSwobyk9PntyZXR1cm4gby5kYXRhSW5kZXggPT09ICdzdGF0dXMnfSlcclxuICAgICAgY3VyeERhdGFbc3RhdHVzSW5kZXhdLnJlbmRlciA9ICh0ZXh0LCByZWNvcmQsIGluZGV4KT0+PHNwYW4+e3RleHQ9PT0nc3VjY2Vzcyc/PGkgY3NzPXt7Y29sb3I6XCIjMDFiZDRjXCJ9fSBjbGFzc05hbWU9XCJmYSBmYS1jaGVja1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT46PGkgY2xhc3NOYW1lPVwiZmEgZmEtbWludXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+fTwvc3Bhbj5cclxuICAgICAgY3VyeERhdGEucHVzaCh7XHJcbiAgICAgICAgdGl0bGU6ICfmk43kvZwnLFxyXG4gICAgICAgIGRhdGFJbmRleDogJ2FzZXhhbXBsZScsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PjxCdXR0b24gc2l6ZT1cInNtYWxsXCIgdHlwZT1cInByaW1hcnlcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIn19IG9uQ2xpY2s9eygpPT50aGlzLmFzRXhhbXBsZShyZWNvcmQubWVzc2FnZSxyZWNvcmQuYXBwbmFtZSl9PlxyXG4gICAgICAgIOiuvuS4uuaXpeW/l+agt+S+i1xyXG4gICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICB9KVxyXG4gICAgICBjb25zdCBjdXJUaW1lID0gW11cclxuICAgICAgY3VyVGltZS5wdXNoKHJlc3BvbnNlRGF0YS5zdGFydF90aW1lKVxyXG4gICAgICBjdXJUaW1lLnB1c2gocmVzcG9uc2VEYXRhLmxhc3RfdGltZSlcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHhEYXRhOiBjdXJ4RGF0YSxcclxuICAgICAgICAgIHlEYXRhOiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgICAgY3VyVGltZSxcclxuICAgICAgICAgIGlzU3BpbmluZzogZmFsc2VcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+iuvuS4uuagt+S+i1xyXG4gIGFzRXhhbXBsZSA9IChtZXNzYWdlLGFwcG5hbWUpPT57XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgLy/mraTml7blsIblt7Lnu4/liJLor43nmoTmlbDmja7muIXpmaTvvIzlsIZtZXNzYWdl5ZKMbWVzc2FnZUZvclNlbGVjdE1vZGVs5ZCM5q2lXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIG1lc3NhZ2VGb3JTZWxlY3RNb2RlbDogbWVzc2FnZSxcclxuICAgICAgcGF0dGVybjonJywgLy/kvpvljLnphY3nmoTmraPliJlcclxuICAgICAgcmVzdWx0OiAnJywgLy/op6PmnpDlh7rmnaXnmoTnu5PmnpxcclxuICAgICAgbGFzdE9uZTogeyAgIC8v5pyA6L+R5LiA5qyh5omn6KGM6Kej5p6Q5LmL5ZCO55qE5LiJ5Liq6YeP55qE5YC8XHJcbiAgICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgICAgcGF0dGVybjogJycsXHJcbiAgICAgICAgcmVzdWx0OiAnJyxcclxuICAgICAgfSxcclxuICAgICAgc2VsQXJyOltdLC8v5YiS6K+N5pe26KKr6YCJ5Lit55qE5pWw5o2u5L6LXHJcbiAgICAgIHdob2xlQXJyOltdLC8v6YCa6L+H6YCJ5Lit55qE5pWw5o2u5L6L77yM57yW6K+R5Ye655qE5pW05p2h5pWw5o2u5L6LXHJcbiAgICAgIGN1clNuaXBwZXQ6eyAvL+acgOi/keS4gOasoemAieS4reeahOaVsOaNruS+i+eahOWQhOS4quWxnuaAp+S/oeaBr1xyXG4gICAgICAgIGlkOicnLFxyXG4gICAgICAgIHN0YXJ0OicnLFxyXG4gICAgICAgIGVuZDonJyxcclxuICAgICAgICBzdHI6ICcnLFxyXG4gICAgICAgIG5hbWU6JycsXHJcbiAgICAgICAgc2VsZWN0ZWQ6JydcclxuICAgICAgfSxcclxuICAgICAgY3VycnVsZTonJywgLy/lt7LmnInop4TliJnkuK3pgInmi6nml7bvvIzooqvpgInkuK3nmoTop4TliJlcclxuICAgICAgZHJhd2VyVmlzaWJsZTogdHJ1ZSxcclxuICAgICAgYXBwbmFtZVxyXG4gICAgfSwoKT0+e1xyXG4gICAgICB0aGlzLmdldEN1clJ1bGVMaXN0KGFwcG5hbWUpXHJcbiAgICB9KVxyXG4gIH1cclxuICBpc0xlZ2FsID0gKCk9PntcclxuICAgIGNvbnN0IHtwYXR0ZXJuLG1lc3NhZ2UscmVzdWx0fSA9IHRoaXMuc3RhdGVcclxuICAgIGxldCBpc0xlZ2FsID0gdHJ1ZVxyXG4gICAgaWYoXHJcbiAgICAgIHBhdHRlcm4gPT09IHRoaXMuc3RhdGUubGFzdE9uZS5wYXR0ZXJuICYmXHJcbiAgICAgIF8uaXNFcXVhbChtZXNzYWdlLCB0aGlzLnN0YXRlLmxhc3RPbmUubWVzc2FnZSkgJiZcclxuICAgICAgXy5pc0VxdWFsKHJlc3VsdCwgdGhpcy5zdGF0ZS5sYXN0T25lLnJlc3VsdClcclxuICAgICl7XHJcbiAgICAgIGlmKHJlc3VsdCAhPT0gJycpe1xyXG4gICAgICAgIGlmKHJlc3VsdCAhPT0ne30nICYmIHJlc3VsdCAhPT0nbnVsbCcpe1xyXG4gICAgICAgICAgLy90aGlzLm1vZGFsU2hvdygpXHJcbiAgICAgICAgICBpc0xlZ2FsID0gdHJ1ZVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgaXNMZWdhbCA9IGZhbHNlXHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcoJ+inhOWImeacieivrycpXHJcbiAgICAgICAgfVxyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBpc0xlZ2FsID0gZmFsc2VcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcoJ+ivt+WFiOWhq+WGmeinhOWImScpXHJcbiAgICAgIH1cclxuICAgIH1lbHNle1xyXG4gICAgICBpc0xlZ2FsID0gZmFsc2VcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfkvaDov5jmnKrmiafooYzop6PmnpDvvIzmiJbogIXmm7TmlLnmlbDmja7lkI7mnKrph43mlrDop6PmnpAnKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc0xlZ2FsXHJcbiAgfVxyXG4gIHJlYWR5U2F2ZSA9ICgpPT57XHJcbiAgICBpZih0aGlzLmlzTGVnYWwoKSl7XHJcbiAgICAgIHRoaXMubW9kYWxTaG93KClcclxuICAgIH1cclxuICB9XHJcbiAgLy/kv53lrZjop4TliJlcclxuICBzYXZlUnVsZSA9ICgpPT57XHJcbiAgICBpZih0aGlzLnN0YXRlLnJ1bGVuYW1lICE9PSAnJyAmJiBmb3JOYW1lLnRlc3QodGhpcy5zdGF0ZS5ydWxlbmFtZSkpe1xyXG4gICAgICBjb25zdCB7cnVsZW5hbWUscnVsZWRlcyxtZXNzYWdlLHBhdHRlcm4saWQsYXBwbmFtZX0gPSB0aGlzLnN0YXRlXHJcbiAgICAgIHd5QXhpb3NQb3N0KCdSdWxlL3NhdmVSdWxlJyx7cnVsZW5hbWUscnVsZWRlcyxtZXNzYWdlLHBhdHRlcm4saWQsYXBwbmFtZX0sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgdGhpcy5tb2RhbENhbmNlbCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfop4TliJnlkI3np7DmnKrloavlhpnmiJbloavlhpnmnInor68nKVxyXG4gICAgfVxyXG4gIH1cclxuICBydWxlbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcnVsZW5hbWU6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJ1bGVkZXNDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHJ1bGVkZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL+aKveWxiee7hOS7tlxyXG4gIHNob3dEcmF3ZXIgPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZHJhd2VyVmlzaWJsZTogdHJ1ZSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBkcmF3ZXJDbG9zZSA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBzZWxBcnI6W10sLy/ooqvpgInkuK3nmoTmlbDmja7mrrVcclxuICAgICAgd2hvbGVBcnI6W10sLy/mnIDnu4jnvJbor5HmlbDnu4RcclxuICAgICAgY3VyU25pcHBldDp7XHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgc3RhcnQ6JycsXHJcbiAgICAgICAgZW5kOicnLFxyXG4gICAgICAgIHN0cjogJycsXHJcbiAgICAgICAgbmFtZTonJyxcclxuICAgICAgICBzZWxlY3RlZDonJ1xyXG4gICAgICB9LFxyXG4gICAgICBydWxlbmFtZTonJyxcclxuICAgICAgYXBwbmFtZTonJyxcclxuICAgICAgcnVsZWRlczonJyxcclxuICAgICAgbGFzdE9uZToge1xyXG4gICAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICAgIHBhdHRlcm46ICcnLFxyXG4gICAgICAgIHJlc3VsdDogJycsXHJcbiAgICAgIH0sXHJcbiAgICAgIG1lc3NhZ2U6JycsXHJcbiAgICAgIHBhdHRlcm46JycsXHJcbiAgICAgIHJlc3VsdDonJyxcclxuICAgICAgZHJhd2VyVmlzaWJsZTogZmFsc2VcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBncm91cF9hcHBDaGFuZ2UgPSAodmFsdWUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBncm91cF9hcHA6IHZhbHVlXHJcbiAgICAgIH0sKCk9PntcclxuICAgICAgICB0aGlzLmdldExvZygpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRpc3BsYXlSZW5kZXIgPSAobGFiZWwpPT57XHJcbiAgICByZXR1cm4gbGFiZWwuam9pbignIC8gJylcclxuICB9XHJcbiAgLy/msJTms6HmoYbnm7jlhbNcclxuICBjaGFuZ2VDb25kaXRpb24gPSAoKSA9PiB7XHJcbiAgICAvL+atpOWkhOWIpOaWreaYr+WQpuS/ruaUuei/h+eOsOacieinhOWImVxyXG5cclxuICB9XHJcblxyXG4gIGNvbmZpcm0gPSAoKSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgcG9wVmlzaWJsZTogZmFsc2UgfSk7XHJcbiAgICBjb25zdCB7IGNvbmRpdGlvbiB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgaWYoY29uZGl0aW9uKXtcclxuICAgICAgLy/mraTlpITlsIZydWxl5YWz6IGU5YiwYXBwXHJcbiAgICAgIGNvbnN0IHsgY3VycnVsZSwgYXBwbmFtZSB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgICBjb25zdCBpbmZvID0ge31cclxuICAgICAgaW5mby5ydWxlbmFtZSA9IGN1cnJ1bGVcclxuICAgICAgaW5mby5hcHBuYW1lID0gYXBwbmFtZVxyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VwZGF0ZVNvdXJjZUJ5QXBwUnVsZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1lbHNle1xyXG4gICAgICAvL+atpOWkhOS/neWtmOS4uuaWsOeahHJ1bGVcclxuICAgICAgdGhpcy5zaG93TW9kYWwoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIGNhbmNlbCA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBwb3BWaXNpYmxlOiBmYWxzZSB9KTtcclxuICAgIG1lc3NhZ2Uud2FybmluZygn5oKo5bey5Y+W5raI6K+l5pON5L2cJyk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVWaXNpYmxlQ2hhbmdlID0gcG9wVmlzaWJsZSA9PiB7XHJcblxyXG4gICAgaWYoIXRoaXMuaXNMZWdhbCgpKXtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjb25zdCBleGlzdFJ1bGUgPSB0aGlzLnN0YXRlLmN1cnJ1bGVcclxuICAgIGxldCBleGlzdFJ1bGVQYXR0ZXJuID0gJydcclxuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5zdGF0ZS5ydWxlTGlzdCl7XHJcbiAgICAgIGlmKGl0ZW0ucnVsZW5hbWUgPT09IGV4aXN0UnVsZSl7XHJcbiAgICAgICAgZXhpc3RSdWxlUGF0dGVybiA9IGl0ZW0ucGF0dGVyblxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHsgcGF0dGVybiB9ICA9IHRoaXMuc3RhdGVcclxuXHJcbiAgICBjb25zdCBpc0hpZGUgPSBleGlzdFJ1bGVQYXR0ZXJuID09PSBwYXR0ZXJuXHJcbiAgICBpZihpc0hpZGUpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwb3BWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25kaXRpb246IHRydWVcclxuICAgICAgfSwoKT0+e1xyXG4gICAgICAgIHRoaXMuY29uZmlybSgpXHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcG9wVmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25kaXRpb246IGZhbHNlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHBhZ2VTaXplQ2hhbmdlID0gKGN1cnJlbnQsIHNpemUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwYWdlU2l6ZTogc2l6ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2VcclxuICB9XHJcbiAgcmVuZGVyKCl7XHJcbiAgICBsZXQgc3RyID0gJydcclxuICAgIGlmKHRoaXMuc3RhdGUucmVzdWx0KXtcclxuICAgICAgc3RyID0gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZSh0aGlzLnN0YXRlLnJlc3VsdCksIG51bGwsIDQpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxSb3cgY3NzPXt7bWFyZ2luVG9wOlwiMjBweFwifX0+XHJcbiAgICAgICAgICA8Q29sPlxyXG4gICAgICAgICAgICA8QW1vZHVsZT5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsaGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+XHJcblxyXG4gICAgICAgICAgICAgICAgICA8Q2FzY2FkZXJcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXt0aGlzLnN0YXRlLmdyb3VwQXBwTGlzdH1cclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5UmVuZGVyPXt0aGlzLmRpc3BsYXlSZW5kZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuZ3JvdXBfYXBwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmdyb3VwX2FwcH1cclxuICAgICAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNzcz17e21pbldpZHRoOlwiMjQwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgIDxTZWxlY3Qgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgICAgICBjc3M9e3ttaW5XaWR0aDpcIjE2MHB4XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuY29tcGlsZV9zdGF0dXN9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY29tcGlsZV9zdGF0dXNDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIGtleT0nYWxsJyB2YWx1ZT0nYWxsJz7miYDmnInml6Xlv5c8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIGtleT0ndW5jb21waWxlJyB2YWx1ZT0ndW5jb21waWxlJz7mnKrop6PmnpDml6Xlv5c8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIGtleT0nY29tcGlsZWQnIHZhbHVlPSdjb21waWxlZCc+5bey6Kej5p6Q5pel5b+XPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8V3lEYXRlUGlja2VyXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VUaW1lQ2hhbmdlPXsgdGhpcy5jdXJUaW1lQ2hhbmdlIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJUaW1lPXt0aGlzLnN0YXRlLmN1clRpbWV9XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgPFd5VGFibGVcclxuICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YS5sZW5ndGg+MD90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhLmxlbmd0aD4wP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICBleHBhbmRlZFJvd1JlbmRlcj17cmVjb3JkID0+IHsgcmV0dXJuIDxkaXYgc3R5bGU9e3sgbWFyZ2luOiAwIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cHJlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHsgSlNPTi5zdHJpbmdpZnkocmVjb3JkLnN1YmRhdGEsIG51bGwsIDQpIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wcmU+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvQW1vZHVsZT5cclxuICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgIDwvUm93PlxyXG5cclxuICAgICAgICA8TW9kYWxcclxuICAgICAgICAgIHRpdGxlPVwi5a2X5q615o+Q5Y+WXCJcclxuICAgICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUudmlzaWJsZX1cclxuICAgICAgICAgIG9uT2s9e3RoaXMuaGFuZGxlT2t9XHJcbiAgICAgICAgICBvbkNhbmNlbD17dGhpcy5oYW5kbGVDYW5jZWx9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPHA+5a2X5q615ZCN77yaPElucHV0XHJcbiAgICAgICAgICAgIGNzcz17e3dpZHRoOlwiODAlXCJ9fVxyXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5jdXJTbmlwcGV0Lm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmN1clNuaXBwZXRDaGFuZ2V9XHJcbiAgICAgICAgICAvPjwvcD5cclxuICAgICAgICAgIDxwPuWMuemFjeWvueixoe+8mnt0aGlzLnN0YXRlLmN1clNuaXBwZXQuc3RyfTwvcD5cclxuICAgICAgICA8L01vZGFsPlxyXG4gICAgICAgIDxNb2RhbFxyXG4gICAgICAgICAgdGl0bGU9XCLkuLrop4TliJnlkb3lkI1cIlxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5tb2RhbFZpc2libGV9XHJcbiAgICAgICAgICBvbk9rPXt0aGlzLnNhdmVSdWxlfVxyXG4gICAgICAgICAgb25DYW5jZWw9e3RoaXMucGFydENhbmNlbH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIn19PuinhOWImeWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+PElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnJ1bGVuYW1lfSBvbkNoYW5nZT17dGhpcy5ydWxlbmFtZUNoYW5nZX0vPjwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIn19PuWMuemFjeW6lOeUqO+8mjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+XHJcbiAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgc2hvd1NlYXJjaFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmFwcG5hbWVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICBjc3M9e3t3aWR0aDpcIjEwMCVcIn19XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dCwgb3B0aW9uKSA9PlxyXG4gICAgICAgICAgICAgICAgICBvcHRpb24ucHJvcHMuY2hpbGRyZW4udG9Mb3dlckNhc2UoKS5pbmRleE9mKGlucHV0LnRvTG93ZXJDYXNlKCkpID49IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmFwcG5hbWV9XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cIlwiPuS4jemZkDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFwcE5hbWVMaXN0ICYmIHRoaXMuc3RhdGUuYXBwTmFtZUxpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYXBwTmFtZUxpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW19IHZhbHVlPXtpdGVtfT57aXRlbX08L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCJ9fT7op4TliJnmj4/ov7DvvJo8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PjxUZXh0QXJlYSB2YWx1ZT17dGhpcy5zdGF0ZS5ydWxlZGVzfSBvbkNoYW5nZT17dGhpcy5ydWxlZGVzQ2hhbmdlfS8+PC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L01vZGFsPlxyXG4gICAgICAgIDxEcmF3ZXJcclxuICAgICAgICAgIHRpdGxlPVwi6KeE5YiZ5Yy56YWNXCJcclxuICAgICAgICAgIHdpZHRoPVwiODAlXCJcclxuICAgICAgICAgIHBsYWNlbWVudD1cInJpZ2h0XCJcclxuICAgICAgICAgIGNsb3NhYmxlPXtmYWxzZX1cclxuICAgICAgICAgIG9uQ2xvc2U9e3RoaXMuZHJhd2VyQ2xvc2V9XHJcbiAgICAgICAgICB2aXNpYmxlPXt0aGlzLnN0YXRlLmRyYXdlclZpc2libGV9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT7mlbDmja7lrp7kvos6IDwvc3Bhbj5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuaXNTZWxlY3RNb2RlbCA/XHJcbiAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOlwiNXB4IDAgMCAxMHB4XCIsd2lkdGg6XCI4MCVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsYm9yZGVyOlwiIzIyYzk2MCBzb2xpZCAxcHhcIixwb3NpdGlvbjpcInJlbGF0aXZlXCIsbWluSGVpZ2h0OlwiNTBweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e3t3b3JkV3JhcDpcImJyZWFrLXdvcmRcIn19PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS53aG9sZUFyci5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLndob2xlQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kOml0ZW0uc2VsZWN0ZWQ/J3JnYmEoMjA0LDI1NSwwLDAuOCknOidub25lJ319IGtleT17aXRlbS5pZH0+e2l0ZW0uc3RyfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLm1lc3NhZ2VGb3JTZWxlY3RNb2RlbFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8VGV4dEFyZWFcclxuICAgICAgICAgICAgICAgICAgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fVxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlRm9yU2VsZWN0TW9kZWx9XHJcbiAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXt0aGlzLnNlbGVjdFdvcmR9XHJcbiAgICAgICAgICAgICAgICAgIGNzcz17e2JvcmRlcjogXCJub25lXCIscG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6XCIwcHhcIix0b3A6XCIwcHhcIixiYWNrZ3JvdW5kOlwibm9uZVwiLGNvbG9yOlwicmdiYSgxMjMsMTExLDI1NSwwLjUpXCJ9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgIDxUZXh0QXJlYVxyXG4gICAgICAgICAgICAgICAgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubWVzc2FnZX1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm1lc3NhZ2VDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICBjc3M9e3t3aWR0aDpcIjgwJVwifX1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZ0xlZnQ6XCIxMDBweFwifX0+XHJcbiAgICAgICAgICAgIDxzcGFuPjxDaGVja2JveCBvbkNoYW5nZT17dGhpcy5pc1NlbGVjdE1vZGVsQ2hhbmdlfSBjaGVja2VkPXt0aGlzLnN0YXRlLmlzU2VsZWN0TW9kZWx9PuWIkuivjeWMuemFjTwvQ2hlY2tib3g+PC9zcGFuPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS53aG9sZUFyci5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICA8c3Bhbj48QnV0dG9uIG9uQ2xpY2s9e3RoaXMuY2xlYXJEYXRhfSBzaXplPVwic21hbGxcIiB0eXBlPVwicHJpbWFyeVwiPumHjeaWsOmAieaLqTwvQnV0dG9uPjwvc3Bhbj5cclxuICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjIwcHhcIixkaXNwbGF5OiBcImlubGluZS1ibG9ja1wifX0+XHJcbiAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgc2hvd1NlYXJjaFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uRmlsdGVyUHJvcD1cImNoaWxkcmVuXCJcclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmN1cnJ1bGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fVxyXG4gICAgICAgICAgICAgICAgc2l6ZT1cInNtYWxsXCJcclxuICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0LCBvcHRpb24pID0+XHJcbiAgICAgICAgICAgICAgICAgIG9wdGlvbi5wcm9wcy5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuY3VycnVsZX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8T3B0aW9uIGtleT1cIm15a2V5XCIgdmFsdWU9XCJcIj7or7fpgInmi6k8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnJ1bGVMaXN0ICYmIHRoaXMuc3RhdGUucnVsZUxpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ydWxlTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxPcHRpb24ga2V5PXtpdGVtLnJ1bGVuYW1lfSB2YWx1ZT17aXRlbS5ydWxlbmFtZX0gdGl0bGU9e2l0ZW0ucnVsZW5hbWV9PntpdGVtLnJ1bGVuYW1lfTwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIDwvU2VsZWN0PlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZzogXCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7dmVydGljYWxBbGlnbjpcInRvcFwifX0+R3Jva+ino+aekDogPC9zcGFuPjxUZXh0QXJlYSBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19IHZhbHVlPXt0aGlzLnN0YXRlLnBhdHRlcm59IG9uQ2hhbmdlPXt0aGlzLnBhdHRlcm5DaGFuZ2V9ICBjc3M9e3t3aWR0aDpcIjgwJVwifX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuZG9BbmFseXNpc30+6Kej5p6QPC9CdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZzogXCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7dmVydGljYWxBbGlnbjpcInRvcFwifX0+6Kej5p6Q57uT5p6c77yaPC9zcGFuPjxzcGFuIGNzcz17e292ZXJmbG93OlwiYXV0b1wiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIix3aWR0aDogXCI4MCVcIixtaW5IZWlnaHQ6XCIyMDBweFwiLGJvcmRlcjpcInJnYmEoMjU1LDI1NSwyNTUsMC4yKSBzb2xpZCAxcHhcIn19PlxyXG4gICAgICAgICAgICAgIDxwcmU+e1xyXG4gICAgICAgICAgICAgICAgc3RyXHJcbiAgICAgICAgICAgICAgfTwvcHJlPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc0V4aXN0TW9kZWw/XHJcbiAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgdGl0bGU9XCLmgqjmm7TmlLnkuoblvZPliY3miYDpgInop4TliJnvvIzmmK/lkKblkb3lkI3kuLrmlrDnmoTop4TliJnlubblhbPogZTmraTlupTnlKjvvJ9cIlxyXG4gICAgICAgICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUucG9wVmlzaWJsZX1cclxuICAgICAgICAgICAgICBvblZpc2libGVDaGFuZ2U9e3RoaXMuaGFuZGxlVmlzaWJsZUNoYW5nZX1cclxuICAgICAgICAgICAgICBvbkNvbmZpcm09e3RoaXMuY29uZmlybX1cclxuICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy5jYW5jZWx9XHJcbiAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICBjYW5jZWxUZXh0PVwi5Y+W5raIXCJcclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCI+5bCG6K+l6KeE5YiZ5YWz6IGU5Yiw5q2k5pel5b+X5L6L5omA5Zyo5bqU55SoPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICA8QnV0dG9uICB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMucmVhZHlTYXZlfSA+5L+d5a2YR3Jva+ino+aekOinhOWImTwvQnV0dG9uPlxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb25maWd1cmVcclxuIl19 */\"\n};\n\nvar _ref6 = process.env.NODE_ENV === \"production\" ? {\n  name: \"knctzk-Configure\",\n  styles: \"min-width:160px;margin-left:20px;label:Configure;\"\n} : {\n  name: \"knctzk-Configure\",\n  styles: \"min-width:160px;margin-left:20px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref7 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1xs40gq-Configure\",\n  styles: \"width:80%;label:Configure;\"\n} : {\n  name: \"1xs40gq-Configure\",\n  styles: \"width:80%;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref8 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1krelqj-Configure\",\n  styles: \"display:flex;line-height:40px;label:Configure;\"\n} : {\n  name: \"1krelqj-Configure\",\n  styles: \"display:flex;line-height:40px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref9 = process.env.NODE_ENV === \"production\" ? {\n  name: \"xnuaik-Configure\",\n  styles: \"flex:0 0 100px;label:Configure;\"\n} : {\n  name: \"xnuaik-Configure\",\n  styles: \"flex:0 0 100px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref10 = process.env.NODE_ENV === \"production\" ? {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\"\n} : {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref11 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1krelqj-Configure\",\n  styles: \"display:flex;line-height:40px;label:Configure;\"\n} : {\n  name: \"1krelqj-Configure\",\n  styles: \"display:flex;line-height:40px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref12 = process.env.NODE_ENV === \"production\" ? {\n  name: \"xnuaik-Configure\",\n  styles: \"flex:0 0 100px;label:Configure;\"\n} : {\n  name: \"xnuaik-Configure\",\n  styles: \"flex:0 0 100px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref13 = process.env.NODE_ENV === \"production\" ? {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\"\n} : {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref14 = process.env.NODE_ENV === \"production\" ? {\n  name: \"llaggy-Configure\",\n  styles: \"width:100%;label:Configure;\"\n} : {\n  name: \"llaggy-Configure\",\n  styles: \"width:100%;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref15 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1krelqj-Configure\",\n  styles: \"display:flex;line-height:40px;label:Configure;\"\n} : {\n  name: \"1krelqj-Configure\",\n  styles: \"display:flex;line-height:40px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbVJ1bGUvQ29uZmlndXJlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXMwQmUiLCJmaWxlIjoiL2luZHVzdHJ5L2FwcC9zcmMvU3lzdGVtUnVsZS9Db25maWd1cmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXHJcbmltcG9ydCB7IFJvdywgQ29sLCBJbnB1dCwgQnV0dG9uLCBDb2xsYXBzZSwgSWNvbiwgU2VsZWN0LCBtZXNzYWdlLCBDaGVja2JveCwgTW9kYWwsIFR5cG9ncmFwaHksIERyYXdlciwgQ2FzY2FkZXIsIFBvcGNvbmZpcm0gfSBmcm9tICdhbnRkJ1xyXG5cclxuXHJcbmltcG9ydCBXeVRhYmxlIGZyb20gJy4uL2NvbXBvbmVudHMvV3lUYWJsZSdcclxuaW1wb3J0IFd5RGF0ZVBpY2tlciBmcm9tICcuLi9jb21wb25lbnRzL1d5RGF0ZVBpY2tlcidcclxuaW1wb3J0IHsgQW1vZHVsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvQW1vZHVsZSdcclxuaW1wb3J0IHsgd3lBeGlvc1Bvc3QgfSBmcm9tICcuLi9jb21wb25lbnRzL1d5QXhpb3MnXHJcbmltcG9ydCBXeVNwaW4gZnJvbSAnLi4vY29tcG9uZW50cy9XeVNwaW4nXHJcbmltcG9ydCBkZWNvZGVBcnIgZnJvbSAnLi9kZWNvZGVBcnInXHJcbmltcG9ydCB7IGZvck5hbWUgfSBmcm9tICcuLi9jb21wb25lbnRzL1JlZ0V4cCdcclxuXHJcbmNvbnN0IHsgVGV4dEFyZWEgfSA9IElucHV0XHJcbmNvbnN0IHsgUGFuZWwgfSA9IENvbGxhcHNlXHJcbmNvbnN0IHsgT3B0aW9uIH0gID0gU2VsZWN0XHJcbmNvbnN0IHsgVGV4dCB9ID0gVHlwb2dyYXBoeVxyXG5jb25zdCBDb2xvckNoYW5nZSA9IHN0eWxlZC5zcGFuKHtcclxuICBiYWNrZ3JvdW5kOlwiIzMzOTljY1wiXHJcbn0pXHJcbmNsYXNzIENvbmZpZ3VyZSBleHRlbmRzIENvbXBvbmVudHtcclxuICBzdGF0ZSA9IHtcclxuICAgIG1lc3NhZ2U6ICcnLCAvL+aXpeW/l+agt+S+i1xyXG4gICAgbWVzc2FnZUZvclNlbGVjdE1vZGVsOicnLCAvL+WIkuivjeaXtuWAmeeahOaXpeW/l+agt+S+i1xyXG4gICAgcGF0dGVybjonJywgLy/kvpvljLnphY3nmoTmraPliJlcclxuICAgIHJlc3VsdDogJycsIC8v6Kej5p6Q5Ye65p2l55qE57uT5p6cXHJcbiAgICBsYXN0T25lOiB7ICAgLy/mnIDov5HkuIDmrKHmiafooYzop6PmnpDkuYvlkI7nmoTkuInkuKrph4/nmoTlgLxcclxuICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgIHBhdHRlcm46ICcnLFxyXG4gICAgICByZXN1bHQ6ICcnLFxyXG4gICAgfSxcclxuXHJcbiAgICB4RGF0YTpbXSxcclxuICAgIHlEYXRhOltdLFxyXG4gICAgcGFnZVNpemU6MTAsXHJcbiAgICBpc1NwaW5pbmc6IGZhbHNlLFxyXG5cclxuICAgIGFjdGl2ZUtleTpbXSxcclxuXHJcbiAgICBjdXJUaW1lOiBbXSxcclxuICAgIC8vaW5kZXhMaXN0OltdLFxyXG4gICAgY29tcGlsZV9zdGF0dXM6J2FsbCcsXHJcblxyXG4gICAgaXNTcGluaW5nOiBmYWxzZSxcclxuXHJcbiAgICBpc1NlbGVjdE1vZGVsOiBmYWxzZSwvL+aYr+WQpuaYr+WIkuivjeWMuemFjeaooeW8j1xyXG4gICAgaXNFeGlzdE1vZGVsOiBmYWxzZSwvL+aYr+WQpuaYr+S7juW3sue7j+acieeahOmHjOmdoumAieeahOaooeW8j1xyXG5cclxuICAgIHNlbEFycjpbXSwvL+WIkuivjeaXtuiiq+mAieS4reeahOaVsOaNruS+i1xyXG4gICAgd2hvbGVBcnI6W10sLy/pgJrov4fpgInkuK3nmoTmlbDmja7kvovvvIznvJbor5Hlh7rnmoTmlbTmnaHmlbDmja7kvotcclxuICAgIGN1clNuaXBwZXQ6eyAvL+acgOi/keS4gOasoemAieS4reeahOaVsOaNruS+i+eahOWQhOS4quWxnuaAp+S/oeaBr1xyXG4gICAgICBpZDonJyxcclxuICAgICAgc3RhcnQ6JycsXHJcbiAgICAgIGVuZDonJyxcclxuICAgICAgc3RyOiAnJyxcclxuICAgICAgbmFtZTonJyxcclxuICAgICAgc2VsZWN0ZWQ6JydcclxuICAgIH0sXHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgIG1vZGFsVmlzaWJsZTogZmFsc2UsXHJcbiAgICBydWxlbmFtZTonJywgLy/lvoXkv53lrZjnmoTmlrDop4TliJnnmoTlkI3np7BcclxuICAgIHJ1bGVkZXM6JycsLy/lvoXkv53lrZjnmoTmlrDop4TliJnnmoTmj4/ov7BcclxuICAgIGFwcG5hbWU6JycsXHJcbiAgICBhcHBOYW1lTGlzdDpbXSxcclxuXHJcbiAgICBkcmF3ZXJWaXNpYmxlOiBmYWxzZSxcclxuICAgIGdyb3VwX2FwcDogWydhbGxfZ3JvdXAnXSxcclxuICAgIGdyb3VwQXBwTGlzdDpbXSxcclxuXHJcbiAgICBjdXJydWxlOicnLCAvL+W3suacieinhOWImeS4remAieaLqeaXtu+8jOiiq+mAieS4reeahOinhOWImVxyXG4gICAgcnVsZUxpc3Q6W10sIC8v5bey5pyJ6KeE5YiZ5YiX6KGoXHJcblxyXG4gICAgcG9wVmlzaWJsZTogZmFsc2UsXHJcbiAgICBjb25kaXRpb246IHRydWVcclxuXHJcbiAgfVxyXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlXHJcbiAgICB0aGlzLmdldExvZygpXHJcbiAgICB0aGlzLmdldEFwcE5hbWUoKVxyXG4gICAgdGhpcy5nZXRHb3VwQXBwTGlzdCgpXHJcbiAgfVxyXG4gIGdldEN1clJ1bGVMaXN0PSAoYXBwbmFtZSk9PntcclxuICAgIHd5QXhpb3NQb3N0KCdSdWxlL2dldFJ1bGVMaXN0Jyx7YXBwbmFtZX0sKHJlc3VsdCk9PntcclxuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCAmJiByZXNwb25zZURhdGEubGVuZ3RoPjApe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgcnVsZUxpc3Q6IHJlc3BvbnNlRGF0YVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGdldEdvdXBBcHBMaXN0ID0gKCk9PntcclxuICAgIHd5QXhpb3NQb3N0KCdHcm91cC9nZXRHcm91cEFwcCcse30sKHJlc3VsdCk9PntcclxuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBncm91cEFwcExpc3Q6IHJlc3BvbnNlRGF0YVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGNvbXBpbGVfc3RhdHVzQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGNvbXBpbGVfc3RhdHVzOnZhbHVlXHJcbiAgICB9LCgpPT57XHJcbiAgICAgIHRoaXMuZ2V0TG9nKClcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y+W6K+N5q2j5YiZ55u45YWzXHJcbiAgaXNTZWxlY3RNb2RlbENoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNTZWxlY3RNb2RlbDogZS50YXJnZXQuY2hlY2tlZCxcclxuICAgICAgICBpc0V4aXN0TW9kZWw6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2VGb3JTZWxlY3RNb2RlbDogZS50YXJnZXQuY2hlY2tlZD90aGlzLnN0YXRlLm1lc3NhZ2U6JycsXHJcbiAgICAgICAgc2VsQXJyOltdLFxyXG4gICAgICAgIHdob2xlQXJyOltdLFxyXG4gICAgICAgIGN1cnJ1bGU6JycsXHJcbiAgICAgICAgcGF0dGVybjonJyxcclxuICAgICAgICByZXN1bHQ6JydcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2VsZWN0V29yZCA9IChldmVudCk9PntcclxuICAgIGNvbnN0IGUgPSB3aW5kb3cuZXZlbnQgfHwgZXZlbnRcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxyXG4gICAgY29uc3QgY3VyTWVzc2FnZSA9IHRoaXMuc3RhdGUubWVzc2FnZVxyXG4gICAgY29uc3Qgc3RhcnQgPSBlLnRhcmdldC5zZWxlY3Rpb25TdGFydFxyXG4gICAgY29uc3QgZW5kID0gZS50YXJnZXQuc2VsZWN0aW9uRW5kXHJcbiAgICAvL+S6pOWPiemAieaLqeWIpOaWrVxyXG4gICAgaWYodGhpcy5pc0ludGVyc2VjdCh0aGlzLnN0YXRlLnNlbEFycixzdGFydCxlbmQpKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfpgInmi6nml6DmlYgs6K+36YG/5YWN5Lqk5Y+J6YCJ5oupJylcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBjdXJNZXNzYWdlLnNsaWNlKHN0YXJ0LCBlbmQpXHJcbiAgICBjb25zdCBub3RyaW0gPSBfLnRyaW0oc2VsZWN0ZWRUZXh0KVxyXG4gICAgY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgY29uc3QgYXNJZCA9IHBhcnNlSW50KHJhbmRvbUNvdW50LDEwKSArIHBhcnNlSW50KGN1clRpbWUsMTApKjEwMFxyXG4gICAgY29uc3QgaWQgPSBhc0lkLnRvU3RyaW5nKClcclxuICAgIGlmKChzZWxlY3RlZFRleHQubGVuZ3RoPjAgJiYgbm90cmltLmxlbmd0aCA9PT0gMCkgfHwgc2VsZWN0ZWRUZXh0Lmxlbmd0aCA9PT0gMCB8fCBzZWxlY3RlZFRleHQgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfor7fkuI3opoHpgInmi6nnqbrlrZfnrKYnKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGlmKHNlbGVjdGVkVGV4dCA9PT0gdGhpcy5zdGF0ZS5tZXNzYWdlKXtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBjdXJTbmlwcGV0OntcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgICBlbmQsXHJcbiAgICAgICAgICBzdHI6IHNlbGVjdGVkVGV4dCxcclxuICAgICAgICAgIG5hbWU6JycsXHJcbiAgICAgICAgICBzZWxlY3RlZDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfSwoKT0+e1xyXG4gICAgICAgIHRoaXMuc2hvd01vZGFsKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0QXBwTmFtZSA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldEFwcE5hbWUnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgYXBwTmFtZUxpc3Q6IHJlc3BvbnNlRGF0YVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGFwcG5hbWVDaGFuZ2UgPSAodmFsdWUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhcHBuYW1lOiB2YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+WwhumAieS4reWtl+espuS4suaVsOe7hOS4reaPkuWFpeacqumAieS4reWtl+espuS4suaVsOe7hFxyXG4gIGNvbXBpbGVBcnIgPSAoYXJyLHN0cik9PntcclxuICAgIGNvbnN0IHJlc29sdmVBcnIgPSBbXVxyXG4gICAgaWYoYXJyICYmIGFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGFyci5tYXAoKGl0ZW0saW5kZXgpPT57XHJcbiAgICAgICAgaWYoaW5kZXggPT09IGFyci5sZW5ndGgtMSl7XHJcbiAgICAgICAgICBpZihpbmRleD09PTAgJiYgaXRlbS5zdGFydCAhPT0gMCl7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkIC0gMVxyXG4gICAgICAgICAgICBub1NlbGVjdC5pZCA9IGlkXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSAwXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IGFycltpbmRleF0uc3RhcnRcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICAgIHJlc29sdmVBcnIucHVzaChub1NlbGVjdClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmVBcnIucHVzaChpdGVtKVxyXG4gICAgICAgICAgY29uc3Qgbm9TZWxlY3QgPSB7fVxyXG4gICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgYXNJZCA9IHBhcnNlSW50KHJhbmRvbUNvdW50LDEwKSArIHBhcnNlSW50KGN1clRpbWUsMTApKjEwMFxyXG4gICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkICsgMVxyXG4gICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgbm9TZWxlY3Quc2VsZWN0ZWQgPSBmYWxzZVxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSBpdGVtLmVuZFxyXG4gICAgICAgICAgbm9TZWxlY3QuZW5kID0gc3RyLmxlbmd0aFxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBpZihpbmRleD09PTAgJiYgaXRlbS5zdGFydCAhPT0gMCl7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkIC0gMVxyXG4gICAgICAgICAgICBub1NlbGVjdC5pZCA9IGlkXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSAwXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IGFycltpbmRleF0uc3RhcnRcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICAgIHJlc29sdmVBcnIucHVzaChub1NlbGVjdClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmVBcnIucHVzaChpdGVtKVxyXG4gICAgICAgICAgY29uc3Qgbm9TZWxlY3QgPSB7fVxyXG4gICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgYXNJZCA9IHBhcnNlSW50KHJhbmRvbUNvdW50LDEwKSArIHBhcnNlSW50KGN1clRpbWUsMTApKjEwMFxyXG4gICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkICsgMVxyXG4gICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgbm9TZWxlY3Quc2VsZWN0ZWQgPSBmYWxzZVxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSBpdGVtLmVuZFxyXG4gICAgICAgICAgbm9TZWxlY3QuZW5kID0gYXJyW2luZGV4KzFdLnN0YXJ0XHJcbiAgICAgICAgICBub1NlbGVjdC5zdHIgPSBzdHIuc2xpY2Uobm9TZWxlY3Quc3RhcnQsIG5vU2VsZWN0LmVuZClcclxuICAgICAgICAgIHJlc29sdmVBcnIucHVzaChub1NlbGVjdClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFyclxyXG4gIH1cclxuICAvL+S6pOWPiemAieaLqeWIpOaWrVxyXG4gIGlzSW50ZXJzZWN0ID0gKGFycixzdGFydCxlbmQpPT57XHJcbiAgICBsZXQgaXNJbiA9IGZhbHNlXHJcbiAgICBpZihhcnIgJiYgYXJyLmxlbmd0aD4wKXtcclxuICAgICAgaXNJbiA9IGFyci5zb21lKGl0ZW09PntcclxuICAgICAgICBjb25zdCBpc3RhcnQgPSBpdGVtLnN0YXJ0XHJcbiAgICAgICAgY29uc3QgaWVuZCA9IGl0ZW0uZW5kXHJcbiAgICAgICAgcmV0dXJuICgoaXN0YXJ0PHN0YXJ0IHx8IGlzdGFydCA9PSBzdGFydCkgJiYgKHN0YXJ0PGllbmQpKSB8fCAoKGlzdGFydDxlbmQpICYmIChlbmQ8aWVuZCB8fCBlbmQgPT0gaWVuZCkpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNJblxyXG4gIH1cclxuXHJcbiAgc2hvd01vZGFsID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBoYW5kbGVPayA9IGUgPT4ge1xyXG4gICAgaWYodGhpcy5zdGF0ZS5jdXJTbmlwcGV0Lm5hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCflrZfmrrXlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IHNlbEFyciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuc2VsQXJyKVxyXG4gICAgICBjb25zdCBpc1JlbmFtZSA9IHNlbEFyci5zb21lKGl0ZW09PntcclxuICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgICBpZihpc1JlbmFtZSl7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKCfor7fkuI3opoHnlKjph43lpI3lrZfmrrXlkI0nKVxyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBjb25zdCBjdXJBcnIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLnNlbEFycilcclxuICAgICAgICBjb25zdCBuZXdBcnIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmN1clNuaXBwZXQpXHJcbiAgICAgICAgY3VyQXJyLnB1c2gobmV3QXJyKVxyXG4gICAgICAgIC8v5a+55pWw57uE5o6S5bqPXHJcbiAgICAgICAgY29uc3QgaGFoYSA9IF8uc29ydEJ5KGN1ckFyciwoaXRlbSk9PntcclxuICAgICAgICAgIHJldHVybiBpdGVtLnN0YXJ0XHJcbiAgICAgICAgfSlcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNlbEFycjogXy5jbG9uZURlZXAoaGFoYSlcclxuICAgICAgICAgIH0sKCk9PntcclxuICAgICAgICAgICAgY29uc3Qgd2hvbGVBcnIgPSB0aGlzLmNvbXBpbGVBcnIodGhpcy5zdGF0ZS5zZWxBcnIsdGhpcy5zdGF0ZS5tZXNzYWdlKVxyXG4gICAgICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgd2hvbGVBcnJcclxuICAgICAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNhbmNlbCgpXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWcgPSBkZWNvZGVBcnIodGhpcy5zdGF0ZS53aG9sZUFyciwgdGhpcy5zdGF0ZS5tZXNzYWdlRm9yU2VsZWN0TW9kZWwpXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiByZWdcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2FuY2VsID0gZSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBjdXJTbmlwcGV0OntcclxuICAgICAgICAgIGlkOicnLFxyXG4gICAgICAgICAgc3RhcnQ6JycsXHJcbiAgICAgICAgICBlbmQ6JycsXHJcbiAgICAgICAgICBzdHI6ICcnLFxyXG4gICAgICAgICAgbmFtZTonJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbW9kYWxDYW5jZWwgPSBlPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBtb2RhbFZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIHNlbEFycjpbXSwvL+iiq+mAieS4reeahOaVsOaNruautVxyXG4gICAgICAgIHdob2xlQXJyOltdLC8v5pyA57uI57yW6K+R5pWw57uEXHJcbiAgICAgICAgY3VyU25pcHBldDp7XHJcbiAgICAgICAgICBpZDonJyxcclxuICAgICAgICAgIHN0YXJ0OicnLFxyXG4gICAgICAgICAgZW5kOicnLFxyXG4gICAgICAgICAgc3RyOiAnJyxcclxuICAgICAgICAgIG5hbWU6JycsXHJcbiAgICAgICAgICBzZWxlY3RlZDonJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcnVsZW5hbWU6JycsXHJcbiAgICAgICAgYXBwbmFtZTonJyxcclxuICAgICAgICBydWxlZGVzOicnLFxyXG4gICAgICAgIGxhc3RPbmU6IHtcclxuICAgICAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICAgICAgcGF0dGVybjogJycsXHJcbiAgICAgICAgICByZXN1bHQ6ICcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWVzc2FnZTonJyxcclxuICAgICAgICBwYXR0ZXJuOicnLFxyXG4gICAgICAgIHJlc3VsdDonJyxcclxuICAgICAgICBkcmF3ZXJWaXNpYmxlOiBmYWxzZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBwYXJ0Q2FuY2VsID0oKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbW9kYWxWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBydWxlbmFtZTonJyxcclxuICAgICAgICBhcHBuYW1lOicnLFxyXG4gICAgICAgIHJ1bGVkZXM6JycsXHJcbiAgICAgICAgcmVzdWx0OicnXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb2RhbFNob3cgPSAgZT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbW9kYWxWaXNpYmxlOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGN1clNuaXBwZXRDaGFuZ2UgPSAoZSk9PntcclxuICAgIGNvbnN0IGN1ciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuY3VyU25pcHBldClcclxuICAgIGNvbnN0IGNvbXBpbGVDdXIgPSBPYmplY3QuYXNzaWduKHt9LHRoaXMuc3RhdGUuY3VyU25pcHBldCx7bmFtZTogZS50YXJnZXQudmFsdWV9KVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VyU25pcHBldDogXy5jbG9uZURlZXAoY29tcGlsZUN1cilcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgY2xlYXJEYXRhID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHNlbEFycjpbXSwvL+iiq+mAieS4reeahOaVsOaNruautVxyXG4gICAgICAgIHdob2xlQXJyOltdLC8v5pyA57uI57yW6K+R5pWw57uEXHJcbiAgICAgICAgY3VyU25pcHBldDp7XHJcbiAgICAgICAgICBpZDonJyxcclxuICAgICAgICAgIHN0YXJ0OicnLFxyXG4gICAgICAgICAgZW5kOicnLFxyXG4gICAgICAgICAgc3RyOiAnJyxcclxuICAgICAgICAgIG5hbWU6JycsXHJcbiAgICAgICAgICBzZWxlY3RlZDonJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGF0dGVybjonJyxcclxuICAgICAgICByZXN1bHQ6JydcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1lc3NhZ2VDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIG1lc3NhZ2U6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGN1cnJ1bGVDaGFuZ2UgPSAodmFsdWUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBjdXJydWxlOiB2YWx1ZSxcclxuICAgICAgICBpc1NlbGVjdE1vZGVsOmZhbHNlLFxyXG4gICAgICAgIGlzRXhpc3RNb2RlbDogdHJ1ZSxcclxuICAgICAgICBzZWxBcnI6W10sLy/liJLor43ml7booqvpgInkuK3nmoTmlbDmja7kvotcclxuICAgICAgICB3aG9sZUFycjpbXSwvL+mAmui/h+mAieS4reeahOaVsOaNruS+i++8jOe8luivkeWHuueahOaVtOadoeaVsOaNruS+i1xyXG4gICAgICB9LCgpPT57XHJcbiAgICAgICAgLy/mraTml7blj5bmtojliJLor43mqKHlvI8s5bm25Yy56YWN5Ye6cGF0dGVyblxyXG4gICAgICAgIGxldCBwYXR0ZXJuID0gJydcclxuICAgICAgICBjb25zdCBydWxlTGlzdCA9IHRoaXMuc3RhdGUucnVsZUxpc3RcclxuICAgICAgICBpZih2YWx1ZSA9PT0gJycpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHBhdHRlcm46JydcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHJ1bGVMaXN0KXtcclxuICAgICAgICAgICAgaWYoaXRlbS5ydWxlbmFtZSA9PT0gdmFsdWUpe1xyXG4gICAgICAgICAgICAgIHBhdHRlcm4gPSBpdGVtLnBhdHRlcm5cclxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgIHBhdHRlcm5cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHBhdHRlcm5DaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhdHRlcm46IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIHNldEFjdGl2ZUtleSA9ICh2YWx1ZSk9PntcclxuICAvLyAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgLy8gICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gIC8vICAgICAgIGFjdGl2ZUtleTogdmFsdWVcclxuICAvLyAgICAgfSlcclxuICAvLyAgIH1cclxuICAvLyB9XHJcbiAgZG9BbmFseXNpcyA9ICgpPT57XHJcbiAgICBpZih0aGlzLnN0YXRlLm1lc3NhZ2UgIT09ICcnICYmIHRoaXMuc3RhdGUucGF0dGVybiAhPT0gJycpe1xyXG4gICAgICBjb25zdCB7IG1lc3NhZ2UsIHBhdHRlcm4gfSA9ICB0aGlzLnN0YXRlXHJcbiAgICAgIHd5QXhpb3NQb3N0KCdSdWxlL2dldE1zZ0J5R3Jvaycse21lc3NhZ2UsIHBhdHRlcm59LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHJlc3VsdDogcmVzcG9uc2VcclxuICAgICAgICAgIH0sKCk9PntcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgbGFzdE9uZToge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5zdGF0ZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogdGhpcy5zdGF0ZS5wYXR0ZXJuLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdCxcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1lbHNle1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+aKseatie+8jOaVsOaNruWunuS+i+WSjOino+aekOinhOWImeW/hemhu+Whq+WGmScpO1xyXG4gICAgfVxyXG4gIH1cclxuICBjdXJUaW1lQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VyVGltZTogdmFsdWVcclxuICAgICAgfSwoKT0+e1xyXG4gICAgICAgIHRoaXMuZ2V0TG9nKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/ojrflj5bml6Xlv5dcclxuICBnZXRMb2cgPSAoKT0+e1xyXG4gICAgY29uc3Qge2NvbXBpbGVfc3RhdHVzLGdyb3VwX2FwcH0gPSB0aGlzLnN0YXRlXHJcbiAgICBjb25zdCBzdGFydF90aW1lID0gdGhpcy5zdGF0ZS5jdXJUaW1lWzBdXHJcbiAgICBjb25zdCBsYXN0X3RpbWUgPSB0aGlzLnN0YXRlLmN1clRpbWVbMV1cclxuXHJcbiAgICBjb25zdCBpbmZvID0ge2NvbXBpbGVfc3RhdHVzLHN0YXJ0X3RpbWUsbGFzdF90aW1lLGdyb3VwX2FwcH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ0VsYXN0aWMvZ2V0TG9ncycse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjb25zdCBzdGF0dXNJbmRleCA9IF8uZmluZEluZGV4KGN1cnhEYXRhLChvKT0+e3JldHVybiBvLmRhdGFJbmRleCA9PT0gJ3N0YXR1cyd9KVxyXG4gICAgICBjdXJ4RGF0YVtzdGF0dXNJbmRleF0ucmVuZGVyID0gKHRleHQsIHJlY29yZCwgaW5kZXgpPT48c3Bhbj57dGV4dD09PSdzdWNjZXNzJz88aSBjc3M9e3tjb2xvcjpcIiMwMWJkNGNcIn19IGNsYXNzTmFtZT1cImZhIGZhLWNoZWNrXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjo8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51c1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT59PC9zcGFuPlxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnYXNleGFtcGxlJyxcclxuICAgICAgICByZW5kZXI6ICh0ZXh0LCByZWNvcmQsIGluZGV4KT0+PEJ1dHRvbiBzaXplPVwic21hbGxcIiB0eXBlPVwicHJpbWFyeVwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwifX0gb25DbGljaz17KCk9PnRoaXMuYXNFeGFtcGxlKHJlY29yZC5tZXNzYWdlLHJlY29yZC5hcHBuYW1lKX0+XHJcbiAgICAgICAg6K6+5Li65pel5b+X5qC35L6LXHJcbiAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgIH0pXHJcbiAgICAgIGNvbnN0IGN1clRpbWUgPSBbXVxyXG4gICAgICBjdXJUaW1lLnB1c2gocmVzcG9uc2VEYXRhLnN0YXJ0X3RpbWUpXHJcbiAgICAgIGN1clRpbWUucHVzaChyZXNwb25zZURhdGEubGFzdF90aW1lKVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBjdXJUaW1lLFxyXG4gICAgICAgICAgaXNTcGluaW5nOiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v6K6+5Li65qC35L6LXHJcbiAgYXNFeGFtcGxlID0gKG1lc3NhZ2UsYXBwbmFtZSk9PntcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAvL+atpOaXtuWwhuW3sue7j+WIkuivjeeahOaVsOaNrua4hemZpO+8jOWwhm1lc3NhZ2XlkoxtZXNzYWdlRm9yU2VsZWN0TW9kZWzlkIzmraVcclxuICAgICAgbWVzc2FnZSxcclxuICAgICAgbWVzc2FnZUZvclNlbGVjdE1vZGVsOiBtZXNzYWdlLFxyXG4gICAgICBwYXR0ZXJuOicnLCAvL+S+m+WMuemFjeeahOato+WImVxyXG4gICAgICByZXN1bHQ6ICcnLCAvL+ino+aekOWHuuadpeeahOe7k+aenFxyXG4gICAgICBsYXN0T25lOiB7ICAgLy/mnIDov5HkuIDmrKHmiafooYzop6PmnpDkuYvlkI7nmoTkuInkuKrph4/nmoTlgLxcclxuICAgICAgICBtZXNzYWdlOiAnJyxcclxuICAgICAgICBwYXR0ZXJuOiAnJyxcclxuICAgICAgICByZXN1bHQ6ICcnLFxyXG4gICAgICB9LFxyXG4gICAgICBzZWxBcnI6W10sLy/liJLor43ml7booqvpgInkuK3nmoTmlbDmja7kvotcclxuICAgICAgd2hvbGVBcnI6W10sLy/pgJrov4fpgInkuK3nmoTmlbDmja7kvovvvIznvJbor5Hlh7rnmoTmlbTmnaHmlbDmja7kvotcclxuICAgICAgY3VyU25pcHBldDp7IC8v5pyA6L+R5LiA5qyh6YCJ5Lit55qE5pWw5o2u5L6L55qE5ZCE5Liq5bGe5oCn5L+h5oGvXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgc3RhcnQ6JycsXHJcbiAgICAgICAgZW5kOicnLFxyXG4gICAgICAgIHN0cjogJycsXHJcbiAgICAgICAgbmFtZTonJyxcclxuICAgICAgICBzZWxlY3RlZDonJ1xyXG4gICAgICB9LFxyXG4gICAgICBjdXJydWxlOicnLCAvL+W3suacieinhOWImeS4remAieaLqeaXtu+8jOiiq+mAieS4reeahOinhOWImVxyXG4gICAgICBkcmF3ZXJWaXNpYmxlOiB0cnVlLFxyXG4gICAgICBhcHBuYW1lXHJcbiAgICB9LCgpPT57XHJcbiAgICAgIHRoaXMuZ2V0Q3VyUnVsZUxpc3QoYXBwbmFtZSlcclxuICAgIH0pXHJcbiAgfVxyXG4gIGlzTGVnYWwgPSAoKT0+e1xyXG4gICAgY29uc3Qge3BhdHRlcm4sbWVzc2FnZSxyZXN1bHR9ID0gdGhpcy5zdGF0ZVxyXG4gICAgbGV0IGlzTGVnYWwgPSB0cnVlXHJcbiAgICBpZihcclxuICAgICAgcGF0dGVybiA9PT0gdGhpcy5zdGF0ZS5sYXN0T25lLnBhdHRlcm4gJiZcclxuICAgICAgXy5pc0VxdWFsKG1lc3NhZ2UsIHRoaXMuc3RhdGUubGFzdE9uZS5tZXNzYWdlKSAmJlxyXG4gICAgICBfLmlzRXF1YWwocmVzdWx0LCB0aGlzLnN0YXRlLmxhc3RPbmUucmVzdWx0KVxyXG4gICAgKXtcclxuICAgICAgaWYocmVzdWx0ICE9PSAnJyl7XHJcbiAgICAgICAgaWYocmVzdWx0ICE9PSd7fScgJiYgcmVzdWx0ICE9PSdudWxsJyl7XHJcbiAgICAgICAgICAvL3RoaXMubW9kYWxTaG93KClcclxuICAgICAgICAgIGlzTGVnYWwgPSB0cnVlXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBpc0xlZ2FsID0gZmFsc2VcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZygn6KeE5YiZ5pyJ6K+vJylcclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlzTGVnYWwgPSBmYWxzZVxyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+35YWI5aGr5YaZ6KeE5YiZJylcclxuICAgICAgfVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGlzTGVnYWwgPSBmYWxzZVxyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+S9oOi/mOacquaJp+ihjOino+aekO+8jOaIluiAheabtOaUueaVsOaNruWQjuacqumHjeaWsOino+aekCcpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzTGVnYWxcclxuICB9XHJcbiAgcmVhZHlTYXZlID0gKCk9PntcclxuICAgIGlmKHRoaXMuaXNMZWdhbCgpKXtcclxuICAgICAgdGhpcy5tb2RhbFNob3coKVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOinhOWImVxyXG4gIHNhdmVSdWxlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUucnVsZW5hbWUgIT09ICcnICYmIGZvck5hbWUudGVzdCh0aGlzLnN0YXRlLnJ1bGVuYW1lKSl7XHJcbiAgICAgIGNvbnN0IHtydWxlbmFtZSxydWxlZGVzLG1lc3NhZ2UscGF0dGVybixpZCxhcHBuYW1lfSA9IHRoaXMuc3RhdGVcclxuICAgICAgd3lBeGlvc1Bvc3QoJ1J1bGUvc2F2ZVJ1bGUnLHtydWxlbmFtZSxydWxlZGVzLG1lc3NhZ2UscGF0dGVybixpZCxhcHBuYW1lfSwocmVzdWx0KT0+e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICAgIGlmKHJlc3BvbnNlRGF0YS5zdGF0dXMgPT09IDEpe1xyXG4gICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgICAgICB0aGlzLm1vZGFsQ2FuY2VsKClcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1lbHNle1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+inhOWImeWQjeensOacquWhq+WGmeaIluWhq+WGmeacieivrycpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJ1bGVuYW1lQ2hhbmdlID0gKGUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBydWxlbmFtZTogZS50YXJnZXQudmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcnVsZWRlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcnVsZWRlczogZS50YXJnZXQudmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8v5oq95bGJ57uE5Lu2XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBkcmF3ZXJWaXNpYmxlOiB0cnVlLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGRyYXdlckNsb3NlID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNlbEFycjpbXSwvL+iiq+mAieS4reeahOaVsOaNruautVxyXG4gICAgICB3aG9sZUFycjpbXSwvL+acgOe7iOe8luivkeaVsOe7hFxyXG4gICAgICBjdXJTbmlwcGV0OntcclxuICAgICAgICBpZDonJyxcclxuICAgICAgICBzdGFydDonJyxcclxuICAgICAgICBlbmQ6JycsXHJcbiAgICAgICAgc3RyOiAnJyxcclxuICAgICAgICBuYW1lOicnLFxyXG4gICAgICAgIHNlbGVjdGVkOicnXHJcbiAgICAgIH0sXHJcbiAgICAgIHJ1bGVuYW1lOicnLFxyXG4gICAgICBhcHBuYW1lOicnLFxyXG4gICAgICBydWxlZGVzOicnLFxyXG4gICAgICBsYXN0T25lOiB7XHJcbiAgICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgICAgcGF0dGVybjogJycsXHJcbiAgICAgICAgcmVzdWx0OiAnJyxcclxuICAgICAgfSxcclxuICAgICAgbWVzc2FnZTonJyxcclxuICAgICAgcGF0dGVybjonJyxcclxuICAgICAgcmVzdWx0OicnLFxyXG4gICAgICBkcmF3ZXJWaXNpYmxlOiBmYWxzZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGdyb3VwX2FwcENoYW5nZSA9ICh2YWx1ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGdyb3VwX2FwcDogdmFsdWVcclxuICAgICAgfSwoKT0+e1xyXG4gICAgICAgIHRoaXMuZ2V0TG9nKClcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgZGlzcGxheVJlbmRlciA9IChsYWJlbCk9PntcclxuICAgIHJldHVybiBsYWJlbC5qb2luKCcgLyAnKVxyXG4gIH1cclxuICAvL+awlOazoeahhuebuOWFs1xyXG4gIGNoYW5nZUNvbmRpdGlvbiA9ICgpID0+IHtcclxuICAgIC8v5q2k5aSE5Yik5pat5piv5ZCm5L+u5pS56L+H546w5pyJ6KeE5YiZXHJcblxyXG4gIH1cclxuXHJcbiAgY29uZmlybSA9ICgpID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBwb3BWaXNpYmxlOiBmYWxzZSB9KTtcclxuICAgIGNvbnN0IHsgY29uZGl0aW9uIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihjb25kaXRpb24pe1xyXG4gICAgICAvL+atpOWkhOWwhnJ1bGXlhbPogZTliLBhcHBcclxuICAgICAgY29uc3QgeyBjdXJydWxlLCBhcHBuYW1lIH0gPSB0aGlzLnN0YXRlXHJcbiAgICAgIGNvbnN0IGluZm8gPSB7fVxyXG4gICAgICBpbmZvLnJ1bGVuYW1lID0gY3VycnVsZVxyXG4gICAgICBpbmZvLmFwcG5hbWUgPSBhcHBuYW1lXHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2UvdXBkYXRlU291cmNlQnlBcHBSdWxlJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIC8v5q2k5aSE5L+d5a2Y5Li65paw55qEcnVsZVxyXG4gICAgICB0aGlzLnNob3dNb2RhbCgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgY2FuY2VsID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBvcFZpc2libGU6IGZhbHNlIH0pO1xyXG4gICAgbWVzc2FnZS53YXJuaW5nKCfmgqjlt7Llj5bmtojor6Xmk43kvZwnKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVZpc2libGVDaGFuZ2UgPSBwb3BWaXNpYmxlID0+IHtcclxuXHJcbiAgICBpZighdGhpcy5pc0xlZ2FsKCkpe1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGNvbnN0IGV4aXN0UnVsZSA9IHRoaXMuc3RhdGUuY3VycnVsZVxyXG4gICAgbGV0IGV4aXN0UnVsZVBhdHRlcm4gPSAnJ1xyXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLnN0YXRlLnJ1bGVMaXN0KXtcclxuICAgICAgaWYoaXRlbS5ydWxlbmFtZSA9PT0gZXhpc3RSdWxlKXtcclxuICAgICAgICBleGlzdFJ1bGVQYXR0ZXJuID0gaXRlbS5wYXR0ZXJuXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgeyBwYXR0ZXJuIH0gID0gdGhpcy5zdGF0ZVxyXG5cclxuICAgIGNvbnN0IGlzSGlkZSA9IGV4aXN0UnVsZVBhdHRlcm4gPT09IHBhdHRlcm5cclxuICAgIGlmKGlzSGlkZSl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBvcFZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmRpdGlvbjogdHJ1ZVxyXG4gICAgICB9LCgpPT57XHJcbiAgICAgICAgdGhpcy5jb25maXJtKClcclxuICAgICAgfSlcclxuICAgIH1lbHNle1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwb3BWaXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmRpdGlvbjogZmFsc2VcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGxldCBzdHIgPSAnJ1xyXG4gICAgaWYodGhpcy5zdGF0ZS5yZXN1bHQpe1xyXG4gICAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKHRoaXMuc3RhdGUucmVzdWx0KSwgbnVsbCwgNClcclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPFJvdyBjc3M9e3ttYXJnaW5Ub3A6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgIDxBbW9kdWxlPlxyXG4gICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixoZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDxDYXNjYWRlclxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3RoaXMuc3RhdGUuZ3JvdXBBcHBMaXN0fVxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlSZW5kZXI9e3RoaXMuZGlzcGxheVJlbmRlcn1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5ncm91cF9hcHBDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZ3JvdXBfYXBwfVxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU9XCJzbWFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgY3NzPXt7bWluV2lkdGg6XCIyNDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgIGNzcz17e21pbldpZHRoOlwiMTYwcHhcIixtYXJnaW5MZWZ0OlwiMjBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5jb21waWxlX3N0YXR1c31cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jb21waWxlX3N0YXR1c0NoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24ga2V5PSdhbGwnIHZhbHVlPSdhbGwnPuaJgOacieaXpeW/lzwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24ga2V5PSd1bmNvbXBpbGUnIHZhbHVlPSd1bmNvbXBpbGUnPuacquino+aekOaXpeW/lzwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24ga2V5PSdjb21waWxlZCcgdmFsdWU9J2NvbXBpbGVkJz7lt7Lop6PmnpDml6Xlv5c8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxXeURhdGVQaWNrZXJcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVRpbWVDaGFuZ2U9eyB0aGlzLmN1clRpbWVDaGFuZ2UgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN1clRpbWU9e3RoaXMuc3RhdGUuY3VyVGltZX1cclxuICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8V3lTcGluIGlzU3BpbmluZz17dGhpcy5zdGF0ZS5pc1NwaW5pbmd9PlxyXG4gICAgICAgICAgICAgICAgICA8V3lUYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIHhEYXRhPXt0aGlzLnN0YXRlLnhEYXRhLmxlbmd0aD4wP3RoaXMuc3RhdGUueERhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgeURhdGE9e3RoaXMuc3RhdGUueURhdGEubGVuZ3RoPjA/dGhpcy5zdGF0ZS55RGF0YTpbXX1cclxuICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZT17dGhpcy5zdGF0ZS5wYWdlU2l6ZX1cclxuICAgICAgICAgICAgICAgICAgICBvblNob3dTaXplQ2hhbmdlPXt0aGlzLnBhZ2VTaXplQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkUm93UmVuZGVyPXtyZWNvcmQgPT4geyByZXR1cm4gPGRpdiBzdHlsZT17eyBtYXJnaW46IDAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwcmU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBKU09OLnN0cmluZ2lmeShyZWNvcmQuc3ViZGF0YSwgbnVsbCwgNCkgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3ByZT5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L1d5U3Bpbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9BbW9kdWxlPlxyXG4gICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgIDxNb2RhbFxyXG4gICAgICAgICAgdGl0bGU9XCLlrZfmrrXmj5Dlj5ZcIlxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgb25Paz17dGhpcy5oYW5kbGVPa31cclxuICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLmhhbmRsZUNhbmNlbH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8cD7lrZfmrrXlkI3vvJo8SW5wdXRcclxuICAgICAgICAgICAgY3NzPXt7d2lkdGg6XCI4MCVcIn19XHJcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmN1clNuaXBwZXQubmFtZX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY3VyU25pcHBldENoYW5nZX1cclxuICAgICAgICAgIC8+PC9wPlxyXG4gICAgICAgICAgPHA+5Yy56YWN5a+56LGh77yae3RoaXMuc3RhdGUuY3VyU25pcHBldC5zdHJ9PC9wPlxyXG4gICAgICAgIDwvTW9kYWw+XHJcbiAgICAgICAgPE1vZGFsXHJcbiAgICAgICAgICB0aXRsZT1cIuS4uuinhOWImeWRveWQjVwiXHJcbiAgICAgICAgICB2aXNpYmxlPXt0aGlzLnN0YXRlLm1vZGFsVmlzaWJsZX1cclxuICAgICAgICAgIG9uT2s9e3RoaXMuc2F2ZVJ1bGV9XHJcbiAgICAgICAgICBvbkNhbmNlbD17dGhpcy5wYXJ0Q2FuY2VsfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwifX0+6KeE5YiZ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT48SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUucnVsZW5hbWV9IG9uQ2hhbmdlPXt0aGlzLnJ1bGVuYW1lQ2hhbmdlfS8+PC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwifX0+5Yy56YWN5bqU55So77yaPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICBzaG93U2VhcmNoXHJcbiAgICAgICAgICAgICAgICBvcHRpb25GaWx0ZXJQcm9wPVwiY2hpbGRyZW5cIlxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuYXBwbmFtZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgIGNzcz17e3dpZHRoOlwiMTAwJVwifX1cclxuICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0LCBvcHRpb24pID0+XHJcbiAgICAgICAgICAgICAgICAgIG9wdGlvbi5wcm9wcy5jaGlsZHJlbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYXBwbmFtZX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiXCI+5LiN6ZmQPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYXBwTmFtZUxpc3QgJiYgdGhpcy5zdGF0ZS5hcHBOYW1lTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hcHBOYW1lTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8T3B0aW9uIGtleT17aXRlbX0gdmFsdWU9e2l0ZW19PntpdGVtfTwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIn19PuinhOWImeaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+PFRleHRBcmVhIHZhbHVlPXt0aGlzLnN0YXRlLnJ1bGVkZXN9IG9uQ2hhbmdlPXt0aGlzLnJ1bGVkZXNDaGFuZ2V9Lz48L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvTW9kYWw+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLop4TliJnljLnphY1cIlxyXG4gICAgICAgICAgd2lkdGg9XCI4MCVcIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgY2xvc2FibGU9e2ZhbHNlfVxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5kcmF3ZXJDbG9zZX1cclxuICAgICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUuZHJhd2VyVmlzaWJsZX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19PuaVsOaNruWunuS+izogPC9zcGFuPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc1NlbGVjdE1vZGVsID9cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6XCI1cHggMCAwIDEwcHhcIix3aWR0aDpcIjgwJVwiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIixib3JkZXI6XCIjMjJjOTYwIHNvbGlkIDFweFwiLHBvc2l0aW9uOlwicmVsYXRpdmVcIixtaW5IZWlnaHQ6XCI1MHB4XCIsYm9yZGVyUmFkaXVzOlwiNXB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17e3dvcmRXcmFwOlwiYnJlYWstd29yZFwifX0+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLndob2xlQXJyLmxlbmd0aD4wP1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUud2hvbGVBcnIubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmQ6aXRlbS5zZWxlY3RlZD8ncmdiYSgyMDQsMjU1LDAsMC44KSc6J25vbmUnfX0ga2V5PXtpdGVtLmlkfT57aXRlbS5zdHJ9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubWVzc2FnZUZvclNlbGVjdE1vZGVsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxUZXh0QXJlYVxyXG4gICAgICAgICAgICAgICAgICBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm1lc3NhZ2VGb3JTZWxlY3RNb2RlbH1cclxuICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9e3RoaXMuc2VsZWN0V29yZH1cclxuICAgICAgICAgICAgICAgICAgY3NzPXt7Ym9yZGVyOiBcIm5vbmVcIixwb3NpdGlvbjpcImFic29sdXRlXCIsbGVmdDpcIjBweFwiLHRvcDpcIjBweFwiLGJhY2tncm91bmQ6XCJub25lXCIsY29sb3I6XCJyZ2JhKDEyMywxMTEsMjU1LDAuNSlcIn19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgPFRleHRBcmVhXHJcbiAgICAgICAgICAgICAgICBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMubWVzc2FnZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgIGNzcz17e3dpZHRoOlwiODAlXCJ9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nTGVmdDpcIjEwMHB4XCJ9fT5cclxuICAgICAgICAgICAgPHNwYW4+PENoZWNrYm94IG9uQ2hhbmdlPXt0aGlzLmlzU2VsZWN0TW9kZWxDaGFuZ2V9IGNoZWNrZWQ9e3RoaXMuc3RhdGUuaXNTZWxlY3RNb2RlbH0+5YiS6K+N5Yy56YWNPC9DaGVja2JveD48L3NwYW4+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLndob2xlQXJyLmxlbmd0aD4wP1xyXG4gICAgICAgICAgICAgIDxzcGFuPjxCdXR0b24gb25DbGljaz17dGhpcy5jbGVhckRhdGF9IHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+6YeN5paw6YCJ5oupPC9CdXR0b24+PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICA8c3BhbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwiLGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCJ9fT5cclxuICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICBzaG93U2VhcmNoXHJcbiAgICAgICAgICAgICAgICBvcHRpb25GaWx0ZXJQcm9wPVwiY2hpbGRyZW5cIlxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuY3VycnVsZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgIGNzcz17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICBzaXplPVwic21hbGxcIlxyXG4gICAgICAgICAgICAgICAgZmlsdGVyT3B0aW9uPXsoaW5wdXQsIG9wdGlvbikgPT5cclxuICAgICAgICAgICAgICAgICAgb3B0aW9uLnByb3BzLmNoaWxkcmVuLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihpbnB1dC50b0xvd2VyQ2FzZSgpKSA+PSAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5jdXJydWxlfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxPcHRpb24ga2V5PVwibXlrZXlcIiB2YWx1ZT1cIlwiPuivt+mAieaLqTwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUucnVsZUxpc3QgJiYgdGhpcy5zdGF0ZS5ydWxlTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnJ1bGVMaXN0Lm1hcChpdGVtPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0ucnVsZW5hbWV9IHZhbHVlPXtpdGVtLnJ1bGVuYW1lfSB0aXRsZT17aXRlbS5ydWxlbmFtZX0+e2l0ZW0ucnVsZW5hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT5Hcm9r6Kej5p6QOiA8L3NwYW4+PFRleHRBcmVhIGF1dG9zaXplPXt7IG1pblJvd3M6IDIsIG1heFJvd3M6IDYgfX0gdmFsdWU9e3RoaXMuc3RhdGUucGF0dGVybn0gb25DaGFuZ2U9e3RoaXMucGF0dGVybkNoYW5nZX0gIGNzcz17e3dpZHRoOlwiODAlXCJ9fSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5kb0FuYWx5c2lzfT7op6PmnpA8L0J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT7op6PmnpDnu5PmnpzvvJo8L3NwYW4+PHNwYW4gY3NzPXt7b3ZlcmZsb3c6XCJhdXRvXCIsZGlzcGxheTpcImlubGluZS1ibG9ja1wiLHdpZHRoOiBcIjgwJVwiLG1pbkhlaWdodDpcIjIwMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwifX0+XHJcbiAgICAgICAgICAgICAgPHByZT57XHJcbiAgICAgICAgICAgICAgICBzdHJcclxuICAgICAgICAgICAgICB9PC9wcmU+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmlzRXhpc3RNb2RlbD9cclxuICAgICAgICAgICAgPFBvcGNvbmZpcm1cclxuICAgICAgICAgICAgICB0aXRsZT1cIuaCqOabtOaUueS6huW9k+WJjeaJgOmAieinhOWIme+8jOaYr+WQpuWRveWQjeS4uuaWsOeahOinhOWImeW5tuWFs+iBlOatpOW6lOeUqO+8n1wiXHJcbiAgICAgICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5wb3BWaXNpYmxlfVxyXG4gICAgICAgICAgICAgIG9uVmlzaWJsZUNoYW5nZT17dGhpcy5oYW5kbGVWaXNpYmxlQ2hhbmdlfVxyXG4gICAgICAgICAgICAgIG9uQ29uZmlybT17dGhpcy5jb25maXJtfVxyXG4gICAgICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLmNhbmNlbH1cclxuICAgICAgICAgICAgICBva1RleHQ9XCLnoa7lrppcIlxyXG4gICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxCdXR0b24gdHlwZT1cInByaW1hcnlcIj7lsIbor6Xop4TliJnlhbPogZTliLDmraTml6Xlv5fkvovmiYDlnKjlupTnlKg8L0J1dHRvbj5cclxuICAgICAgICAgICAgPC9Qb3Bjb25maXJtPlxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIDxCdXR0b24gIHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5yZWFkeVNhdmV9ID7kv53lrZhHcm9r6Kej5p6Q6KeE5YiZPC9CdXR0b24+XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIDwvRHJhd2VyPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIClcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbmZpZ3VyZVxyXG4iXX0= */\"\n};\n\nvar _ref16 = process.env.NODE_ENV === \"production\" ? {\n  name: \"xnuaik-Configure\",\n  styles: \"flex:0 0 100px;label:Configure;\"\n} : {\n  name: \"xnuaik-Configure\",\n  styles: \"flex:0 0 100px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref17 = process.env.NODE_ENV === \"production\" ? {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\"\n} : {\n  name: \"3icdl0-Configure\",\n  styles: \"flex:1 1 auto;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref18 = process.env.NODE_ENV === \"production\" ? {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\"\n} : {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref19 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1qlesgh-Configure\",\n  styles: \"vertical-align:top;label:Configure;\"\n} : {\n  name: \"1qlesgh-Configure\",\n  styles: \"vertical-align:top;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref20 = process.env.NODE_ENV === \"production\" ? {\n  name: \"k4ymlx-Configure\",\n  styles: \"padding:5px 0 0 10px;width:80%;display:inline-block;border:#22c960 solid 1px;position:relative;min-height:50px;border-radius:5px;label:Configure;\"\n} : {\n  name: \"k4ymlx-Configure\",\n  styles: \"padding:5px 0 0 10px;width:80%;display:inline-block;border:#22c960 solid 1px;position:relative;min-height:50px;border-radius:5px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref21 = process.env.NODE_ENV === \"production\" ? {\n  name: \"ckce56-Configure\",\n  styles: \"word-wrap:break-word;label:Configure;\"\n} : {\n  name: \"ckce56-Configure\",\n  styles: \"word-wrap:break-word;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref22 = process.env.NODE_ENV === \"production\" ? {\n  name: \"zdkafh-Configure\",\n  styles: \"border:none;position:absolute;left:0px;top:0px;background:none;color:rgba(123,111,255,0.5);label:Configure;\"\n} : {\n  name: \"zdkafh-Configure\",\n  styles: \"border:none;position:absolute;left:0px;top:0px;background:none;color:rgba(123,111,255,0.5);label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref23 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1xs40gq-Configure\",\n  styles: \"width:80%;label:Configure;\"\n} : {\n  name: \"1xs40gq-Configure\",\n  styles: \"width:80%;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref24 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1kqua33-Configure\",\n  styles: \"padding-left:100px;label:Configure;\"\n} : {\n  name: \"1kqua33-Configure\",\n  styles: \"padding-left:100px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref25 = process.env.NODE_ENV === \"production\" ? {\n  name: \"cw7ii8-Configure\",\n  styles: \"margin-left:20px;display:inline-block;label:Configure;\"\n} : {\n  name: \"cw7ii8-Configure\",\n  styles: \"margin-left:20px;display:inline-block;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref26 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1hbawrs-Configure\",\n  styles: \"width:200px;label:Configure;\"\n} : {\n  name: \"1hbawrs-Configure\",\n  styles: \"width:200px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref27 = process.env.NODE_ENV === \"production\" ? {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\"\n} : {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref28 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1qlesgh-Configure\",\n  styles: \"vertical-align:top;label:Configure;\"\n} : {\n  name: \"1qlesgh-Configure\",\n  styles: \"vertical-align:top;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref29 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1xs40gq-Configure\",\n  styles: \"width:80%;label:Configure;\"\n} : {\n  name: \"1xs40gq-Configure\",\n  styles: \"width:80%;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref30 = process.env.NODE_ENV === \"production\" ? {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\"\n} : {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref31 = process.env.NODE_ENV === \"production\" ? {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\"\n} : {\n  name: \"qur36d-Configure\",\n  styles: \"padding:20px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref32 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1qlesgh-Configure\",\n  styles: \"vertical-align:top;label:Configure;\"\n} : {\n  name: \"1qlesgh-Configure\",\n  styles: \"vertical-align:top;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref33 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1eko7qz-Configure\",\n  styles: \"overflow:auto;display:inline-block;width:80%;min-height:200px;border:rgba(255,255,255,0.2) solid 1px;label:Configure;\"\n} : {\n  name: \"1eko7qz-Configure\",\n  styles: \"overflow:auto;display:inline-block;width:80%;min-height:200px;border:rgba(255,255,255,0.2) solid 1px;label:Configure;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nclass Configure extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: '',\n      //日志样例\n      messageForSelectModel: '',\n      //划词时候的日志样例\n      pattern: '',\n      //供匹配的正则\n      result: '',\n      //解析出来的结果\n      lastOne: {\n        //最近一次执行解析之后的三个量的值\n        message: '',\n        pattern: '',\n        result: ''\n      },\n      xData: [],\n      yData: [],\n      pageSize: 10,\n      isSpining: false,\n      activeKey: [],\n      curTime: [],\n      //indexList:[],\n      compile_status: 'all',\n      isSpining: false,\n      isSelectModel: false,\n      //是否是划词匹配模式\n      isExistModel: false,\n      //是否是从已经有的里面选的模式\n      selArr: [],\n      //划词时被选中的数据例\n      wholeArr: [],\n      //通过选中的数据例，编译出的整条数据例\n      curSnippet: {\n        //最近一次选中的数据例的各个属性信息\n        id: '',\n        start: '',\n        end: '',\n        str: '',\n        name: '',\n        selected: ''\n      },\n      visible: false,\n      modalVisible: false,\n      rulename: '',\n      //待保存的新规则的名称\n      ruledes: '',\n      //待保存的新规则的描述\n      appname: '',\n      appNameList: [],\n      drawerVisible: false,\n      group_app: ['all_group'],\n      groupAppList: [],\n      currule: '',\n      //已有规则中选择时，被选中的规则\n      ruleList: [],\n      //已有规则列表\n      popVisible: false,\n      condition: true\n    };\n\n    this.getCurRuleList = appname => {\n      wyAxiosPost('Rule/getRuleList', {\n        appname\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (this._isMounted && responseData.length > 0) {\n          this.setState({\n            ruleList: responseData\n          });\n        }\n      });\n    };\n\n    this.getGoupAppList = () => {\n      wyAxiosPost('Group/getGroupApp', {}, result => {\n        const responseData = result.data.msg;\n\n        if (this._isMounted) {\n          this.setState({\n            groupAppList: responseData\n          });\n        }\n      });\n    };\n\n    this.compile_statusChange = value => {\n      this.setState({\n        compile_status: value\n      }, () => {\n        this.getLog();\n      });\n    };\n\n    this.isSelectModelChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          isSelectModel: e.target.checked,\n          isExistModel: false,\n          messageForSelectModel: e.target.checked ? this.state.message : '',\n          selArr: [],\n          wholeArr: [],\n          currule: '',\n          pattern: '',\n          result: ''\n        });\n      }\n    };\n\n    this.selectWord = event => {\n      const e = window.event || event;\n      e.preventDefault();\n      e.stopPropagation();\n      const curMessage = this.state.message;\n      const start = e.target.selectionStart;\n      const end = e.target.selectionEnd; //交叉选择判断\n\n      if (this.isIntersect(this.state.selArr, start, end)) {\n        _message.warning('选择无效,请避免交叉选择');\n\n        return;\n      }\n\n      const selectedText = curMessage.slice(start, end);\n\n      const notrim = _.trim(selectedText);\n\n      const randomCount = Math.random();\n      const curTime = new Date().getTime();\n      const asId = parseInt(randomCount, 10) + parseInt(curTime, 10) * 100;\n      const id = asId.toString();\n\n      if (selectedText.length > 0 && notrim.length === 0 || selectedText.length === 0 || selectedText === '') {\n        _message.warning('请不要选择空字符');\n\n        return;\n      }\n\n      if (selectedText === this.state.message) {\n        return;\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          curSnippet: {\n            id,\n            start,\n            end,\n            str: selectedText,\n            name: '',\n            selected: true\n          }\n        }, () => {\n          this.showModal();\n        });\n      }\n    };\n\n    this.getAppName = () => {\n      wyAxiosPost('Source/getAppName', {}, result => {\n        const responseData = result.data.msg;\n\n        if (this._isMounted) {\n          this.setState({\n            appNameList: responseData\n          });\n        }\n      });\n    };\n\n    this.appnameChange = value => {\n      if (this._isMounted) {\n        this.setState({\n          appname: value\n        });\n      }\n    };\n\n    this.compileArr = (arr, str) => {\n      const resolveArr = [];\n\n      if (arr && arr.length > 0) {\n        arr.map((item, index) => {\n          if (index === arr.length - 1) {\n            if (index === 0 && item.start !== 0) {\n              const noSelect = {}; // const randomCount = Math.random();\n              // const curTime = new Date().getTime();\n              // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n              const id = arr[index].id - 1;\n              noSelect.id = id;\n              noSelect.selected = false;\n              noSelect.start = 0;\n              noSelect.end = arr[index].start;\n              noSelect.str = str.slice(noSelect.start, noSelect.end);\n              resolveArr.push(noSelect);\n            }\n\n            resolveArr.push(item);\n            const noSelect = {}; // const randomCount = Math.random();\n            // const curTime = new Date().getTime();\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n            const id = arr[index].id + 1;\n            noSelect.id = id;\n            noSelect.selected = false;\n            noSelect.start = item.end;\n            noSelect.end = str.length;\n            noSelect.str = str.slice(noSelect.start, noSelect.end);\n            resolveArr.push(noSelect);\n          } else {\n            if (index === 0 && item.start !== 0) {\n              const noSelect = {}; // const randomCount = Math.random();\n              // const curTime = new Date().getTime();\n              // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n              const id = arr[index].id - 1;\n              noSelect.id = id;\n              noSelect.selected = false;\n              noSelect.start = 0;\n              noSelect.end = arr[index].start;\n              noSelect.str = str.slice(noSelect.start, noSelect.end);\n              resolveArr.push(noSelect);\n            }\n\n            resolveArr.push(item);\n            const noSelect = {}; // const randomCount = Math.random();\n            // const curTime = new Date().getTime();\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n            const id = arr[index].id + 1;\n            noSelect.id = id;\n            noSelect.selected = false;\n            noSelect.start = item.end;\n            noSelect.end = arr[index + 1].start;\n            noSelect.str = str.slice(noSelect.start, noSelect.end);\n            resolveArr.push(noSelect);\n          }\n        });\n      }\n\n      return resolveArr;\n    };\n\n    this.isIntersect = (arr, start, end) => {\n      let isIn = false;\n\n      if (arr && arr.length > 0) {\n        isIn = arr.some(item => {\n          const istart = item.start;\n          const iend = item.end;\n          return (istart < start || istart == start) && start < iend || istart < end && (end < iend || end == iend);\n        });\n      }\n\n      return isIn;\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.handleOk = e => {\n      if (this.state.curSnippet.name === '') {\n        _message.warning('字段名不能为空');\n      } else {\n        const selArr = _.cloneDeep(this.state.selArr);\n\n        const isRename = selArr.some(item => {\n          return item.name === e.target.value;\n        });\n\n        if (isRename) {\n          _message.warning('请不要用重复字段名');\n        } else {\n          const curArr = _.cloneDeep(this.state.selArr);\n\n          const newArr = _.cloneDeep(this.state.curSnippet);\n\n          curArr.push(newArr); //对数组排序\n\n          const haha = _.sortBy(curArr, item => {\n            return item.start;\n          });\n\n          if (this._isMounted) {\n            this.setState({\n              selArr: _.cloneDeep(haha)\n            }, () => {\n              const wholeArr = this.compileArr(this.state.selArr, this.state.message);\n\n              if (this._isMounted) {\n                this.setState({\n                  wholeArr\n                }, () => {\n                  this.handleCancel();\n                  const reg = decodeArr(this.state.wholeArr, this.state.messageForSelectModel);\n\n                  if (this._isMounted) {\n                    this.setState({\n                      pattern: reg\n                    });\n                  }\n                });\n              }\n            });\n          }\n        }\n      }\n    };\n\n    this.handleCancel = e => {\n      if (this._isMounted) {\n        this.setState({\n          visible: false,\n          curSnippet: {\n            id: '',\n            start: '',\n            end: '',\n            str: '',\n            name: ''\n          }\n        });\n      }\n    };\n\n    this.modalCancel = e => {\n      if (this._isMounted) {\n        this.setState({\n          modalVisible: false,\n          selArr: [],\n          //被选中的数据段\n          wholeArr: [],\n          //最终编译数组\n          curSnippet: {\n            id: '',\n            start: '',\n            end: '',\n            str: '',\n            name: '',\n            selected: ''\n          },\n          rulename: '',\n          appname: '',\n          ruledes: '',\n          lastOne: {\n            message: '',\n            pattern: '',\n            result: ''\n          },\n          message: '',\n          pattern: '',\n          result: '',\n          drawerVisible: false\n        });\n      }\n    };\n\n    this.partCancel = () => {\n      if (this._isMounted) {\n        this.setState({\n          modalVisible: false,\n          rulename: '',\n          appname: '',\n          ruledes: '',\n          result: ''\n        });\n      }\n    };\n\n    this.modalShow = e => {\n      if (this._isMounted) {\n        this.setState({\n          modalVisible: true\n        });\n      }\n    };\n\n    this.curSnippetChange = e => {\n      const cur = _.cloneDeep(this.state.curSnippet);\n\n      const compileCur = Object.assign({}, this.state.curSnippet, {\n        name: e.target.value\n      });\n\n      if (this._isMounted) {\n        this.setState({\n          curSnippet: _.cloneDeep(compileCur)\n        });\n      }\n    };\n\n    this.clearData = () => {\n      if (this._isMounted) {\n        this.setState({\n          selArr: [],\n          //被选中的数据段\n          wholeArr: [],\n          //最终编译数组\n          curSnippet: {\n            id: '',\n            start: '',\n            end: '',\n            str: '',\n            name: '',\n            selected: ''\n          },\n          pattern: '',\n          result: ''\n        });\n      }\n    };\n\n    this.messageChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          message: e.target.value\n        });\n      }\n    };\n\n    this.curruleChange = value => {\n      if (this._isMounted) {\n        this.setState({\n          currule: value,\n          isSelectModel: false,\n          isExistModel: true,\n          selArr: [],\n          //划词时被选中的数据例\n          wholeArr: [] //通过选中的数据例，编译出的整条数据例\n\n        }, () => {\n          //此时取消划词模式,并匹配出pattern\n          let pattern = '';\n          const ruleList = this.state.ruleList;\n\n          if (value === '') {\n            this.setState({\n              pattern: ''\n            });\n          } else {\n            for (let item of ruleList) {\n              if (item.rulename === value) {\n                pattern = item.pattern;\n                this.setState({\n                  pattern\n                });\n                break;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    this.patternChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          pattern: e.target.value\n        });\n      }\n    };\n\n    this.doAnalysis = () => {\n      if (this.state.message !== '' && this.state.pattern !== '') {\n        const _this$state = this.state,\n              message = _this$state.message,\n              pattern = _this$state.pattern;\n        wyAxiosPost('Rule/getMsgByGrok', {\n          message,\n          pattern\n        }, result => {\n          const response = result.data.msg;\n\n          if (this._isMounted) {\n            this.setState({\n              result: response\n            }, () => {\n              this.setState({\n                lastOne: {\n                  message: this.state.message,\n                  pattern: this.state.pattern,\n                  result: this.state.result\n                }\n              });\n            });\n          }\n        });\n      } else {\n        _message.warning('抱歉，数据实例和解析规则必须填写');\n      }\n    };\n\n    this.curTimeChange = value => {\n      if (this._isMounted) {\n        this.setState({\n          curTime: value\n        }, () => {\n          this.getLog();\n        });\n      }\n    };\n\n    this.getLog = () => {\n      const _this$state2 = this.state,\n            compile_status = _this$state2.compile_status,\n            group_app = _this$state2.group_app;\n      const start_time = this.state.curTime[0];\n      const last_time = this.state.curTime[1];\n      const info = {\n        compile_status,\n        start_time,\n        last_time,\n        group_app\n      };\n\n      if (this._isMounted) {\n        this.setState({\n          isSpining: true\n        });\n      }\n\n      wyAxiosPost('Elastic/getLogs', {\n        info\n      }, result => {\n        const responseData = result.data.msg;\n\n        let curxData = _.cloneDeep(responseData.xxx);\n\n        const statusIndex = _.findIndex(curxData, o => {\n          return o.dataIndex === 'status';\n        });\n\n        curxData[statusIndex].render = (text, record, index) => jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 497\n          },\n          __self: this\n        }, text === 'success' ? jsx(\"i\", {\n          css: _ref,\n          className: \"fa fa-check\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 497\n          },\n          __self: this\n        }) : jsx(\"i\", {\n          className: \"fa fa-minus\",\n          \"aria-hidden\": \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 497\n          },\n          __self: this\n        }));\n\n        curxData.push({\n          title: '操作',\n          dataIndex: 'asexample',\n          render: (text, record, index) => jsx(_Button, {\n            size: \"small\",\n            type: \"primary\",\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => this.asExample(record.message, record.appname),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 501\n            },\n            __self: this\n          }, \"\\u8BBE\\u4E3A\\u65E5\\u5FD7\\u6837\\u4F8B\")\n        });\n        const curTime = [];\n        curTime.push(responseData.start_time);\n        curTime.push(responseData.last_time);\n\n        if (this._isMounted) {\n          this.setState({\n            xData: curxData,\n            yData: responseData.yyy,\n            curTime,\n            isSpining: false\n          });\n        }\n      });\n    };\n\n    this.asExample = (message, appname) => {\n      this.setState({\n        //此时将已经划词的数据清除，将message和messageForSelectModel同步\n        message,\n        messageForSelectModel: message,\n        pattern: '',\n        //供匹配的正则\n        result: '',\n        //解析出来的结果\n        lastOne: {\n          //最近一次执行解析之后的三个量的值\n          message: '',\n          pattern: '',\n          result: ''\n        },\n        selArr: [],\n        //划词时被选中的数据例\n        wholeArr: [],\n        //通过选中的数据例，编译出的整条数据例\n        curSnippet: {\n          //最近一次选中的数据例的各个属性信息\n          id: '',\n          start: '',\n          end: '',\n          str: '',\n          name: '',\n          selected: ''\n        },\n        currule: '',\n        //已有规则中选择时，被选中的规则\n        drawerVisible: true,\n        appname\n      }, () => {\n        this.getCurRuleList(appname);\n      });\n    };\n\n    this.isLegal = () => {\n      const _this$state3 = this.state,\n            pattern = _this$state3.pattern,\n            message = _this$state3.message,\n            result = _this$state3.result;\n      let isLegal = true;\n\n      if (pattern === this.state.lastOne.pattern && _.isEqual(message, this.state.lastOne.message) && _.isEqual(result, this.state.lastOne.result)) {\n        if (result !== '') {\n          if (result !== '{}' && result !== 'null') {\n            //this.modalShow()\n            isLegal = true;\n          } else {\n            isLegal = false;\n\n            _message.warning('规则有误');\n          }\n        } else {\n          isLegal = false;\n\n          _message.warning('请先填写规则');\n        }\n      } else {\n        isLegal = false;\n\n        _message.warning('你还未执行解析，或者更改数据后未重新解析');\n      }\n\n      return isLegal;\n    };\n\n    this.readySave = () => {\n      if (this.isLegal()) {\n        this.modalShow();\n      }\n    };\n\n    this.saveRule = () => {\n      if (this.state.rulename !== '' && forName.test(this.state.rulename)) {\n        const _this$state4 = this.state,\n              rulename = _this$state4.rulename,\n              ruledes = _this$state4.ruledes,\n              message = _this$state4.message,\n              pattern = _this$state4.pattern,\n              id = _this$state4.id,\n              appname = _this$state4.appname;\n        wyAxiosPost('Rule/saveRule', {\n          rulename,\n          ruledes,\n          message,\n          pattern,\n          id,\n          appname\n        }, result => {\n          const responseData = result.data.msg;\n\n          if (responseData.status === 1) {\n            _message.success(responseData.msg);\n\n            this.modalCancel();\n          } else {\n            _message.warning(responseData.msg);\n          }\n        });\n      } else {\n        _message.warning('规则名称未填写或填写有误');\n      }\n    };\n\n    this.rulenameChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          rulename: e.target.value\n        });\n      }\n    };\n\n    this.ruledesChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          ruledes: e.target.value\n        });\n      }\n    };\n\n    this.showDrawer = () => {\n      this.setState({\n        drawerVisible: true\n      });\n    };\n\n    this.drawerClose = () => {\n      this.setState({\n        selArr: [],\n        //被选中的数据段\n        wholeArr: [],\n        //最终编译数组\n        curSnippet: {\n          id: '',\n          start: '',\n          end: '',\n          str: '',\n          name: '',\n          selected: ''\n        },\n        rulename: '',\n        appname: '',\n        ruledes: '',\n        lastOne: {\n          message: '',\n          pattern: '',\n          result: ''\n        },\n        message: '',\n        pattern: '',\n        result: '',\n        drawerVisible: false\n      });\n    };\n\n    this.group_appChange = value => {\n      if (this._isMounted) {\n        this.setState({\n          group_app: value\n        }, () => {\n          this.getLog();\n        });\n      }\n    };\n\n    this.displayRender = label => {\n      return label.join(' / ');\n    };\n\n    this.changeCondition = () => {//此处判断是否修改过现有规则\n    };\n\n    this.confirm = () => {\n      this.setState({\n        popVisible: false\n      });\n      const condition = this.state.condition;\n\n      if (condition) {\n        //此处将rule关联到app\n        const _this$state5 = this.state,\n              currule = _this$state5.currule,\n              appname = _this$state5.appname;\n        const info = {};\n        info.rulename = currule;\n        info.appname = appname;\n        wyAxiosPost('Source/updateSourceByAppRule', {\n          info\n        }, result => {\n          const responseData = result.data.msg;\n\n          if (responseData.status === 1) {\n            _message.success(responseData.msg);\n          } else {\n            _message.warning(responseData.msg);\n          }\n        });\n      } else {\n        //此处保存为新的rule\n        this.showModal();\n      }\n    };\n\n    this.cancel = () => {\n      this.setState({\n        popVisible: false\n      });\n\n      _message.warning('您已取消该操作');\n    };\n\n    this.handleVisibleChange = popVisible => {\n      if (!this.isLegal()) {\n        return;\n      }\n\n      const existRule = this.state.currule;\n      let existRulePattern = '';\n\n      for (let item of this.state.ruleList) {\n        if (item.rulename === existRule) {\n          existRulePattern = item.pattern;\n          break;\n        }\n      }\n\n      const pattern = this.state.pattern;\n      const isHide = existRulePattern === pattern;\n\n      if (isHide) {\n        this.setState({\n          popVisible: false,\n          condition: true\n        }, () => {\n          this.confirm();\n        });\n      } else {\n        this.setState({\n          popVisible: true,\n          condition: false\n        });\n      }\n    };\n\n    this.pageSizeChange = (current, size) => {\n      if (this._isMounted) {\n        this.setState({\n          pageSize: size\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.getLog();\n    this.getAppName();\n    this.getGoupAppList();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    let str = '';\n\n    if (this.state.result) {\n      str = JSON.stringify(JSON.parse(this.state.result), null, 4);\n    }\n\n    return jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739\n      },\n      __self: this\n    }, jsx(_Row, {\n      css: _ref2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }, jsx(Amodule, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 743\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, jsx(_Cascader, {\n      options: this.state.groupAppList,\n      displayRender: this.displayRender,\n      onChange: this.group_appChange,\n      value: this.state.group_app,\n      size: \"small\",\n      css: _ref5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }), jsx(_Select, {\n      size: \"small\",\n      css: _ref6,\n      value: this.state.compile_status,\n      onChange: this.compile_statusChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, jsx(Option, {\n      key: \"all\",\n      value: \"all\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, \"\\u6240\\u6709\\u65E5\\u5FD7\"), jsx(Option, {\n      key: \"uncompile\",\n      value: \"uncompile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"\\u672A\\u89E3\\u6790\\u65E5\\u5FD7\"), jsx(Option, {\n      key: \"compiled\",\n      value: \"compiled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761\n      },\n      __self: this\n    }, \"\\u5DF2\\u89E3\\u6790\\u65E5\\u5FD7\"))), jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764\n      },\n      __self: this\n    }, jsx(WyDatePicker, {\n      rangeTimeChange: this.curTimeChange,\n      curTime: this.state.curTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771\n      },\n      __self: this\n    }, jsx(WySpin, {\n      isSpining: this.state.isSpining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 772\n      },\n      __self: this\n    }, jsx(WyTable, {\n      xData: this.state.xData.length > 0 ? this.state.xData : [],\n      yData: this.state.yData.length > 0 ? this.state.yData : [],\n      pageSize: this.state.pageSize,\n      onShowSizeChange: this.pageSizeChange,\n      expandedRowRender: record => {\n        return jsx(\"div\", {\n          style: {\n            margin: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 778\n          },\n          __self: this\n        }, jsx(\"pre\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 779\n          },\n          __self: this\n        }, JSON.stringify(record.subdata, null, 4)));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    })))))), jsx(_Modal, {\n      title: \"\\u5B57\\u6BB5\\u63D0\\u53D6\",\n      visible: this.state.visible,\n      onOk: this.handleOk,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 791\n      },\n      __self: this\n    }, jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    }, \"\\u5B57\\u6BB5\\u540D\\uFF1A\", jsx(_Input, {\n      css: _ref7,\n      value: this.state.curSnippet.name,\n      onChange: this.curSnippetChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797\n      },\n      __self: this\n    })), jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802\n      },\n      __self: this\n    }, \"\\u5339\\u914D\\u5BF9\\u8C61\\uFF1A\", this.state.curSnippet.str)), jsx(_Modal, {\n      title: \"\\u4E3A\\u89C4\\u5219\\u547D\\u540D\",\n      visible: this.state.modalVisible,\n      onOk: this.saveRule,\n      onCancel: this.partCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811\n      },\n      __self: this\n    }, \"\\u89C4\\u5219\\u540D\\u79F0\\uFF1A\"), jsx(\"div\", {\n      css: _ref10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, jsx(_Input, {\n      value: this.state.rulename,\n      onChange: this.rulenameChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 815\n      },\n      __self: this\n    }, \"\\u5339\\u914D\\u5E94\\u7528\\uFF1A\"), jsx(\"div\", {\n      css: _ref13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816\n      },\n      __self: this\n    }, jsx(_Select, {\n      showSearch: true,\n      optionFilterProp: \"children\",\n      onChange: this.appnameChange,\n      css: _ref14,\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      value: this.state.appname,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 817\n      },\n      __self: this\n    }, jsx(Option, {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827\n      },\n      __self: this\n    }, \"\\u4E0D\\u9650\"), this.state.appNameList && this.state.appNameList.length > 0 ? this.state.appNameList.map(item => {\n      return jsx(Option, {\n        key: item,\n        value: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831\n        },\n        __self: this\n      }, item);\n    }) : ''))), jsx(\"div\", {\n      css: _ref15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840\n      },\n      __self: this\n    }, \"\\u89C4\\u5219\\u63CF\\u8FF0\\uFF1A\"), jsx(\"div\", {\n      css: _ref17,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    }, jsx(TextArea, {\n      value: this.state.ruledes,\n      onChange: this.ruledesChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 841\n      },\n      __self: this\n    })))), jsx(_Drawer, {\n      title: \"\\u89C4\\u5219\\u5339\\u914D\",\n      width: \"80%\",\n      placement: \"right\",\n      closable: false,\n      onClose: this.drawerClose,\n      visible: this.state.drawerVisible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref18,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref19,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853\n      },\n      __self: this\n    }, \"\\u6570\\u636E\\u5B9E\\u4F8B: \"), this.state.isSelectModel ? jsx(\"div\", {\n      css: _ref20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref21,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857\n      },\n      __self: this\n    }, this.state.wholeArr.length > 0 ? this.state.wholeArr.map(item => {\n      return jsx(\"span\", {\n        style: {\n          background: item.selected ? 'rgba(204,255,0,0.8)' : 'none'\n        },\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861\n        },\n        __self: this\n      }, item.str);\n    }) : this.state.messageForSelectModel), jsx(TextArea, {\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      value: this.state.messageForSelectModel,\n      onSelect: this.selectWord,\n      css: _ref22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867\n      },\n      __self: this\n    })) : jsx(TextArea, {\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      value: this.state.message,\n      onChange: this.messageChange,\n      css: _ref23,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876\n      },\n      __self: this\n    })), jsx(\"div\", {\n      css: _ref24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884\n      },\n      __self: this\n    }, jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, jsx(_Checkbox, {\n      onChange: this.isSelectModelChange,\n      checked: this.state.isSelectModel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885\n      },\n      __self: this\n    }, \"\\u5212\\u8BCD\\u5339\\u914D\")), this.state.wholeArr.length > 0 ? jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.clearData,\n      size: \"small\",\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 888\n      },\n      __self: this\n    }, \"\\u91CD\\u65B0\\u9009\\u62E9\")) : '', jsx(\"span\", {\n      css: _ref25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893\n      },\n      __self: this\n    }, jsx(_Select, {\n      showSearch: true,\n      optionFilterProp: \"children\",\n      onChange: this.curruleChange,\n      css: _ref26,\n      size: \"small\",\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      value: this.state.currule,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 894\n      },\n      __self: this\n    }, jsx(Option, {\n      key: \"mykey\",\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905\n      },\n      __self: this\n    }, \"\\u8BF7\\u9009\\u62E9\"), this.state.ruleList && this.state.ruleList.length > 0 ? this.state.ruleList.map(item => {\n      return jsx(Option, {\n        key: item.rulename,\n        value: item.rulename,\n        title: item.rulename,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909\n        },\n        __self: this\n      }, item.rulename);\n    }) : ''))), jsx(\"div\", {\n      css: _ref27,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref28,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    }, \"Grok\\u89E3\\u6790: \"), jsx(TextArea, {\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      value: this.state.pattern,\n      onChange: this.patternChange,\n      css: _ref29,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919\n      },\n      __self: this\n    })), jsx(\"div\", {\n      css: _ref30,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.doAnalysis,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 922\n      },\n      __self: this\n    }, \"\\u89E3\\u6790\")), jsx(\"div\", {\n      css: _ref31,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 924\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref32,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, \"\\u89E3\\u6790\\u7ED3\\u679C\\uFF1A\"), jsx(\"span\", {\n      css: _ref33,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 925\n      },\n      __self: this\n    }, jsx(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926\n      },\n      __self: this\n    }, str))), this.state.isExistModel ? jsx(_Popconfirm, {\n      title: \"\\u60A8\\u66F4\\u6539\\u4E86\\u5F53\\u524D\\u6240\\u9009\\u89C4\\u5219\\uFF0C\\u662F\\u5426\\u547D\\u540D\\u4E3A\\u65B0\\u7684\\u89C4\\u5219\\u5E76\\u5173\\u8054\\u6B64\\u5E94\\u7528\\uFF1F\",\n      visible: this.state.popVisible,\n      onVisibleChange: this.handleVisibleChange,\n      onConfirm: this.confirm,\n      onCancel: this.cancel,\n      okText: \"\\u786E\\u5B9A\",\n      cancelText: \"\\u53D6\\u6D88\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 933\n      },\n      __self: this\n    }, jsx(_Button, {\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942\n      },\n      __self: this\n    }, \"\\u5C06\\u8BE5\\u89C4\\u5219\\u5173\\u8054\\u5230\\u6B64\\u65E5\\u5FD7\\u4F8B\\u6240\\u5728\\u5E94\\u7528\")) : jsx(_Button, {\n      type: \"primary\",\n      onClick: this.readySave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945\n      },\n      __self: this\n    }, \"\\u4FDD\\u5B58Grok\\u89E3\\u6790\\u89C4\\u5219\")));\n  }\n\n}\n\nexport default Configure;","map":{"version":3,"sources":["/industry/app/src/SystemRule/Configure.js"],"names":["jsx","css","React","Component","_","WyTable","WyDatePicker","Amodule","wyAxiosPost","WySpin","decodeArr","forName","TextArea","Panel","Option","Text","ColorChange","Configure","state","message","messageForSelectModel","pattern","result","lastOne","xData","yData","pageSize","isSpining","activeKey","curTime","compile_status","isSelectModel","isExistModel","selArr","wholeArr","curSnippet","id","start","end","str","name","selected","visible","modalVisible","rulename","ruledes","appname","appNameList","drawerVisible","group_app","groupAppList","currule","ruleList","popVisible","condition","getCurRuleList","responseData","data","msg","_isMounted","length","setState","getGoupAppList","compile_statusChange","value","getLog","isSelectModelChange","e","target","checked","selectWord","event","window","preventDefault","stopPropagation","curMessage","selectionStart","selectionEnd","isIntersect","warning","selectedText","slice","notrim","trim","randomCount","Math","random","Date","getTime","asId","parseInt","toString","showModal","getAppName","appnameChange","compileArr","arr","resolveArr","map","item","index","noSelect","push","isIn","some","istart","iend","handleOk","cloneDeep","isRename","curArr","newArr","haha","sortBy","handleCancel","reg","modalCancel","partCancel","modalShow","curSnippetChange","cur","compileCur","Object","assign","clearData","messageChange","curruleChange","patternChange","doAnalysis","response","curTimeChange","start_time","last_time","info","curxData","xxx","statusIndex","findIndex","o","dataIndex","render","text","record","title","cursor","asExample","yyy","isLegal","isEqual","readySave","saveRule","test","status","success","rulenameChange","ruledesChange","showDrawer","drawerClose","group_appChange","displayRender","label","join","changeCondition","confirm","cancel","handleVisibleChange","existRule","existRulePattern","isHide","pageSizeChange","current","size","componentDidMount","componentWillUnmount","JSON","stringify","parse","margin","subdata","input","option","props","children","toLowerCase","indexOf","background","minRows","maxRows"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AAIA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;MAEQC,Q,UAAAA,Q;MACAC,K,aAAAA,K;MACAC,M,WAAAA,M;MACAC,I,eAAAA,I;;AACR,MAAMC,WAAW,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMC,SAAN,SAAwBd,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAC/Be,KAD+B,GACvB;AACNC,MAAAA,OAAO,EAAE,EADH;AACO;AACbC,MAAAA,qBAAqB,EAAC,EAFhB;AAEoB;AAC1BC,MAAAA,OAAO,EAAC,EAHF;AAGM;AACZC,MAAAA,MAAM,EAAE,EAJF;AAIM;AACZC,MAAAA,OAAO,EAAE;AAAI;AACXJ,QAAAA,OAAO,EAAE,EADF;AAEPE,QAAAA,OAAO,EAAE,EAFF;AAGPC,QAAAA,MAAM,EAAE;AAHD,OALH;AAWNE,MAAAA,KAAK,EAAC,EAXA;AAYNC,MAAAA,KAAK,EAAC,EAZA;AAaNC,MAAAA,QAAQ,EAAC,EAbH;AAcNC,MAAAA,SAAS,EAAE,KAdL;AAgBNC,MAAAA,SAAS,EAAC,EAhBJ;AAkBNC,MAAAA,OAAO,EAAE,EAlBH;AAmBN;AACAC,MAAAA,cAAc,EAAC,KApBT;AAsBNH,MAAAA,SAAS,EAAE,KAtBL;AAwBNI,MAAAA,aAAa,EAAE,KAxBT;AAwBe;AACrBC,MAAAA,YAAY,EAAE,KAzBR;AAyBc;AAEpBC,MAAAA,MAAM,EAAC,EA3BD;AA2BI;AACVC,MAAAA,QAAQ,EAAC,EA5BH;AA4BM;AACZC,MAAAA,UAAU,EAAC;AAAE;AACXC,QAAAA,EAAE,EAAC,EADM;AAETC,QAAAA,KAAK,EAAC,EAFG;AAGTC,QAAAA,GAAG,EAAC,EAHK;AAITC,QAAAA,GAAG,EAAE,EAJI;AAKTC,QAAAA,IAAI,EAAC,EALI;AAMTC,QAAAA,QAAQ,EAAC;AANA,OA7BL;AAqCNC,MAAAA,OAAO,EAAE,KArCH;AAsCNC,MAAAA,YAAY,EAAE,KAtCR;AAuCNC,MAAAA,QAAQ,EAAC,EAvCH;AAuCO;AACbC,MAAAA,OAAO,EAAC,EAxCF;AAwCK;AACXC,MAAAA,OAAO,EAAC,EAzCF;AA0CNC,MAAAA,WAAW,EAAC,EA1CN;AA4CNC,MAAAA,aAAa,EAAE,KA5CT;AA6CNC,MAAAA,SAAS,EAAE,CAAC,WAAD,CA7CL;AA8CNC,MAAAA,YAAY,EAAC,EA9CP;AAgDNC,MAAAA,OAAO,EAAC,EAhDF;AAgDM;AACZC,MAAAA,QAAQ,EAAC,EAjDH;AAiDO;AAEbC,MAAAA,UAAU,EAAE,KAnDN;AAoDNC,MAAAA,SAAS,EAAE;AApDL,KADuB;;AAAA,SA8D/BC,cA9D+B,GA8DdT,OAAD,IAAW;AACzBtC,MAAAA,WAAW,CAAC,kBAAD,EAAoB;AAACsC,QAAAA;AAAD,OAApB,EAA+BxB,MAAD,IAAU;AACjD,cAAMkC,YAAY,GAAGlC,MAAM,CAACmC,IAAP,CAAYC,GAAjC;;AACA,YAAG,KAAKC,UAAL,IAAmBH,YAAY,CAACI,MAAb,GAAoB,CAA1C,EAA4C;AAC1C,eAAKC,QAAL,CAAc;AACZT,YAAAA,QAAQ,EAAEI;AADE,WAAd;AAGD;AACF,OAPU,CAAX;AAQD,KAvE8B;;AAAA,SAwE/BM,cAxE+B,GAwEd,MAAI;AACnBtD,MAAAA,WAAW,CAAC,mBAAD,EAAqB,EAArB,EAAyBc,MAAD,IAAU;AAC3C,cAAMkC,YAAY,GAAGlC,MAAM,CAACmC,IAAP,CAAYC,GAAjC;;AACA,YAAG,KAAKC,UAAR,EAAmB;AACjB,eAAKE,QAAL,CAAc;AACZX,YAAAA,YAAY,EAAEM;AADF,WAAd;AAGD;AACF,OAPU,CAAX;AAQD,KAjF8B;;AAAA,SAkF/BO,oBAlF+B,GAkFPC,KAAD,IAAS;AAC9B,WAAKH,QAAL,CAAc;AACZ/B,QAAAA,cAAc,EAACkC;AADH,OAAd,EAEE,MAAI;AACJ,aAAKC,MAAL;AACD,OAJD;AAKD,KAxF8B;;AAAA,SA0F/BC,mBA1F+B,GA0FRC,CAAD,IAAK;AACzB,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZ9B,UAAAA,aAAa,EAAEoC,CAAC,CAACC,MAAF,CAASC,OADZ;AAEZrC,UAAAA,YAAY,EAAE,KAFF;AAGZZ,UAAAA,qBAAqB,EAAE+C,CAAC,CAACC,MAAF,CAASC,OAAT,GAAiB,KAAKnD,KAAL,CAAWC,OAA5B,GAAoC,EAH/C;AAIZc,UAAAA,MAAM,EAAC,EAJK;AAKZC,UAAAA,QAAQ,EAAC,EALG;AAMZiB,UAAAA,OAAO,EAAC,EANI;AAOZ9B,UAAAA,OAAO,EAAC,EAPI;AAQZC,UAAAA,MAAM,EAAC;AARK,SAAd;AAUD;AACF,KAvG8B;;AAAA,SAwG/BgD,UAxG+B,GAwGjBC,KAAD,IAAS;AACpB,YAAMJ,CAAC,GAAGK,MAAM,CAACD,KAAP,IAAgBA,KAA1B;AACAJ,MAAAA,CAAC,CAACM,cAAF;AACAN,MAAAA,CAAC,CAACO,eAAF;AACA,YAAMC,UAAU,GAAG,KAAKzD,KAAL,CAAWC,OAA9B;AACA,YAAMkB,KAAK,GAAG8B,CAAC,CAACC,MAAF,CAASQ,cAAvB;AACA,YAAMtC,GAAG,GAAG6B,CAAC,CAACC,MAAF,CAASS,YAArB,CANoB,CAOpB;;AACA,UAAG,KAAKC,WAAL,CAAiB,KAAK5D,KAAL,CAAWe,MAA5B,EAAmCI,KAAnC,EAAyCC,GAAzC,CAAH,EAAiD;AAC/C,iBAAQyC,OAAR,CAAgB,cAAhB;;AACA;AACD;;AACD,YAAMC,YAAY,GAAGL,UAAU,CAACM,KAAX,CAAiB5C,KAAjB,EAAwBC,GAAxB,CAArB;;AACA,YAAM4C,MAAM,GAAG9E,CAAC,CAAC+E,IAAF,CAAOH,YAAP,CAAf;;AACA,YAAMI,WAAW,GAAGC,IAAI,CAACC,MAAL,EAApB;AACA,YAAMzD,OAAO,GAAG,IAAI0D,IAAJ,GAAWC,OAAX,EAAhB;AACA,YAAMC,IAAI,GAAGC,QAAQ,CAACN,WAAD,EAAa,EAAb,CAAR,GAA2BM,QAAQ,CAAC7D,OAAD,EAAS,EAAT,CAAR,GAAqB,GAA7D;AACA,YAAMO,EAAE,GAAGqD,IAAI,CAACE,QAAL,EAAX;;AACA,UAAIX,YAAY,CAACpB,MAAb,GAAoB,CAApB,IAAyBsB,MAAM,CAACtB,MAAP,KAAkB,CAA5C,IAAkDoB,YAAY,CAACpB,MAAb,KAAwB,CAA1E,IAA+EoB,YAAY,KAAK,EAAnG,EAAsG;AACpG,iBAAQD,OAAR,CAAgB,UAAhB;;AACA;AACD;;AACD,UAAGC,YAAY,KAAK,KAAK9D,KAAL,CAAWC,OAA/B,EAAuC;AACrC;AACD;;AACD,UAAG,KAAKwC,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZ1B,UAAAA,UAAU,EAAC;AACTC,YAAAA,EADS;AAETC,YAAAA,KAFS;AAGTC,YAAAA,GAHS;AAITC,YAAAA,GAAG,EAAEyC,YAJI;AAKTxC,YAAAA,IAAI,EAAC,EALI;AAMTC,YAAAA,QAAQ,EAAE;AAND;AADC,SAAd,EASE,MAAI;AACJ,eAAKmD,SAAL;AACD,SAXD;AAYD;AACF,KA/I8B;;AAAA,SAgJ/BC,UAhJ+B,GAgJlB,MAAI;AACfrF,MAAAA,WAAW,CAAC,mBAAD,EAAqB,EAArB,EAAyBc,MAAD,IAAU;AAC3C,cAAMkC,YAAY,GAAGlC,MAAM,CAACmC,IAAP,CAAYC,GAAjC;;AACA,YAAG,KAAKC,UAAR,EAAmB;AACjB,eAAKE,QAAL,CAAc;AACZd,YAAAA,WAAW,EAAES;AADD,WAAd;AAGD;AACF,OAPU,CAAX;AAQD,KAzJ8B;;AAAA,SA0J/BsC,aA1J+B,GA0Jd9B,KAAD,IAAS;AACvB,UAAG,KAAKL,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZf,UAAAA,OAAO,EAAEkB;AADG,SAAd;AAGD;AACF,KAhK8B;;AAAA,SAkK/B+B,UAlK+B,GAkKlB,CAACC,GAAD,EAAKzD,GAAL,KAAW;AACtB,YAAM0D,UAAU,GAAG,EAAnB;;AACA,UAAGD,GAAG,IAAIA,GAAG,CAACpC,MAAJ,GAAW,CAArB,EAAuB;AACrBoC,QAAAA,GAAG,CAACE,GAAJ,CAAQ,CAACC,IAAD,EAAMC,KAAN,KAAc;AACpB,cAAGA,KAAK,KAAKJ,GAAG,CAACpC,MAAJ,GAAW,CAAxB,EAA0B;AACxB,gBAAGwC,KAAK,KAAG,CAAR,IAAaD,IAAI,CAAC9D,KAAL,KAAe,CAA/B,EAAiC;AAC/B,oBAAMgE,QAAQ,GAAG,EAAjB,CAD+B,CAE/B;AACA;AACA;;AACA,oBAAMjE,EAAE,GAAG4D,GAAG,CAACI,KAAD,CAAH,CAAWhE,EAAX,GAAgB,CAA3B;AACAiE,cAAAA,QAAQ,CAACjE,EAAT,GAAcA,EAAd;AACAiE,cAAAA,QAAQ,CAAC5D,QAAT,GAAoB,KAApB;AACA4D,cAAAA,QAAQ,CAAChE,KAAT,GAAiB,CAAjB;AACAgE,cAAAA,QAAQ,CAAC/D,GAAT,GAAe0D,GAAG,CAACI,KAAD,CAAH,CAAW/D,KAA1B;AACAgE,cAAAA,QAAQ,CAAC9D,GAAT,GAAeA,GAAG,CAAC0C,KAAJ,CAAUoB,QAAQ,CAAChE,KAAnB,EAA0BgE,QAAQ,CAAC/D,GAAnC,CAAf;AACA2D,cAAAA,UAAU,CAACK,IAAX,CAAgBD,QAAhB;AACD;;AACDJ,YAAAA,UAAU,CAACK,IAAX,CAAgBH,IAAhB;AACA,kBAAME,QAAQ,GAAG,EAAjB,CAfwB,CAgBxB;AACA;AACA;;AACA,kBAAMjE,EAAE,GAAG4D,GAAG,CAACI,KAAD,CAAH,CAAWhE,EAAX,GAAgB,CAA3B;AACAiE,YAAAA,QAAQ,CAACjE,EAAT,GAAcA,EAAd;AACAiE,YAAAA,QAAQ,CAAC5D,QAAT,GAAoB,KAApB;AACA4D,YAAAA,QAAQ,CAAChE,KAAT,GAAiB8D,IAAI,CAAC7D,GAAtB;AACA+D,YAAAA,QAAQ,CAAC/D,GAAT,GAAeC,GAAG,CAACqB,MAAnB;AACAyC,YAAAA,QAAQ,CAAC9D,GAAT,GAAeA,GAAG,CAAC0C,KAAJ,CAAUoB,QAAQ,CAAChE,KAAnB,EAA0BgE,QAAQ,CAAC/D,GAAnC,CAAf;AACA2D,YAAAA,UAAU,CAACK,IAAX,CAAgBD,QAAhB;AACD,WA1BD,MA0BK;AACH,gBAAGD,KAAK,KAAG,CAAR,IAAaD,IAAI,CAAC9D,KAAL,KAAe,CAA/B,EAAiC;AAC/B,oBAAMgE,QAAQ,GAAG,EAAjB,CAD+B,CAE/B;AACA;AACA;;AACA,oBAAMjE,EAAE,GAAG4D,GAAG,CAACI,KAAD,CAAH,CAAWhE,EAAX,GAAgB,CAA3B;AACAiE,cAAAA,QAAQ,CAACjE,EAAT,GAAcA,EAAd;AACAiE,cAAAA,QAAQ,CAAC5D,QAAT,GAAoB,KAApB;AACA4D,cAAAA,QAAQ,CAAChE,KAAT,GAAiB,CAAjB;AACAgE,cAAAA,QAAQ,CAAC/D,GAAT,GAAe0D,GAAG,CAACI,KAAD,CAAH,CAAW/D,KAA1B;AACAgE,cAAAA,QAAQ,CAAC9D,GAAT,GAAeA,GAAG,CAAC0C,KAAJ,CAAUoB,QAAQ,CAAChE,KAAnB,EAA0BgE,QAAQ,CAAC/D,GAAnC,CAAf;AACA2D,cAAAA,UAAU,CAACK,IAAX,CAAgBD,QAAhB;AACD;;AACDJ,YAAAA,UAAU,CAACK,IAAX,CAAgBH,IAAhB;AACA,kBAAME,QAAQ,GAAG,EAAjB,CAfG,CAgBH;AACA;AACA;;AACA,kBAAMjE,EAAE,GAAG4D,GAAG,CAACI,KAAD,CAAH,CAAWhE,EAAX,GAAgB,CAA3B;AACAiE,YAAAA,QAAQ,CAACjE,EAAT,GAAcA,EAAd;AACAiE,YAAAA,QAAQ,CAAC5D,QAAT,GAAoB,KAApB;AACA4D,YAAAA,QAAQ,CAAChE,KAAT,GAAiB8D,IAAI,CAAC7D,GAAtB;AACA+D,YAAAA,QAAQ,CAAC/D,GAAT,GAAe0D,GAAG,CAACI,KAAK,GAAC,CAAP,CAAH,CAAa/D,KAA5B;AACAgE,YAAAA,QAAQ,CAAC9D,GAAT,GAAeA,GAAG,CAAC0C,KAAJ,CAAUoB,QAAQ,CAAChE,KAAnB,EAA0BgE,QAAQ,CAAC/D,GAAnC,CAAf;AACA2D,YAAAA,UAAU,CAACK,IAAX,CAAgBD,QAAhB;AACD;AACF,SAtDD;AAuDD;;AACD,aAAOJ,UAAP;AACD,KA9N8B;;AAAA,SAgO/BnB,WAhO+B,GAgOjB,CAACkB,GAAD,EAAK3D,KAAL,EAAWC,GAAX,KAAiB;AAC7B,UAAIiE,IAAI,GAAG,KAAX;;AACA,UAAGP,GAAG,IAAIA,GAAG,CAACpC,MAAJ,GAAW,CAArB,EAAuB;AACrB2C,QAAAA,IAAI,GAAGP,GAAG,CAACQ,IAAJ,CAASL,IAAI,IAAE;AACpB,gBAAMM,MAAM,GAAGN,IAAI,CAAC9D,KAApB;AACA,gBAAMqE,IAAI,GAAGP,IAAI,CAAC7D,GAAlB;AACA,iBAAQ,CAACmE,MAAM,GAACpE,KAAP,IAAgBoE,MAAM,IAAIpE,KAA3B,KAAsCA,KAAK,GAACqE,IAA7C,IAAyDD,MAAM,GAACnE,GAAR,KAAiBA,GAAG,GAACoE,IAAJ,IAAYpE,GAAG,IAAIoE,IAApC,CAA/D;AACD,SAJM,CAAP;AAKD;;AACD,aAAOH,IAAP;AACD,KA1O8B;;AAAA,SA4O/BX,SA5O+B,GA4OnB,MAAM;AAChB,WAAK/B,QAAL,CAAc;AACZnB,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAhP8B;;AAAA,SAkP/BiE,QAlP+B,GAkPpBxC,CAAC,IAAI;AACd,UAAG,KAAKjD,KAAL,CAAWiB,UAAX,CAAsBK,IAAtB,KAA+B,EAAlC,EAAqC;AACnC,iBAAQuC,OAAR,CAAgB,SAAhB;AACD,OAFD,MAEK;AACH,cAAM9C,MAAM,GAAG7B,CAAC,CAACwG,SAAF,CAAY,KAAK1F,KAAL,CAAWe,MAAvB,CAAf;;AACA,cAAM4E,QAAQ,GAAG5E,MAAM,CAACuE,IAAP,CAAYL,IAAI,IAAE;AACjC,iBAAOA,IAAI,CAAC3D,IAAL,KAAc2B,CAAC,CAACC,MAAF,CAASJ,KAA9B;AACD,SAFgB,CAAjB;;AAGA,YAAG6C,QAAH,EAAY;AACV,mBAAQ9B,OAAR,CAAgB,WAAhB;AACD,SAFD,MAEK;AACH,gBAAM+B,MAAM,GAAG1G,CAAC,CAACwG,SAAF,CAAY,KAAK1F,KAAL,CAAWe,MAAvB,CAAf;;AACA,gBAAM8E,MAAM,GAAG3G,CAAC,CAACwG,SAAF,CAAY,KAAK1F,KAAL,CAAWiB,UAAvB,CAAf;;AACA2E,UAAAA,MAAM,CAACR,IAAP,CAAYS,MAAZ,EAHG,CAIH;;AACA,gBAAMC,IAAI,GAAG5G,CAAC,CAAC6G,MAAF,CAASH,MAAT,EAAiBX,IAAD,IAAQ;AACnC,mBAAOA,IAAI,CAAC9D,KAAZ;AACD,WAFY,CAAb;;AAGA,cAAG,KAAKsB,UAAR,EAAmB;AACjB,iBAAKE,QAAL,CAAc;AACZ5B,cAAAA,MAAM,EAAE7B,CAAC,CAACwG,SAAF,CAAYI,IAAZ;AADI,aAAd,EAEE,MAAI;AACJ,oBAAM9E,QAAQ,GAAG,KAAK6D,UAAL,CAAgB,KAAK7E,KAAL,CAAWe,MAA3B,EAAkC,KAAKf,KAAL,CAAWC,OAA7C,CAAjB;;AACA,kBAAG,KAAKwC,UAAR,EAAmB;AACjB,qBAAKE,QAAL,CAAc;AACZ3B,kBAAAA;AADY,iBAAd,EAEE,MAAI;AACJ,uBAAKgF,YAAL;AACA,wBAAMC,GAAG,GAAGzG,SAAS,CAAC,KAAKQ,KAAL,CAAWgB,QAAZ,EAAsB,KAAKhB,KAAL,CAAWE,qBAAjC,CAArB;;AACA,sBAAG,KAAKuC,UAAR,EAAmB;AACjB,yBAAKE,QAAL,CAAc;AACZxC,sBAAAA,OAAO,EAAE8F;AADG,qBAAd;AAGD;AACF,iBAVD;AAWD;AACF,aAjBD;AAkBD;AACF;AACF;AACF,KA1R8B;;AAAA,SA4R/BD,YA5R+B,GA4RhB/C,CAAC,IAAI;AAClB,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZnB,UAAAA,OAAO,EAAE,KADG;AAEZP,UAAAA,UAAU,EAAC;AACTC,YAAAA,EAAE,EAAC,EADM;AAETC,YAAAA,KAAK,EAAC,EAFG;AAGTC,YAAAA,GAAG,EAAC,EAHK;AAITC,YAAAA,GAAG,EAAE,EAJI;AAKTC,YAAAA,IAAI,EAAC;AALI;AAFC,SAAd;AAUD;AACF,KAzS8B;;AAAA,SA0S/B4E,WA1S+B,GA0SjBjD,CAAC,IAAE;AACf,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZlB,UAAAA,YAAY,EAAE,KADF;AAEZV,UAAAA,MAAM,EAAC,EAFK;AAEF;AACVC,UAAAA,QAAQ,EAAC,EAHG;AAGA;AACZC,UAAAA,UAAU,EAAC;AACTC,YAAAA,EAAE,EAAC,EADM;AAETC,YAAAA,KAAK,EAAC,EAFG;AAGTC,YAAAA,GAAG,EAAC,EAHK;AAITC,YAAAA,GAAG,EAAE,EAJI;AAKTC,YAAAA,IAAI,EAAC,EALI;AAMTC,YAAAA,QAAQ,EAAC;AANA,WAJC;AAYZG,UAAAA,QAAQ,EAAC,EAZG;AAaZE,UAAAA,OAAO,EAAC,EAbI;AAcZD,UAAAA,OAAO,EAAC,EAdI;AAeZtB,UAAAA,OAAO,EAAE;AACPJ,YAAAA,OAAO,EAAE,EADF;AAEPE,YAAAA,OAAO,EAAE,EAFF;AAGPC,YAAAA,MAAM,EAAE;AAHD,WAfG;AAoBZH,UAAAA,OAAO,EAAC,EApBI;AAqBZE,UAAAA,OAAO,EAAC,EArBI;AAsBZC,UAAAA,MAAM,EAAC,EAtBK;AAuBZ0B,UAAAA,aAAa,EAAE;AAvBH,SAAd;AAyBD;AACF,KAtU8B;;AAAA,SAuU/BqE,UAvU+B,GAuUnB,MAAI;AACd,UAAG,KAAK1D,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZlB,UAAAA,YAAY,EAAE,KADF;AAEZC,UAAAA,QAAQ,EAAC,EAFG;AAGZE,UAAAA,OAAO,EAAC,EAHI;AAIZD,UAAAA,OAAO,EAAC,EAJI;AAKZvB,UAAAA,MAAM,EAAC;AALK,SAAd;AAOD;AACF,KAjV8B;;AAAA,SAmV/BgG,SAnV+B,GAmVlBnD,CAAC,IAAE;AACd,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZlB,UAAAA,YAAY,EAAE;AADF,SAAd;AAGD;AACF,KAzV8B;;AAAA,SA0V/B4E,gBA1V+B,GA0VXpD,CAAD,IAAK;AACtB,YAAMqD,GAAG,GAAGpH,CAAC,CAACwG,SAAF,CAAY,KAAK1F,KAAL,CAAWiB,UAAvB,CAAZ;;AACA,YAAMsF,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiB,KAAKzG,KAAL,CAAWiB,UAA5B,EAAuC;AAACK,QAAAA,IAAI,EAAE2B,CAAC,CAACC,MAAF,CAASJ;AAAhB,OAAvC,CAAnB;;AACA,UAAG,KAAKL,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZ1B,UAAAA,UAAU,EAAE/B,CAAC,CAACwG,SAAF,CAAYa,UAAZ;AADA,SAAd;AAGD;AACF,KAlW8B;;AAAA,SAmW/BG,SAnW+B,GAmWnB,MAAI;AACd,UAAG,KAAKjE,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZ5B,UAAAA,MAAM,EAAC,EADK;AACF;AACVC,UAAAA,QAAQ,EAAC,EAFG;AAEA;AACZC,UAAAA,UAAU,EAAC;AACTC,YAAAA,EAAE,EAAC,EADM;AAETC,YAAAA,KAAK,EAAC,EAFG;AAGTC,YAAAA,GAAG,EAAC,EAHK;AAITC,YAAAA,GAAG,EAAE,EAJI;AAKTC,YAAAA,IAAI,EAAC,EALI;AAMTC,YAAAA,QAAQ,EAAC;AANA,WAHC;AAWZpB,UAAAA,OAAO,EAAC,EAXI;AAYZC,UAAAA,MAAM,EAAC;AAZK,SAAd;AAcD;AACF,KApX8B;;AAAA,SAsX/BuG,aAtX+B,GAsXd1D,CAAD,IAAK;AACnB,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZ1C,UAAAA,OAAO,EAAEgD,CAAC,CAACC,MAAF,CAASJ;AADN,SAAd;AAGD;AACF,KA5X8B;;AAAA,SA6X/B8D,aA7X+B,GA6Xd9D,KAAD,IAAS;AACvB,UAAG,KAAKL,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZV,UAAAA,OAAO,EAAEa,KADG;AAEZjC,UAAAA,aAAa,EAAC,KAFF;AAGZC,UAAAA,YAAY,EAAE,IAHF;AAIZC,UAAAA,MAAM,EAAC,EAJK;AAIF;AACVC,UAAAA,QAAQ,EAAC,EALG,CAKA;;AALA,SAAd,EAME,MAAI;AACJ;AACA,cAAIb,OAAO,GAAG,EAAd;AACA,gBAAM+B,QAAQ,GAAG,KAAKlC,KAAL,CAAWkC,QAA5B;;AACA,cAAGY,KAAK,KAAK,EAAb,EAAgB;AACd,iBAAKH,QAAL,CAAc;AACZxC,cAAAA,OAAO,EAAC;AADI,aAAd;AAGD,WAJD,MAIK;AACH,iBAAK,IAAI8E,IAAT,IAAiB/C,QAAjB,EAA0B;AACxB,kBAAG+C,IAAI,CAACvD,QAAL,KAAkBoB,KAArB,EAA2B;AACzB3C,gBAAAA,OAAO,GAAG8E,IAAI,CAAC9E,OAAf;AACA,qBAAKwC,QAAL,CAAc;AACZxC,kBAAAA;AADY,iBAAd;AAGA;AACD;AACF;AACF;AACF,SAzBD;AA0BD;AACF,KA1Z8B;;AAAA,SA2Z/B0G,aA3Z+B,GA2Zd5D,CAAD,IAAK;AACnB,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZxC,UAAAA,OAAO,EAAE8C,CAAC,CAACC,MAAF,CAASJ;AADN,SAAd;AAGD;AACF,KAja8B;;AAAA,SAya/BgE,UAza+B,GAyalB,MAAI;AACf,UAAG,KAAK9G,KAAL,CAAWC,OAAX,KAAuB,EAAvB,IAA6B,KAAKD,KAAL,CAAWG,OAAX,KAAuB,EAAvD,EAA0D;AAAA,4BAC1B,KAAKH,KADqB;AAAA,cAChDC,OADgD,eAChDA,OADgD;AAAA,cACvCE,OADuC,eACvCA,OADuC;AAExDb,QAAAA,WAAW,CAAC,mBAAD,EAAqB;AAACW,UAAAA,OAAD;AAAUE,UAAAA;AAAV,SAArB,EAAyCC,MAAD,IAAU;AAC3D,gBAAM2G,QAAQ,GAAG3G,MAAM,CAACmC,IAAP,CAAYC,GAA7B;;AACA,cAAG,KAAKC,UAAR,EAAmB;AACjB,iBAAKE,QAAL,CAAc;AACZvC,cAAAA,MAAM,EAAE2G;AADI,aAAd,EAEE,MAAI;AACJ,mBAAKpE,QAAL,CAAc;AACZtC,gBAAAA,OAAO,EAAE;AACPJ,kBAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OADb;AAEPE,kBAAAA,OAAO,EAAE,KAAKH,KAAL,CAAWG,OAFb;AAGPC,kBAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWI;AAHZ;AADG,eAAd;AAOD,aAVD;AAWD;AACF,SAfU,CAAX;AAgBD,OAlBD,MAkBK;AACH,iBAAQyD,OAAR,CAAgB,kBAAhB;AACD;AACF,KA/b8B;;AAAA,SAgc/BmD,aAhc+B,GAgcdlE,KAAD,IAAS;AACvB,UAAG,KAAKL,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZhC,UAAAA,OAAO,EAAEmC;AADG,SAAd,EAEE,MAAI;AACJ,eAAKC,MAAL;AACD,SAJD;AAKD;AACF,KAxc8B;;AAAA,SA0c/BA,MA1c+B,GA0ctB,MAAI;AAAA,2BACwB,KAAK/C,KAD7B;AAAA,YACJY,cADI,gBACJA,cADI;AAAA,YACWmB,SADX,gBACWA,SADX;AAEX,YAAMkF,UAAU,GAAG,KAAKjH,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAAnB;AACA,YAAMuG,SAAS,GAAG,KAAKlH,KAAL,CAAWW,OAAX,CAAmB,CAAnB,CAAlB;AAEA,YAAMwG,IAAI,GAAG;AAACvG,QAAAA,cAAD;AAAgBqG,QAAAA,UAAhB;AAA2BC,QAAAA,SAA3B;AAAqCnF,QAAAA;AAArC,OAAb;;AACA,UAAG,KAAKU,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZlC,UAAAA,SAAS,EAAE;AADC,SAAd;AAGD;;AACDnB,MAAAA,WAAW,CAAC,iBAAD,EAAmB;AAAC6H,QAAAA;AAAD,OAAnB,EAA2B/G,MAAD,IAAU;AAC7C,cAAMkC,YAAY,GAAGlC,MAAM,CAACmC,IAAP,CAAYC,GAAjC;;AACA,YAAI4E,QAAQ,GAAGlI,CAAC,CAACwG,SAAF,CAAYpD,YAAY,CAAC+E,GAAzB,CAAf;;AACA,cAAMC,WAAW,GAAGpI,CAAC,CAACqI,SAAF,CAAYH,QAAZ,EAAsBI,CAAD,IAAK;AAAC,iBAAOA,CAAC,CAACC,SAAF,KAAgB,QAAvB;AAAgC,SAA3D,CAApB;;AACAL,QAAAA,QAAQ,CAACE,WAAD,CAAR,CAAsBI,MAAtB,GAA+B,CAACC,IAAD,EAAOC,MAAP,EAAe1C,KAAf,KAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAOyC,IAAI,KAAG,SAAP,GAAiB;AAAG,UAAA,GAAG,MAAN;AAA2B,UAAA,SAAS,EAAC,aAArC;AAAmD,yBAAY,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAjB,GAA4F;AAAG,UAAA,SAAS,EAAC,aAAb;AAA2B,yBAAY,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAnG,CAAtD;;AACAP,QAAAA,QAAQ,CAAChC,IAAT,CAAc;AACZyC,UAAAA,KAAK,EAAE,IADK;AAEZJ,UAAAA,SAAS,EAAE,WAFC;AAGZC,UAAAA,MAAM,EAAE,CAACC,IAAD,EAAOC,MAAP,EAAe1C,KAAf,KAAuB;AAAQ,YAAA,IAAI,EAAC,OAAb;AAAqB,YAAA,IAAI,EAAC,SAA1B;AAAoC,YAAA,KAAK,EAAE;AAAC4C,cAAAA,MAAM,EAAC;AAAR,aAA3C;AAA+D,YAAA,OAAO,EAAE,MAAI,KAAKC,SAAL,CAAeH,MAAM,CAAC3H,OAAtB,EAA8B2H,MAAM,CAAChG,OAArC,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHnB,SAAd;AAOA,cAAMjB,OAAO,GAAG,EAAhB;AACAA,QAAAA,OAAO,CAACyE,IAAR,CAAa9C,YAAY,CAAC2E,UAA1B;AACAtG,QAAAA,OAAO,CAACyE,IAAR,CAAa9C,YAAY,CAAC4E,SAA1B;;AACA,YAAG,KAAKzE,UAAR,EAAmB;AACjB,eAAKE,QAAL,CAAc;AACZrC,YAAAA,KAAK,EAAE8G,QADK;AAEZ7G,YAAAA,KAAK,EAAE+B,YAAY,CAAC0F,GAFR;AAGZrH,YAAAA,OAHY;AAIZF,YAAAA,SAAS,EAAE;AAJC,WAAd;AAMD;AACF,OAvBU,CAAX;AAwBD,KA7e8B;;AAAA,SA+e/BsH,SA/e+B,GA+enB,CAAC9H,OAAD,EAAS2B,OAAT,KAAmB;AAC7B,WAAKe,QAAL,CAAc;AACZ;AACA1C,QAAAA,OAFY;AAGZC,QAAAA,qBAAqB,EAAED,OAHX;AAIZE,QAAAA,OAAO,EAAC,EAJI;AAIA;AACZC,QAAAA,MAAM,EAAE,EALI;AAKA;AACZC,QAAAA,OAAO,EAAE;AAAI;AACXJ,UAAAA,OAAO,EAAE,EADF;AAEPE,UAAAA,OAAO,EAAE,EAFF;AAGPC,UAAAA,MAAM,EAAE;AAHD,SANG;AAWZW,QAAAA,MAAM,EAAC,EAXK;AAWF;AACVC,QAAAA,QAAQ,EAAC,EAZG;AAYA;AACZC,QAAAA,UAAU,EAAC;AAAE;AACXC,UAAAA,EAAE,EAAC,EADM;AAETC,UAAAA,KAAK,EAAC,EAFG;AAGTC,UAAAA,GAAG,EAAC,EAHK;AAITC,UAAAA,GAAG,EAAE,EAJI;AAKTC,UAAAA,IAAI,EAAC,EALI;AAMTC,UAAAA,QAAQ,EAAC;AANA,SAbC;AAqBZU,QAAAA,OAAO,EAAC,EArBI;AAqBA;AACZH,QAAAA,aAAa,EAAE,IAtBH;AAuBZF,QAAAA;AAvBY,OAAd,EAwBE,MAAI;AACJ,aAAKS,cAAL,CAAoBT,OAApB;AACD,OA1BD;AA2BD,KA3gB8B;;AAAA,SA4gB/BqG,OA5gB+B,GA4gBrB,MAAI;AAAA,2BACqB,KAAKjI,KAD1B;AAAA,YACLG,OADK,gBACLA,OADK;AAAA,YACGF,OADH,gBACGA,OADH;AAAA,YACWG,MADX,gBACWA,MADX;AAEZ,UAAI6H,OAAO,GAAG,IAAd;;AACA,UACE9H,OAAO,KAAK,KAAKH,KAAL,CAAWK,OAAX,CAAmBF,OAA/B,IACAjB,CAAC,CAACgJ,OAAF,CAAUjI,OAAV,EAAmB,KAAKD,KAAL,CAAWK,OAAX,CAAmBJ,OAAtC,CADA,IAEAf,CAAC,CAACgJ,OAAF,CAAU9H,MAAV,EAAkB,KAAKJ,KAAL,CAAWK,OAAX,CAAmBD,MAArC,CAHF,EAIC;AACC,YAAGA,MAAM,KAAK,EAAd,EAAiB;AACf,cAAGA,MAAM,KAAI,IAAV,IAAkBA,MAAM,KAAI,MAA/B,EAAsC;AACpC;AACA6H,YAAAA,OAAO,GAAG,IAAV;AACD,WAHD,MAGK;AACHA,YAAAA,OAAO,GAAG,KAAV;;AACA,qBAAQpE,OAAR,CAAgB,MAAhB;AACD;AACF,SARD,MAQK;AACHoE,UAAAA,OAAO,GAAG,KAAV;;AACA,mBAAQpE,OAAR,CAAgB,QAAhB;AACD;AACF,OAjBD,MAiBK;AACHoE,QAAAA,OAAO,GAAG,KAAV;;AACA,iBAAQpE,OAAR,CAAgB,sBAAhB;AACD;;AAED,aAAOoE,OAAP;AACD,KAtiB8B;;AAAA,SAuiB/BE,SAviB+B,GAuiBnB,MAAI;AACd,UAAG,KAAKF,OAAL,EAAH,EAAkB;AAChB,aAAK7B,SAAL;AACD;AACF,KA3iB8B;;AAAA,SA6iB/BgC,QA7iB+B,GA6iBpB,MAAI;AACb,UAAG,KAAKpI,KAAL,CAAW0B,QAAX,KAAwB,EAAxB,IAA8BjC,OAAO,CAAC4I,IAAR,CAAa,KAAKrI,KAAL,CAAW0B,QAAxB,CAAjC,EAAmE;AAAA,6BACX,KAAK1B,KADM;AAAA,cAC1D0B,QAD0D,gBAC1DA,QAD0D;AAAA,cACjDC,OADiD,gBACjDA,OADiD;AAAA,cACzC1B,OADyC,gBACzCA,OADyC;AAAA,cACjCE,OADiC,gBACjCA,OADiC;AAAA,cACzBe,EADyB,gBACzBA,EADyB;AAAA,cACtBU,OADsB,gBACtBA,OADsB;AAEjEtC,QAAAA,WAAW,CAAC,eAAD,EAAiB;AAACoC,UAAAA,QAAD;AAAUC,UAAAA,OAAV;AAAkB1B,UAAAA,OAAlB;AAA0BE,UAAAA,OAA1B;AAAkCe,UAAAA,EAAlC;AAAqCU,UAAAA;AAArC,SAAjB,EAAgExB,MAAD,IAAU;AAClF,gBAAMkC,YAAY,GAAGlC,MAAM,CAACmC,IAAP,CAAYC,GAAjC;;AACA,cAAGF,YAAY,CAACgG,MAAb,KAAwB,CAA3B,EAA6B;AAC3B,qBAAQC,OAAR,CAAgBjG,YAAY,CAACE,GAA7B;;AACA,iBAAK0D,WAAL;AACD,WAHD,MAGK;AACH,qBAAQrC,OAAR,CAAgBvB,YAAY,CAACE,GAA7B;AACD;AACF,SARU,CAAX;AASD,OAXD,MAWK;AACH,iBAAQqB,OAAR,CAAgB,cAAhB;AACD;AACF,KA5jB8B;;AAAA,SA6jB/B2E,cA7jB+B,GA6jBbvF,CAAD,IAAK;AACpB,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZjB,UAAAA,QAAQ,EAAEuB,CAAC,CAACC,MAAF,CAASJ;AADP,SAAd;AAGD;AACF,KAnkB8B;;AAAA,SAokB/B2F,aApkB+B,GAokBdxF,CAAD,IAAK;AACnB,UAAG,KAAKR,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZhB,UAAAA,OAAO,EAAEsB,CAAC,CAACC,MAAF,CAASJ;AADN,SAAd;AAGD;AACF,KA1kB8B;;AAAA,SA6kB/B4F,UA7kB+B,GA6kBlB,MAAM;AACjB,WAAK/F,QAAL,CAAc;AACZb,QAAAA,aAAa,EAAE;AADH,OAAd;AAGD,KAjlB8B;;AAAA,SAmlB/B6G,WAnlB+B,GAmlBjB,MAAM;AAClB,WAAKhG,QAAL,CAAc;AACZ5B,QAAAA,MAAM,EAAC,EADK;AACF;AACVC,QAAAA,QAAQ,EAAC,EAFG;AAEA;AACZC,QAAAA,UAAU,EAAC;AACTC,UAAAA,EAAE,EAAC,EADM;AAETC,UAAAA,KAAK,EAAC,EAFG;AAGTC,UAAAA,GAAG,EAAC,EAHK;AAITC,UAAAA,GAAG,EAAE,EAJI;AAKTC,UAAAA,IAAI,EAAC,EALI;AAMTC,UAAAA,QAAQ,EAAC;AANA,SAHC;AAWZG,QAAAA,QAAQ,EAAC,EAXG;AAYZE,QAAAA,OAAO,EAAC,EAZI;AAaZD,QAAAA,OAAO,EAAC,EAbI;AAcZtB,QAAAA,OAAO,EAAE;AACPJ,UAAAA,OAAO,EAAE,EADF;AAEPE,UAAAA,OAAO,EAAE,EAFF;AAGPC,UAAAA,MAAM,EAAE;AAHD,SAdG;AAmBZH,QAAAA,OAAO,EAAC,EAnBI;AAoBZE,QAAAA,OAAO,EAAC,EApBI;AAqBZC,QAAAA,MAAM,EAAC,EArBK;AAsBZ0B,QAAAA,aAAa,EAAE;AAtBH,OAAd;AAwBD,KA5mB8B;;AAAA,SA8mB/B8G,eA9mB+B,GA8mBZ9F,KAAD,IAAS;AACzB,UAAG,KAAKL,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZZ,UAAAA,SAAS,EAAEe;AADC,SAAd,EAEE,MAAI;AACJ,eAAKC,MAAL;AACD,SAJD;AAKD;AACF,KAtnB8B;;AAAA,SAunB/B8F,aAvnB+B,GAunBdC,KAAD,IAAS;AACvB,aAAOA,KAAK,CAACC,IAAN,CAAW,KAAX,CAAP;AACD,KAznB8B;;AAAA,SA2nB/BC,eA3nB+B,GA2nBb,MAAM,CACtB;AAED,KA9nB8B;;AAAA,SAgoB/BC,OAhoB+B,GAgoBrB,MAAM;AACd,WAAKtG,QAAL,CAAc;AAAER,QAAAA,UAAU,EAAE;AAAd,OAAd;AADc,YAENC,SAFM,GAEQ,KAAKpC,KAFb,CAENoC,SAFM;;AAGd,UAAGA,SAAH,EAAa;AACX;AADW,6BAEkB,KAAKpC,KAFvB;AAAA,cAEHiC,OAFG,gBAEHA,OAFG;AAAA,cAEML,OAFN,gBAEMA,OAFN;AAGX,cAAMuF,IAAI,GAAG,EAAb;AACAA,QAAAA,IAAI,CAACzF,QAAL,GAAgBO,OAAhB;AACAkF,QAAAA,IAAI,CAACvF,OAAL,GAAeA,OAAf;AACAtC,QAAAA,WAAW,CAAC,8BAAD,EAAgC;AAAC6H,UAAAA;AAAD,SAAhC,EAAwC/G,MAAD,IAAU;AAC1D,gBAAMkC,YAAY,GAAGlC,MAAM,CAACmC,IAAP,CAAYC,GAAjC;;AACA,cAAGF,YAAY,CAACgG,MAAb,KAAwB,CAA3B,EAA6B;AAC3B,qBAAQC,OAAR,CAAgBjG,YAAY,CAACE,GAA7B;AACD,WAFD,MAEK;AACH,qBAAQqB,OAAR,CAAgBvB,YAAY,CAACE,GAA7B;AACD;AACF,SAPU,CAAX;AAQD,OAdD,MAcK;AACH;AACA,aAAKkC,SAAL;AACD;AACF,KArpB8B;;AAAA,SAwpB/BwE,MAxpB+B,GAwpBtB,MAAM;AACb,WAAKvG,QAAL,CAAc;AAAER,QAAAA,UAAU,EAAE;AAAd,OAAd;;AACA,eAAQ0B,OAAR,CAAgB,SAAhB;AACD,KA3pB8B;;AAAA,SA6pB/BsF,mBA7pB+B,GA6pBThH,UAAU,IAAI;AAElC,UAAG,CAAC,KAAK8F,OAAL,EAAJ,EAAmB;AACjB;AACD;;AACD,YAAMmB,SAAS,GAAG,KAAKpJ,KAAL,CAAWiC,OAA7B;AACA,UAAIoH,gBAAgB,GAAG,EAAvB;;AACA,WAAK,IAAIpE,IAAT,IAAiB,KAAKjF,KAAL,CAAWkC,QAA5B,EAAqC;AACnC,YAAG+C,IAAI,CAACvD,QAAL,KAAkB0H,SAArB,EAA+B;AAC7BC,UAAAA,gBAAgB,GAAGpE,IAAI,CAAC9E,OAAxB;AACA;AACD;AACF;;AAZiC,YAa1BA,OAb0B,GAab,KAAKH,KAbQ,CAa1BG,OAb0B;AAelC,YAAMmJ,MAAM,GAAGD,gBAAgB,KAAKlJ,OAApC;;AACA,UAAGmJ,MAAH,EAAU;AACR,aAAK3G,QAAL,CAAc;AACZR,UAAAA,UAAU,EAAE,KADA;AAEZC,UAAAA,SAAS,EAAE;AAFC,SAAd,EAGE,MAAI;AACJ,eAAK6G,OAAL;AACD,SALD;AAMD,OAPD,MAOK;AACH,aAAKtG,QAAL,CAAc;AACZR,UAAAA,UAAU,EAAE,IADA;AAEZC,UAAAA,SAAS,EAAE;AAFC,SAAd;AAID;AACF,KA1rB8B;;AAAA,SA2rB/BmH,cA3rB+B,GA2rBd,CAACC,OAAD,EAAUC,IAAV,KAAiB;AAChC,UAAG,KAAKhH,UAAR,EAAmB;AACjB,aAAKE,QAAL,CAAc;AACZnC,UAAAA,QAAQ,EAAEiJ;AADE,SAAd;AAGD;AACF,KAjsB8B;AAAA;;AAwD/BC,EAAAA,iBAAiB,GAAE;AACjB,SAAKjH,UAAL,GAAkB,IAAlB;AACA,SAAKM,MAAL;AACA,SAAK4B,UAAL;AACA,SAAK/B,cAAL;AACD;;AAqoBD+G,EAAAA,oBAAoB,GAAE;AACpB,SAAKlH,UAAL,GAAkB,KAAlB;AACD;;AACDiF,EAAAA,MAAM,GAAE;AACN,QAAIrG,GAAG,GAAG,EAAV;;AACA,QAAG,KAAKrB,KAAL,CAAWI,MAAd,EAAqB;AACnBiB,MAAAA,GAAG,GAAGuI,IAAI,CAACC,SAAL,CAAeD,IAAI,CAACE,KAAL,CAAW,KAAK9J,KAAL,CAAWI,MAAtB,CAAf,EAA8C,IAA9C,EAAoD,CAApD,CAAN;AACD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AACE,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWgC,YADtB;AAEE,MAAA,aAAa,EAAE,KAAK6G,aAFtB;AAGE,MAAA,QAAQ,EAAE,KAAKD,eAHjB;AAIE,MAAA,KAAK,EAAE,KAAK5I,KAAL,CAAW+B,SAJpB;AAKE,MAAA,IAAI,EAAC,OALP;AAME,MAAA,GAAG,OANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAUE;AAAQ,MAAA,IAAI,EAAC,OAAb;AACE,MAAA,GAAG,OADL;AAEE,MAAA,KAAK,EAAE,KAAK/B,KAAL,CAAWY,cAFpB;AAGE,MAAA,QAAQ,EAAE,KAAKiC,oBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,IAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,KAAZ;AAAkB,MAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCALF,EAME,IAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,WAAZ;AAAwB,MAAA,KAAK,EAAC,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCANF,EAOE,IAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,UAAZ;AAAuB,MAAA,KAAK,EAAC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAPF,CAVF,CADF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,YAAD;AACE,MAAA,eAAe,EAAG,KAAKmE,aADzB;AAEE,MAAA,OAAO,EAAE,KAAKhH,KAAL,CAAWW,OAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CArBF,CADF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,MAAD;AAAQ,MAAA,SAAS,EAAE,KAAKX,KAAL,CAAWS,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,OAAD;AACE,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWM,KAAX,CAAiBoC,MAAjB,GAAwB,CAAxB,GAA0B,KAAK1C,KAAL,CAAWM,KAArC,GAA2C,EADpD;AAEE,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWO,KAAX,CAAiBmC,MAAjB,GAAwB,CAAxB,GAA0B,KAAK1C,KAAL,CAAWO,KAArC,GAA2C,EAFpD;AAGE,MAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,QAHvB;AAIE,MAAA,gBAAgB,EAAE,KAAK+I,cAJzB;AAKE,MAAA,iBAAiB,EAAE3B,MAAM,IAAI;AAAE,eAAO;AAAK,UAAA,KAAK,EAAE;AAAEmC,YAAAA,MAAM,EAAE;AAAV,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACIH,IAAI,CAACC,SAAL,CAAejC,MAAM,CAACoC,OAAtB,EAA+B,IAA/B,EAAqC,CAArC,CADJ,CADkC,CAAP;AAItB,OATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CA7BF,CADF,CADF,CADF,EAoDE;AACE,MAAA,KAAK,EAAC,0BADR;AAEE,MAAA,OAAO,EAAE,KAAKhK,KAAL,CAAWwB,OAFtB;AAGE,MAAA,IAAI,EAAE,KAAKiE,QAHb;AAIE,MAAA,QAAQ,EAAE,KAAKO,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAO;AACL,MAAA,GAAG,OADE;AAEL,MAAA,KAAK,EAAE,KAAKhG,KAAL,CAAWiB,UAAX,CAAsBK,IAFxB;AAGL,MAAA,QAAQ,EAAE,KAAK+E,gBAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP,CANF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAS,KAAKrG,KAAL,CAAWiB,UAAX,CAAsBI,GAA/B,CAXF,CApDF,EAiEE;AACE,MAAA,KAAK,EAAC,gCADR;AAEE,MAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWyB,YAFtB;AAGE,MAAA,IAAI,EAAE,KAAK2G,QAHb;AAIE,MAAA,QAAQ,EAAE,KAAKjC,UAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME;AAAK,MAAA,GAAG,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B;AAAO,MAAA,KAAK,EAAE,KAAKnG,KAAL,CAAW0B,QAAzB;AAAmC,MAAA,QAAQ,EAAE,KAAK8G,cAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B,CAFF,CANF,EAUE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,gBAAgB,EAAC,UAFnB;AAGE,MAAA,QAAQ,EAAE,KAAK5D,aAHjB;AAIE,MAAA,GAAG,QAJL;AAKE,MAAA,YAAY,EAAE,CAACqF,KAAD,EAAQC,MAAR,KACZA,MAAM,CAACC,KAAP,CAAaC,QAAb,CAAsBC,WAAtB,GAAoCC,OAApC,CAA4CL,KAAK,CAACI,WAAN,EAA5C,KAAoE,CANxE;AAQE,MAAA,KAAK,EAAE,KAAKrK,KAAL,CAAW4B,OARpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE,IAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAVF,EAYI,KAAK5B,KAAL,CAAW6B,WAAX,IAA0B,KAAK7B,KAAL,CAAW6B,WAAX,CAAuBa,MAAvB,GAA8B,CAAxD,GACA,KAAK1C,KAAL,CAAW6B,WAAX,CAAuBmD,GAAvB,CAA2BC,IAAI,IAAE;AAC/B,aAAO,IAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,IAAb;AAAmB,QAAA,KAAK,EAAEA,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCA,IAAjC,CAAP;AACD,KAFD,CADA,GAKA,EAjBJ,CADF,CAFF,CAVF,EAmCE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,IAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKjF,KAAL,CAAW2B,OAA5B;AAAqC,MAAA,QAAQ,EAAE,KAAK8G,aAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7B,CAFF,CAnCF,CAjEF,EAyGE;AACE,MAAA,KAAK,EAAC,0BADR;AAEE,MAAA,KAAK,EAAC,KAFR;AAGE,MAAA,SAAS,EAAC,OAHZ;AAIE,MAAA,QAAQ,EAAE,KAJZ;AAKE,MAAA,OAAO,EAAE,KAAKE,WALhB;AAME,MAAA,OAAO,EAAE,KAAK3I,KAAL,CAAW8B,aANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,GAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,EAGI,KAAK9B,KAAL,CAAWa,aAAX,GACA;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,GAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKb,KAAL,CAAWgB,QAAX,CAAoB0B,MAApB,GAA2B,CAA3B,GACA,KAAK1C,KAAL,CAAWgB,QAAX,CAAoBgE,GAApB,CAAwBC,IAAI,IAAE;AAC1B,aAAO;AAAM,QAAA,KAAK,EAAE;AAAEsF,UAAAA,UAAU,EAACtF,IAAI,CAAC1D,QAAL,GAAc,qBAAd,GAAoC;AAAjD,SAAb;AAAuE,QAAA,GAAG,EAAE0D,IAAI,CAAC/D,EAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsF+D,IAAI,CAAC5D,GAA3F,CAAP;AACH,KAFD,CADA,GAKA,KAAKrB,KAAL,CAAWE,qBAPf,CADF,EAWE,IAAC,QAAD;AACE,MAAA,QAAQ,EAAE;AAAEsK,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,OAAO,EAAE;AAAvB,OADZ;AAEE,MAAA,KAAK,EAAE,KAAKzK,KAAL,CAAWE,qBAFpB;AAGE,MAAA,QAAQ,EAAE,KAAKkD,UAHjB;AAIE,MAAA,GAAG,QAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADA,GAqBA,IAAC,QAAD;AACE,MAAA,QAAQ,EAAE;AAAEoH,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,OAAO,EAAE;AAAvB,OADZ;AAEE,MAAA,KAAK,EAAE,KAAKzK,KAAL,CAAWC,OAFpB;AAGE,MAAA,QAAQ,EAAE,KAAK0G,aAHjB;AAIE,MAAA,GAAG,QAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBJ,CARF,EAwCE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM;AAAU,MAAA,QAAQ,EAAE,KAAK3D,mBAAzB;AAA8C,MAAA,OAAO,EAAE,KAAKhD,KAAL,CAAWa,aAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAN,CADF,EAGI,KAAKb,KAAL,CAAWgB,QAAX,CAAoB0B,MAApB,GAA2B,CAA3B,GACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM;AAAQ,MAAA,OAAO,EAAE,KAAKgE,SAAtB;AAAiC,MAAA,IAAI,EAAC,OAAtC;AAA8C,MAAA,IAAI,EAAC,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAN,CADA,GAGA,EANJ,EASE;AAAM,MAAA,GAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,gBAAgB,EAAC,UAFnB;AAGE,MAAA,QAAQ,EAAE,KAAKE,aAHjB;AAIE,MAAA,GAAG,QAJL;AAKE,MAAA,IAAI,EAAC,OALP;AAME,MAAA,YAAY,EAAE,CAACqD,KAAD,EAAQC,MAAR,KACZA,MAAM,CAACC,KAAP,CAAaC,QAAb,CAAsBC,WAAtB,GAAoCC,OAApC,CAA4CL,KAAK,CAACI,WAAN,EAA5C,KAAoE,CAPxE;AASE,MAAA,KAAK,EAAE,KAAKrK,KAAL,CAAWiC,OATpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWE,IAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,OAAZ;AAAoB,MAAA,KAAK,EAAC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAXF,EAaM,KAAKjC,KAAL,CAAWkC,QAAX,IAAuB,KAAKlC,KAAL,CAAWkC,QAAX,CAAoBQ,MAApB,GAA2B,CAAlD,GACA,KAAK1C,KAAL,CAAWkC,QAAX,CAAoB8C,GAApB,CAAwBC,IAAI,IAAE;AAC5B,aAAO,IAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,IAAI,CAACvD,QAAlB;AAA4B,QAAA,KAAK,EAAEuD,IAAI,CAACvD,QAAxC;AAAkD,QAAA,KAAK,EAAEuD,IAAI,CAACvD,QAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyEuD,IAAI,CAACvD,QAA9E,CAAP;AACD,KAFD,CADA,GAKA,EAlBN,CADF,CATF,CAxCF,EA0EE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,GAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EACmD,IAAC,QAAD;AAAU,MAAA,QAAQ,EAAE;AAAE8I,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,OAAO,EAAE;AAAvB,OAApB;AAAgD,MAAA,KAAK,EAAE,KAAKzK,KAAL,CAAWG,OAAlE;AAA2E,MAAA,QAAQ,EAAE,KAAK0G,aAA1F;AAA0G,MAAA,GAAG,QAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADnD,CA1EF,EA6EE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CA7EF,EAgFE;AAAK,MAAA,GAAG,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,GAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EACgD;AAAM,MAAA,GAAG,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEzF,GADF,CAD4C,CADhD,CAhFF,EAwFI,KAAKrB,KAAL,CAAWc,YAAX,GACA;AACE,MAAA,KAAK,EAAC,oKADR;AAEE,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWmC,UAFtB;AAGE,MAAA,eAAe,EAAE,KAAKgH,mBAHxB;AAIE,MAAA,SAAS,EAAE,KAAKF,OAJlB;AAKE,MAAA,QAAQ,EAAE,KAAKC,MALjB;AAME,MAAA,MAAM,EAAC,cANT;AAOE,MAAA,UAAU,EAAC,cAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASA;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGATA,CADA,GAaA;AAAS,MAAA,IAAI,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE,KAAKf,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDArGJ,CAzGF,CADF;AAqND;;AA/5B8B;;AAk6BjC,eAAepI,SAAf","sourcesContent":["/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core'\r\nimport styled from '@emotion/styled'\r\nimport React, { Component } from 'react'\r\nimport _ from 'lodash'\r\nimport { Row, Col, Input, Button, Collapse, Icon, Select, message, Checkbox, Modal, Typography, Drawer, Cascader, Popconfirm } from 'antd'\r\n\r\n\r\nimport WyTable from '../components/WyTable'\r\nimport WyDatePicker from '../components/WyDatePicker'\r\nimport { Amodule } from '../components/Amodule'\r\nimport { wyAxiosPost } from '../components/WyAxios'\r\nimport WySpin from '../components/WySpin'\r\nimport decodeArr from './decodeArr'\r\nimport { forName } from '../components/RegExp'\r\n\r\nconst { TextArea } = Input\r\nconst { Panel } = Collapse\r\nconst { Option }  = Select\r\nconst { Text } = Typography\r\nconst ColorChange = styled.span({\r\n  background:\"#3399cc\"\r\n})\r\nclass Configure extends Component{\r\n  state = {\r\n    message: '', //日志样例\r\n    messageForSelectModel:'', //划词时候的日志样例\r\n    pattern:'', //供匹配的正则\r\n    result: '', //解析出来的结果\r\n    lastOne: {   //最近一次执行解析之后的三个量的值\r\n      message: '',\r\n      pattern: '',\r\n      result: '',\r\n    },\r\n\r\n    xData:[],\r\n    yData:[],\r\n    pageSize:10,\r\n    isSpining: false,\r\n\r\n    activeKey:[],\r\n\r\n    curTime: [],\r\n    //indexList:[],\r\n    compile_status:'all',\r\n\r\n    isSpining: false,\r\n\r\n    isSelectModel: false,//是否是划词匹配模式\r\n    isExistModel: false,//是否是从已经有的里面选的模式\r\n\r\n    selArr:[],//划词时被选中的数据例\r\n    wholeArr:[],//通过选中的数据例，编译出的整条数据例\r\n    curSnippet:{ //最近一次选中的数据例的各个属性信息\r\n      id:'',\r\n      start:'',\r\n      end:'',\r\n      str: '',\r\n      name:'',\r\n      selected:''\r\n    },\r\n    visible: false,\r\n    modalVisible: false,\r\n    rulename:'', //待保存的新规则的名称\r\n    ruledes:'',//待保存的新规则的描述\r\n    appname:'',\r\n    appNameList:[],\r\n\r\n    drawerVisible: false,\r\n    group_app: ['all_group'],\r\n    groupAppList:[],\r\n\r\n    currule:'', //已有规则中选择时，被选中的规则\r\n    ruleList:[], //已有规则列表\r\n\r\n    popVisible: false,\r\n    condition: true\r\n\r\n  }\r\n  componentDidMount(){\r\n    this._isMounted = true\r\n    this.getLog()\r\n    this.getAppName()\r\n    this.getGoupAppList()\r\n  }\r\n  getCurRuleList= (appname)=>{\r\n    wyAxiosPost('Rule/getRuleList',{appname},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(this._isMounted && responseData.length>0){\r\n        this.setState({\r\n          ruleList: responseData\r\n        })\r\n      }\r\n    })\r\n  }\r\n  getGoupAppList = ()=>{\r\n    wyAxiosPost('Group/getGroupApp',{},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(this._isMounted){\r\n        this.setState({\r\n          groupAppList: responseData\r\n        })\r\n      }\r\n    })\r\n  }\r\n  compile_statusChange = (value)=>{\r\n    this.setState({\r\n      compile_status:value\r\n    },()=>{\r\n      this.getLog()\r\n    })\r\n  }\r\n  //取词正则相关\r\n  isSelectModelChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isSelectModel: e.target.checked,\r\n        isExistModel: false,\r\n        messageForSelectModel: e.target.checked?this.state.message:'',\r\n        selArr:[],\r\n        wholeArr:[],\r\n        currule:'',\r\n        pattern:'',\r\n        result:''\r\n      })\r\n    }\r\n  }\r\n  selectWord = (event)=>{\r\n    const e = window.event || event\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    const curMessage = this.state.message\r\n    const start = e.target.selectionStart\r\n    const end = e.target.selectionEnd\r\n    //交叉选择判断\r\n    if(this.isIntersect(this.state.selArr,start,end)){\r\n      message.warning('选择无效,请避免交叉选择')\r\n      return\r\n    }\r\n    const selectedText = curMessage.slice(start, end)\r\n    const notrim = _.trim(selectedText)\r\n    const randomCount = Math.random();\r\n    const curTime = new Date().getTime();\r\n    const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n    const id = asId.toString()\r\n    if((selectedText.length>0 && notrim.length === 0) || selectedText.length === 0 || selectedText === ''){\r\n      message.warning('请不要选择空字符')\r\n      return\r\n    }\r\n    if(selectedText === this.state.message){\r\n      return\r\n    }\r\n    if(this._isMounted){\r\n      this.setState({\r\n        curSnippet:{\r\n          id,\r\n          start,\r\n          end,\r\n          str: selectedText,\r\n          name:'',\r\n          selected: true\r\n        }\r\n      },()=>{\r\n        this.showModal()\r\n      })\r\n    }\r\n  }\r\n  getAppName = ()=>{\r\n    wyAxiosPost('Source/getAppName',{},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(this._isMounted){\r\n        this.setState({\r\n          appNameList: responseData\r\n        })\r\n      }\r\n    })\r\n  }\r\n  appnameChange = (value)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        appname: value\r\n      })\r\n    }\r\n  }\r\n  //将选中字符串数组中插入未选中字符串数组\r\n  compileArr = (arr,str)=>{\r\n    const resolveArr = []\r\n    if(arr && arr.length>0){\r\n      arr.map((item,index)=>{\r\n        if(index === arr.length-1){\r\n          if(index===0 && item.start !== 0){\r\n            const noSelect = {}\r\n            // const randomCount = Math.random();\r\n            // const curTime = new Date().getTime();\r\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n            const id = arr[index].id - 1\r\n            noSelect.id = id\r\n            noSelect.selected = false\r\n            noSelect.start = 0\r\n            noSelect.end = arr[index].start\r\n            noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n            resolveArr.push(noSelect)\r\n          }\r\n          resolveArr.push(item)\r\n          const noSelect = {}\r\n          // const randomCount = Math.random();\r\n          // const curTime = new Date().getTime();\r\n          // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n          const id = arr[index].id + 1\r\n          noSelect.id = id\r\n          noSelect.selected = false\r\n          noSelect.start = item.end\r\n          noSelect.end = str.length\r\n          noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n          resolveArr.push(noSelect)\r\n        }else{\r\n          if(index===0 && item.start !== 0){\r\n            const noSelect = {}\r\n            // const randomCount = Math.random();\r\n            // const curTime = new Date().getTime();\r\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n            const id = arr[index].id - 1\r\n            noSelect.id = id\r\n            noSelect.selected = false\r\n            noSelect.start = 0\r\n            noSelect.end = arr[index].start\r\n            noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n            resolveArr.push(noSelect)\r\n          }\r\n          resolveArr.push(item)\r\n          const noSelect = {}\r\n          // const randomCount = Math.random();\r\n          // const curTime = new Date().getTime();\r\n          // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n          const id = arr[index].id + 1\r\n          noSelect.id = id\r\n          noSelect.selected = false\r\n          noSelect.start = item.end\r\n          noSelect.end = arr[index+1].start\r\n          noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n          resolveArr.push(noSelect)\r\n        }\r\n      })\r\n    }\r\n    return resolveArr\r\n  }\r\n  //交叉选择判断\r\n  isIntersect = (arr,start,end)=>{\r\n    let isIn = false\r\n    if(arr && arr.length>0){\r\n      isIn = arr.some(item=>{\r\n        const istart = item.start\r\n        const iend = item.end\r\n        return ((istart<start || istart == start) && (start<iend)) || ((istart<end) && (end<iend || end == iend))\r\n      })\r\n    }\r\n    return isIn\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    if(this.state.curSnippet.name === ''){\r\n      message.warning('字段名不能为空')\r\n    }else{\r\n      const selArr = _.cloneDeep(this.state.selArr)\r\n      const isRename = selArr.some(item=>{\r\n        return item.name === e.target.value\r\n      })\r\n      if(isRename){\r\n        message.warning('请不要用重复字段名')\r\n      }else{\r\n        const curArr = _.cloneDeep(this.state.selArr)\r\n        const newArr = _.cloneDeep(this.state.curSnippet)\r\n        curArr.push(newArr)\r\n        //对数组排序\r\n        const haha = _.sortBy(curArr,(item)=>{\r\n          return item.start\r\n        })\r\n        if(this._isMounted){\r\n          this.setState({\r\n            selArr: _.cloneDeep(haha)\r\n          },()=>{\r\n            const wholeArr = this.compileArr(this.state.selArr,this.state.message)\r\n            if(this._isMounted){\r\n              this.setState({\r\n                wholeArr\r\n              },()=>{\r\n                this.handleCancel()\r\n                const reg = decodeArr(this.state.wholeArr, this.state.messageForSelectModel)\r\n                if(this._isMounted){\r\n                  this.setState({\r\n                    pattern: reg\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCancel = e => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: false,\r\n        curSnippet:{\r\n          id:'',\r\n          start:'',\r\n          end:'',\r\n          str: '',\r\n          name:''\r\n        }\r\n      })\r\n    }\r\n  }\r\n  modalCancel = e=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        modalVisible: false,\r\n        selArr:[],//被选中的数据段\r\n        wholeArr:[],//最终编译数组\r\n        curSnippet:{\r\n          id:'',\r\n          start:'',\r\n          end:'',\r\n          str: '',\r\n          name:'',\r\n          selected:''\r\n        },\r\n        rulename:'',\r\n        appname:'',\r\n        ruledes:'',\r\n        lastOne: {\r\n          message: '',\r\n          pattern: '',\r\n          result: '',\r\n        },\r\n        message:'',\r\n        pattern:'',\r\n        result:'',\r\n        drawerVisible: false\r\n      })\r\n    }\r\n  }\r\n  partCancel =()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        modalVisible: false,\r\n        rulename:'',\r\n        appname:'',\r\n        ruledes:'',\r\n        result:''\r\n      })\r\n    }\r\n  }\r\n\r\n  modalShow =  e=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        modalVisible: true\r\n      })\r\n    }\r\n  }\r\n  curSnippetChange = (e)=>{\r\n    const cur = _.cloneDeep(this.state.curSnippet)\r\n    const compileCur = Object.assign({},this.state.curSnippet,{name: e.target.value})\r\n    if(this._isMounted){\r\n      this.setState({\r\n        curSnippet: _.cloneDeep(compileCur)\r\n      })\r\n    }\r\n  }\r\n  clearData = ()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        selArr:[],//被选中的数据段\r\n        wholeArr:[],//最终编译数组\r\n        curSnippet:{\r\n          id:'',\r\n          start:'',\r\n          end:'',\r\n          str: '',\r\n          name:'',\r\n          selected:''\r\n        },\r\n        pattern:'',\r\n        result:''\r\n      })\r\n    }\r\n  }\r\n\r\n  messageChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        message: e.target.value\r\n      })\r\n    }\r\n  }\r\n  curruleChange = (value)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        currule: value,\r\n        isSelectModel:false,\r\n        isExistModel: true,\r\n        selArr:[],//划词时被选中的数据例\r\n        wholeArr:[],//通过选中的数据例，编译出的整条数据例\r\n      },()=>{\r\n        //此时取消划词模式,并匹配出pattern\r\n        let pattern = ''\r\n        const ruleList = this.state.ruleList\r\n        if(value === ''){\r\n          this.setState({\r\n            pattern:''\r\n          })\r\n        }else{\r\n          for (let item of ruleList){\r\n            if(item.rulename === value){\r\n              pattern = item.pattern\r\n              this.setState({\r\n                pattern\r\n              })\r\n              break\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  patternChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        pattern: e.target.value\r\n      })\r\n    }\r\n  }\r\n  // setActiveKey = (value)=>{\r\n  //   if(this._isMounted){\r\n  //     this.setState({\r\n  //       activeKey: value\r\n  //     })\r\n  //   }\r\n  // }\r\n  doAnalysis = ()=>{\r\n    if(this.state.message !== '' && this.state.pattern !== ''){\r\n      const { message, pattern } =  this.state\r\n      wyAxiosPost('Rule/getMsgByGrok',{message, pattern},(result)=>{\r\n        const response = result.data.msg\r\n        if(this._isMounted){\r\n          this.setState({\r\n            result: response\r\n          },()=>{\r\n            this.setState({\r\n              lastOne: {\r\n                message: this.state.message,\r\n                pattern: this.state.pattern,\r\n                result: this.state.result,\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n    }else{\r\n      message.warning('抱歉，数据实例和解析规则必须填写');\r\n    }\r\n  }\r\n  curTimeChange = (value)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        curTime: value\r\n      },()=>{\r\n        this.getLog()\r\n      })\r\n    }\r\n  }\r\n  //获取日志\r\n  getLog = ()=>{\r\n    const {compile_status,group_app} = this.state\r\n    const start_time = this.state.curTime[0]\r\n    const last_time = this.state.curTime[1]\r\n\r\n    const info = {compile_status,start_time,last_time,group_app}\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isSpining: true\r\n      })\r\n    }\r\n    wyAxiosPost('Elastic/getLogs',{info},(result)=>{\r\n      const responseData = result.data.msg\r\n      let curxData = _.cloneDeep(responseData.xxx)\r\n      const statusIndex = _.findIndex(curxData,(o)=>{return o.dataIndex === 'status'})\r\n      curxData[statusIndex].render = (text, record, index)=><span>{text==='success'?<i css={{color:\"#01bd4c\"}} className=\"fa fa-check\" aria-hidden=\"true\"></i>:<i className=\"fa fa-minus\" aria-hidden=\"true\"></i>}</span>\r\n      curxData.push({\r\n        title: '操作',\r\n        dataIndex: 'asexample',\r\n        render: (text, record, index)=><Button size=\"small\" type=\"primary\" style={{cursor:\"pointer\"}} onClick={()=>this.asExample(record.message,record.appname)}>\r\n        设为日志样例\r\n        </Button>\r\n      })\r\n      const curTime = []\r\n      curTime.push(responseData.start_time)\r\n      curTime.push(responseData.last_time)\r\n      if(this._isMounted){\r\n        this.setState({\r\n          xData: curxData,\r\n          yData: responseData.yyy,\r\n          curTime,\r\n          isSpining: false\r\n        })\r\n      }\r\n    })\r\n  }\r\n  //设为样例\r\n  asExample = (message,appname)=>{\r\n    this.setState({\r\n      //此时将已经划词的数据清除，将message和messageForSelectModel同步\r\n      message,\r\n      messageForSelectModel: message,\r\n      pattern:'', //供匹配的正则\r\n      result: '', //解析出来的结果\r\n      lastOne: {   //最近一次执行解析之后的三个量的值\r\n        message: '',\r\n        pattern: '',\r\n        result: '',\r\n      },\r\n      selArr:[],//划词时被选中的数据例\r\n      wholeArr:[],//通过选中的数据例，编译出的整条数据例\r\n      curSnippet:{ //最近一次选中的数据例的各个属性信息\r\n        id:'',\r\n        start:'',\r\n        end:'',\r\n        str: '',\r\n        name:'',\r\n        selected:''\r\n      },\r\n      currule:'', //已有规则中选择时，被选中的规则\r\n      drawerVisible: true,\r\n      appname\r\n    },()=>{\r\n      this.getCurRuleList(appname)\r\n    })\r\n  }\r\n  isLegal = ()=>{\r\n    const {pattern,message,result} = this.state\r\n    let isLegal = true\r\n    if(\r\n      pattern === this.state.lastOne.pattern &&\r\n      _.isEqual(message, this.state.lastOne.message) &&\r\n      _.isEqual(result, this.state.lastOne.result)\r\n    ){\r\n      if(result !== ''){\r\n        if(result !=='{}' && result !=='null'){\r\n          //this.modalShow()\r\n          isLegal = true\r\n        }else{\r\n          isLegal = false\r\n          message.warning('规则有误')\r\n        }\r\n      }else{\r\n        isLegal = false\r\n        message.warning('请先填写规则')\r\n      }\r\n    }else{\r\n      isLegal = false\r\n      message.warning('你还未执行解析，或者更改数据后未重新解析')\r\n    }\r\n\r\n    return isLegal\r\n  }\r\n  readySave = ()=>{\r\n    if(this.isLegal()){\r\n      this.modalShow()\r\n    }\r\n  }\r\n  //保存规则\r\n  saveRule = ()=>{\r\n    if(this.state.rulename !== '' && forName.test(this.state.rulename)){\r\n      const {rulename,ruledes,message,pattern,id,appname} = this.state\r\n      wyAxiosPost('Rule/saveRule',{rulename,ruledes,message,pattern,id,appname},(result)=>{\r\n        const responseData = result.data.msg\r\n        if(responseData.status === 1){\r\n          message.success(responseData.msg)\r\n          this.modalCancel()\r\n        }else{\r\n          message.warning(responseData.msg)\r\n        }\r\n      })\r\n    }else{\r\n      message.warning('规则名称未填写或填写有误')\r\n    }\r\n  }\r\n  rulenameChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        rulename: e.target.value\r\n      })\r\n    }\r\n  }\r\n  ruledesChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        ruledes: e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  //抽屉组件\r\n  showDrawer = () => {\r\n    this.setState({\r\n      drawerVisible: true,\r\n    })\r\n  }\r\n\r\n  drawerClose = () => {\r\n    this.setState({\r\n      selArr:[],//被选中的数据段\r\n      wholeArr:[],//最终编译数组\r\n      curSnippet:{\r\n        id:'',\r\n        start:'',\r\n        end:'',\r\n        str: '',\r\n        name:'',\r\n        selected:''\r\n      },\r\n      rulename:'',\r\n      appname:'',\r\n      ruledes:'',\r\n      lastOne: {\r\n        message: '',\r\n        pattern: '',\r\n        result: '',\r\n      },\r\n      message:'',\r\n      pattern:'',\r\n      result:'',\r\n      drawerVisible: false\r\n    })\r\n  }\r\n\r\n  group_appChange = (value)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        group_app: value\r\n      },()=>{\r\n        this.getLog()\r\n      })\r\n    }\r\n  }\r\n  displayRender = (label)=>{\r\n    return label.join(' / ')\r\n  }\r\n  //气泡框相关\r\n  changeCondition = () => {\r\n    //此处判断是否修改过现有规则\r\n\r\n  }\r\n\r\n  confirm = () => {\r\n    this.setState({ popVisible: false });\r\n    const { condition } = this.state\r\n    if(condition){\r\n      //此处将rule关联到app\r\n      const { currule, appname } = this.state\r\n      const info = {}\r\n      info.rulename = currule\r\n      info.appname = appname\r\n      wyAxiosPost('Source/updateSourceByAppRule',{info},(result)=>{\r\n        const responseData = result.data.msg\r\n        if(responseData.status === 1){\r\n          message.success(responseData.msg)\r\n        }else{\r\n          message.warning(responseData.msg)\r\n        }\r\n      })\r\n    }else{\r\n      //此处保存为新的rule\r\n      this.showModal()\r\n    }\r\n  }\r\n\r\n\r\n  cancel = () => {\r\n    this.setState({ popVisible: false });\r\n    message.warning('您已取消该操作');\r\n  }\r\n\r\n  handleVisibleChange = popVisible => {\r\n\r\n    if(!this.isLegal()){\r\n      return\r\n    }\r\n    const existRule = this.state.currule\r\n    let existRulePattern = ''\r\n    for (let item of this.state.ruleList){\r\n      if(item.rulename === existRule){\r\n        existRulePattern = item.pattern\r\n        break\r\n      }\r\n    }\r\n    const { pattern }  = this.state\r\n\r\n    const isHide = existRulePattern === pattern\r\n    if(isHide){\r\n      this.setState({\r\n        popVisible: false,\r\n        condition: true\r\n      },()=>{\r\n        this.confirm()\r\n      })\r\n    }else{\r\n      this.setState({\r\n        popVisible: true,\r\n        condition: false\r\n      })\r\n    }\r\n  }\r\n  pageSizeChange = (current, size)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        pageSize: size\r\n      })\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    this._isMounted = false\r\n  }\r\n  render(){\r\n    let str = ''\r\n    if(this.state.result){\r\n      str = JSON.stringify(JSON.parse(this.state.result), null, 4)\r\n    }\r\n    return (\r\n      <div>\r\n        <Row css={{marginTop:\"20px\"}}>\r\n          <Col>\r\n            <Amodule>\r\n              <div css={{display:\"flex\",height:\"40px\"}}>\r\n                <div css={{flex:\"1 1 auto\"}}>\r\n\r\n                  <Cascader\r\n                    options={this.state.groupAppList}\r\n                    displayRender={this.displayRender}\r\n                    onChange={this.group_appChange}\r\n                    value={this.state.group_app}\r\n                    size=\"small\"\r\n                    css={{minWidth:\"240px\"}}\r\n                  />\r\n                  <Select size=\"small\"\r\n                    css={{minWidth:\"160px\",marginLeft:\"20px\"}}\r\n                    value={this.state.compile_status}\r\n                    onChange={this.compile_statusChange}\r\n                  >\r\n                    <Option key='all' value='all'>所有日志</Option>\r\n                    <Option key='uncompile' value='uncompile'>未解析日志</Option>\r\n                    <Option key='compiled' value='compiled'>已解析日志</Option>\r\n                  </Select>\r\n                </div>\r\n                <div>\r\n                  <WyDatePicker\r\n                    rangeTimeChange={ this.curTimeChange }\r\n                    curTime={this.state.curTime}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <WySpin isSpining={this.state.isSpining}>\r\n                  <WyTable\r\n                    xData={this.state.xData.length>0?this.state.xData:[]}\r\n                    yData={this.state.yData.length>0?this.state.yData:[]}\r\n                    pageSize={this.state.pageSize}\r\n                    onShowSizeChange={this.pageSizeChange}\r\n                    expandedRowRender={record => { return <div style={{ margin: 0 }}>\r\n                        <pre>\r\n                          { JSON.stringify(record.subdata, null, 4) }\r\n                        </pre>\r\n                      </div>}\r\n                    }\r\n                  />\r\n                </WySpin>\r\n              </div>\r\n            </Amodule>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Modal\r\n          title=\"字段提取\"\r\n          visible={this.state.visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <p>字段名：<Input\r\n            css={{width:\"80%\"}}\r\n            value={this.state.curSnippet.name}\r\n            onChange={this.curSnippetChange}\r\n          /></p>\r\n          <p>匹配对象：{this.state.curSnippet.str}</p>\r\n        </Modal>\r\n        <Modal\r\n          title=\"为规则命名\"\r\n          visible={this.state.modalVisible}\r\n          onOk={this.saveRule}\r\n          onCancel={this.partCancel}\r\n        >\r\n          <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n            <div css={{flex:\"0 0 100px\"}}>规则名称：</div>\r\n            <div css={{flex:\"1 1 auto\"}}><Input value={this.state.rulename} onChange={this.rulenameChange}/></div>\r\n          </div>\r\n          <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n            <div css={{flex:\"0 0 100px\"}}>匹配应用：</div>\r\n            <div css={{flex:\"1 1 auto\"}}>\r\n              <Select\r\n                showSearch\r\n                optionFilterProp=\"children\"\r\n                onChange={this.appnameChange}\r\n                css={{width:\"100%\"}}\r\n                filterOption={(input, option) =>\r\n                  option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n                value={this.state.appname}\r\n              >\r\n                <Option value=\"\">不限</Option>\r\n                {\r\n                  this.state.appNameList && this.state.appNameList.length>0?\r\n                  this.state.appNameList.map(item=>{\r\n                    return <Option key={item} value={item}>{item}</Option>\r\n                  })\r\n                  :\r\n                  ''\r\n                }\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n            <div css={{flex:\"0 0 100px\"}}>规则描述：</div>\r\n            <div css={{flex:\"1 1 auto\"}}><TextArea value={this.state.ruledes} onChange={this.ruledesChange}/></div>\r\n          </div>\r\n        </Modal>\r\n        <Drawer\r\n          title=\"规则匹配\"\r\n          width=\"80%\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          onClose={this.drawerClose}\r\n          visible={this.state.drawerVisible}\r\n        >\r\n          <div css={{padding: \"20px\"}}>\r\n            <span css={{verticalAlign:\"top\"}}>数据实例: </span>\r\n            {\r\n              this.state.isSelectModel ?\r\n              <div css={{padding:\"5px 0 0 10px\",width:\"80%\",display:\"inline-block\",border:\"#22c960 solid 1px\",position:\"relative\",minHeight:\"50px\",borderRadius:\"5px\"}}>\r\n                <span css={{wordWrap:\"break-word\"}}>\r\n                  {\r\n                    this.state.wholeArr.length>0?\r\n                    this.state.wholeArr.map(item=>{\r\n                        return <span style={{ background:item.selected?'rgba(204,255,0,0.8)':'none'}} key={item.id}>{item.str}</span>\r\n                    })\r\n                    :\r\n                    this.state.messageForSelectModel\r\n                  }\r\n                </span>\r\n                <TextArea\r\n                  autosize={{ minRows: 2, maxRows: 6 }}\r\n                  value={this.state.messageForSelectModel}\r\n                  onSelect={this.selectWord}\r\n                  css={{border: \"none\",position:\"absolute\",left:\"0px\",top:\"0px\",background:\"none\",color:\"rgba(123,111,255,0.5)\"}}\r\n                />\r\n              </div>\r\n\r\n              :\r\n              <TextArea\r\n                autosize={{ minRows: 2, maxRows: 6 }}\r\n                value={this.state.message}\r\n                onChange={this.messageChange}\r\n                css={{width:\"80%\"}}\r\n              />\r\n            }\r\n          </div>\r\n          <div css={{paddingLeft:\"100px\"}}>\r\n            <span><Checkbox onChange={this.isSelectModelChange} checked={this.state.isSelectModel}>划词匹配</Checkbox></span>\r\n            {\r\n              this.state.wholeArr.length>0?\r\n              <span><Button onClick={this.clearData} size=\"small\" type=\"primary\">重新选择</Button></span>\r\n              :\r\n              ''\r\n            }\r\n\r\n            <span css={{marginLeft:\"20px\",display: \"inline-block\"}}>\r\n              <Select\r\n                showSearch\r\n                optionFilterProp=\"children\"\r\n                onChange={this.curruleChange}\r\n                css={{width:\"200px\"}}\r\n                size=\"small\"\r\n                filterOption={(input, option) =>\r\n                  option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                }\r\n                value={this.state.currule}\r\n              >\r\n                <Option key=\"mykey\" value=\"\">请选择</Option>\r\n                {\r\n                    this.state.ruleList && this.state.ruleList.length>0?\r\n                    this.state.ruleList.map(item=>{\r\n                      return <Option key={item.rulename} value={item.rulename} title={item.rulename}>{item.rulename}</Option>\r\n                    })\r\n                    :\r\n                    ''\r\n                }\r\n\r\n              </Select>\r\n            </span>\r\n          </div>\r\n          <div css={{padding: \"20px\"}}>\r\n            <span css={{verticalAlign:\"top\"}}>Grok解析: </span><TextArea autosize={{ minRows: 2, maxRows: 6 }} value={this.state.pattern} onChange={this.patternChange}  css={{width:\"80%\"}} />\r\n          </div>\r\n          <div css={{padding: \"20px\"}}>\r\n            <Button onClick={this.doAnalysis}>解析</Button>\r\n          </div>\r\n          <div css={{padding: \"20px\"}}>\r\n            <span css={{verticalAlign:\"top\"}}>解析结果：</span><span css={{overflow:\"auto\",display:\"inline-block\",width: \"80%\",minHeight:\"200px\",border:\"rgba(255,255,255,0.2) solid 1px\"}}>\r\n              <pre>{\r\n                str\r\n              }</pre>\r\n            </span>\r\n          </div>\r\n          {\r\n            this.state.isExistModel?\r\n            <Popconfirm\r\n              title=\"您更改了当前所选规则，是否命名为新的规则并关联此应用？\"\r\n              visible={this.state.popVisible}\r\n              onVisibleChange={this.handleVisibleChange}\r\n              onConfirm={this.confirm}\r\n              onCancel={this.cancel}\r\n              okText=\"确定\"\r\n              cancelText=\"取消\"\r\n            >\r\n            <Button type=\"primary\">将该规则关联到此日志例所在应用</Button>\r\n            </Popconfirm>\r\n            :\r\n            <Button  type=\"primary\" onClick={this.readySave} >保存Grok解析规则</Button>\r\n          }\r\n\r\n        </Drawer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Configure\r\n"]},"metadata":{},"sourceType":"module"}