{"ast":null,"code":"import _objectAssign from 'object-assign';\nimport { createElement, forwardRef } from 'react';\nimport { ThemeContext } from '@emotion/core';\nimport weakMemoize from '@emotion/weak-memoize';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nvar getTheme = function getTheme(outerTheme, theme) {\n  if (typeof theme === 'function') {\n    var mergedTheme = theme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production' && (mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme))) {\n      throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');\n    }\n\n    return mergedTheme;\n  }\n\n  if (process.env.NODE_ENV !== 'production' && (theme == null || typeof theme !== 'object' || Array.isArray(theme))) {\n    throw new Error('[ThemeProvider] Please make your theme prop a plain object');\n  }\n\n  return _objectAssign({}, outerTheme, theme);\n};\n\nvar createCacheWithTheme = weakMemoize(function (outerTheme) {\n  return weakMemoize(function (theme) {\n    return getTheme(outerTheme, theme);\n  });\n});\n\nvar ThemeProvider = function ThemeProvider(props) {\n  return createElement(ThemeContext.Consumer, null, function (theme) {\n    if (props.theme !== theme) {\n      theme = createCacheWithTheme(theme)(props.theme);\n    }\n\n    return createElement(ThemeContext.Provider, {\n      value: theme\n    }, props.children);\n  });\n};\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // should we change this to be forwardRef/withCSSContext style so it doesn't merge with props?\n\n\nvar withTheme = function withTheme(Component) {\n  var componentName = Component.displayName || Component.name || 'Component';\n\n  var render = function render(props, ref) {\n    return createElement(ThemeContext.Consumer, null, function (theme) {\n      return createElement(Component, _extends({\n        theme: theme,\n        ref: ref\n      }, props));\n    });\n  }; // $FlowFixMe\n\n\n  var WithTheme = forwardRef(render);\n  WithTheme.displayName = \"WithTheme(\" + componentName + \")\";\n  return hoistNonReactStatics(WithTheme, Component);\n};\n\nexport { ThemeProvider, withTheme };","map":null,"metadata":{},"sourceType":"module"}