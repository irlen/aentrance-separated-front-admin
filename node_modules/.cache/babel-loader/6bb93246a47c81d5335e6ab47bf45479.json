{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _mapv = require('mapv');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Boundary = function (_Component) {\n  _inherits(Boundary, _Component);\n\n  function Boundary(args) {\n    _classCallCheck(this, Boundary);\n\n    var _this = _possibleConstructorReturn(this, (Boundary.__proto__ || Object.getPrototypeOf(Boundary)).call(this, args));\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Boundary, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      this.initialize();\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._allRequest = {};\n      this._backData = {};\n      this.initialize();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.mapvLayer) {\n        this.mapvLayer.destroy();\n        this.mapvLayer = null;\n      }\n    }\n  }, {\n    key: 'getPointArrayByDataSetData',\n    value: function getPointArrayByDataSetData(dataSetData) {\n      var points = [];\n\n      for (var i = 0; i < dataSetData.length; i++) {\n        var coordinates = dataSetData[i].geometry.coordinates[0];\n        coordinates.forEach(function (coordinate) {\n          points.push(new BMap.Point(coordinate[0], coordinate[1]));\n        });\n      }\n\n      return points;\n    }\n  }, {\n    key: 'getBoundaryData',\n    value: function getBoundaryData() {\n      var sell = this;\n      var data = this.props.data;\n      var map = this.props.map;\n\n      if (!data) {\n        return;\n      }\n\n      this._request = {};\n      var self = this;\n      var bdary = new BMap.Boundary();\n      var dataSetData = [];\n\n      function isAllComplete() {\n        var flag = true;\n\n        for (var key in self._request) {\n          if (!self._request[key]) {\n            flag = false;\n          }\n        }\n\n        if (flag) {\n          self.dataSet.set(dataSetData);\n          var points = self.getPointArrayByDataSetData(dataSetData);\n\n          if (points.length > 0 && self.props.autoViewport !== false) {\n            map.setViewport(points, self.props.viewportOptions);\n          }\n        }\n      }\n\n      data.forEach(function (item, index) {\n        self._request[item.name] = false;\n\n        if (self._backData[item.name]) {\n          dataSetData = dataSetData.concat(self._backData[item.name]);\n          self._request[item.name] = true;\n        }\n      });\n      isAllComplete();\n      data.forEach(function (item, index) {\n        if (self._request[item.name]) {\n          return;\n        }\n\n        if (self._allRequest[item.name]) {\n          return;\n        } else {\n          self._allRequest[item.name] = true;\n        }\n\n        bdary.get(item.name, function (rs) {\n          //获取行政区域\n          var tmpData = [];\n\n          for (var i = 0; i < rs.boundaries.length; i++) {\n            var coordinates = [];\n            var path = rs.boundaries[i].split(';');\n\n            for (var j = 0; j < path.length; j++) {\n              coordinates.push(path[j].split(','));\n            }\n\n            tmpData.push({\n              geometry: {\n                type: 'Polygon',\n                coordinates: [coordinates]\n              },\n              count: item.count\n            });\n          }\n\n          self._backData[item.name] = tmpData;\n          dataSetData = dataSetData.concat(tmpData);\n          self._request[item.name] = true;\n          isAllComplete();\n        });\n      });\n    }\n  }, {\n    key: 'initialize',\n    value: function initialize() {\n      var map = this.props.map;\n\n      if (!map) {\n        return;\n      }\n\n      if (!this.mapvLayer) {\n        this.dataSet = new _mapv.DataSet([]);\n        var options = this.props.layerOptions || {\n          gradient: {\n            0: 'yellow',\n            1: 'red'\n          },\n          max: 100,\n          globalAlpha: 0.8,\n          draw: 'intensity'\n        };\n        this.mapvLayer = new _mapv.baiduMapLayer(map, this.dataSet, options);\n      }\n\n      this.getBoundaryData();\n    }\n  }]);\n\n  return Boundary;\n}(_component2.default);\n\nexports.default = Boundary;","map":null,"metadata":{},"sourceType":"script"}