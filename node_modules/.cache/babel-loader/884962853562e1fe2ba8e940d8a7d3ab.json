{"ast":null,"code":"var _jsxFileName = \"/industry/app/src/components/Map/index.js\";\nimport React, { Component } from 'react';\nimport echarts from 'echarts';\nimport ReactEcharts from 'echarts-for-react';\nimport china from './maps/china.js';\nimport world from './maps/world.js';\nimport shenzhen from './maps/shenzhen.js';\nimport usa from './maps/usa.js';\nimport _ from 'lodash';\nimport { themeOne } from '../echartTheme';\nimport DropList from '../DropList';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getOption = () => {\n      //const planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\n      const planePath = 'arrow';\n      const colors = ['#a6c84c', '#ffa022', '#46bee9'];\n      const series = [];\n      series.push({\n        //后面发光的效果\n        name: '',\n        type: 'lines',\n        zlevel: 1,\n        effect: {\n          //发光体特效\n          show: true,\n          period: 6,\n          trailLength: 0,\n          //发过点后面的虚光\n          color: 'rgba(255,255,255,0.5)',\n          symbolSize: 3 //发光体的大小\n\n        },\n        lineStyle: {\n          normal: {\n            color: params => {\n              return params.data.lightColor;\n            },\n            //移动发光体颜色\n            width: 0,\n            curveness: 0.2\n          }\n        },\n        data: this.state.lineData //地图数据\n\n      }, {\n        //连线和箭头\n        name: '',\n        type: 'lines',\n        zlevel: 2,\n        symbol: ['none', 'arrow'],\n        //连线两端，起始端无箭头，终点端有箭头\n        symbolSize: 5,\n        effect: {\n          //连线和箭头特效\n          show: true,\n          period: 6,\n          trailLength: 0,\n          symbol: planePath,\n          symbolSize: 1\n        },\n        lineStyle: {\n          normal: {\n            color: params => {\n              return params.data.lineColor;\n            },\n            //连线颜色\n            width: 1,\n            opacity: 0.6,\n            curveness: 0.2\n          }\n        },\n        data: this.state.lineData //地图数据\n\n      }, {\n        //节点配置\n        name: '',\n        type: 'effectScatter',\n        coordinateSystem: 'geo',\n        zlevel: 2,\n        rippleEffect: {\n          //涟漪特效相关配置\n          brushType: 'stroke' //波纹绘制方式，'stroke','fill'\n\n        },\n        label: {\n          normal: {\n            show: true,\n            position: 'right',\n            formatter: '{b}'\n          }\n        },\n        //symbol: ['none', 'none'],//节点形状\n        symbolSize: 10,\n        //节点大小\n        itemStyle: {\n          normal: {\n            color: params => {\n              return params.data.color;\n            } //节点颜色\n\n          }\n        },\n        data: this.state.pointData\n      });\n      const option = {\n        backgroundColor: 'rgba(0,0,0,0)',\n        //地图背景色\n        title: {\n          text: '',\n          subtext: '',\n          left: 'center',\n          textStyle: {\n            color: 'rgba(255,255,255,0.8)',\n            lineHeight: \"20px\"\n          }\n        },\n        layoutCenter: ['50%', '50%'],\n        //地图位置\n        layoutSize: '120%',\n        //地图放大比例\n        tooltip: {\n          trigger: 'item',\n          formatter: params => {\n            if (params.componentSubType === \"effectScatter\") {\n              // is edge\n              return '节点为：' + params.data.name + '<br/>' + '访问：' + params.data.value[2] + '' + this.state.unit;\n            } else if (params.componentSubType === \"lines\") {\n              return '源：' + params.data.fromName + '<br/>' + '目的：' + params.data.toName + '<br/>' + '访问：' + params.data.value + '' + this.state.unit;\n            }\n          }\n        },\n        legend: {\n          //图例为空\n          orient: 'vertical',\n          top: 'bottom',\n          left: 'right',\n          data: [],\n          textStyle: {\n            color: '#fff'\n          },\n          selectedMode: 'single'\n        },\n        geo: {\n          //地图选择\n          map: this.state.region,\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          roam: true,\n          itemStyle: {\n            //地图样式\n            normal: {\n              areaColor: '\trgba(1,211,159,0.1)',\n              //地图颜色\n              borderColor: 'rgba(0,255,255,0.88)' //区域分界线颜色\n\n            },\n            emphasis: {\n              areaColor: 'rgba(0,251,255,0.56)',\n              //鼠标移入颜色\n              borderColor: 'rgba(255,255,255,0.88)' //区域分界线颜色\n\n            }\n          }\n        },\n        series: series\n      };\n      return option;\n    };\n\n    this.state = {\n      lineData: [],\n      pointData: [],\n      region: 'china',\n      unit: 'kb',\n      mapName: ''\n    };\n  }\n\n  componentDidMount() {\n    if (JSON.stringify(this.props.mapData).length > 2) {\n      const _this$props$mapData = this.props.mapData,\n            lineData = _this$props$mapData.lineData,\n            pointData = _this$props$mapData.pointData,\n            region = _this$props$mapData.region,\n            unit = _this$props$mapData.unit,\n            mapName = _this$props$mapData.mapName;\n      this.setState({\n        lineData,\n        pointData,\n        region,\n        unit\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!_.isEqual(this.props.mapData, nextProps.mapData) || this.props.height !== nextProps.height) {\n      const _nextProps$mapData = nextProps.mapData,\n            lineData = _nextProps$mapData.lineData,\n            pointData = _nextProps$mapData.pointData,\n            region = _nextProps$mapData.region,\n            unit = _nextProps$mapData.unit,\n            mapName = _nextProps$mapData.mapName;\n      this.setState({\n        lineData,\n        pointData,\n        region,\n        unit,\n        mapName\n      });\n    }\n  }\n\n  render() {\n    echarts.registerTheme('my_theme', themeOne);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(ReactEcharts, {\n      option: this.getOption(),\n      theme: \"my_theme\",\n      opts: {\n        renderer: 'canvas'\n      },\n      style: {\n        height: this.props.height ? this.props.height + 'px' : '400px',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(DropList, {\n      dropPosition: _.cloneDeep(this.state.dropPosition),\n      dropData: _.cloneDeep(this.state.dropData),\n      isexist: _.cloneDeep(this.state.isexist),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map; //数据\n// lineData = [\n//   {\n//     fromName: '上海',\n//     toName: '东莞',\n//     coords: [[121.4648,31.2891],[113.8953,22.901], 后台传过来没有，需要转化该字段\n//     value: 12\n//   },{\n//     fromName: '杭州',\n//     toName: '渭南',\n//     coords:[[119.5313,29.8773],[109.7864,35.0299]],\n//     value: 20\n//   },\n// ]\n// pointData = [\n//   {\n//     name: '上海',\n//     value: [121.4648,31.2891,10],  //经纬度和value组成的数组，后台传过来只有字符串value，没有坐标值，需转化\n//     symbolSize: 10  //节点大小，根据pointData.value值算出相对大小\n//   }\n// ]\n//region: 'china' 地图类型\n//unit : 'kb'  单位","map":{"version":3,"sources":["/industry/app/src/components/Map/index.js"],"names":["React","Component","echarts","ReactEcharts","china","world","shenzhen","usa","_","themeOne","DropList","Map","constructor","props","getOption","planePath","colors","series","push","name","type","zlevel","effect","show","period","trailLength","color","symbolSize","lineStyle","normal","params","data","lightColor","width","curveness","state","lineData","symbol","lineColor","opacity","coordinateSystem","rippleEffect","brushType","label","position","formatter","itemStyle","pointData","option","backgroundColor","title","text","subtext","left","textStyle","lineHeight","layoutCenter","layoutSize","tooltip","trigger","componentSubType","value","unit","fromName","toName","legend","orient","top","selectedMode","geo","map","region","emphasis","roam","areaColor","borderColor","mapName","componentDidMount","JSON","stringify","mapData","length","setState","componentWillReceiveProps","nextProps","isEqual","height","render","registerTheme","renderer","cloneDeep","dropPosition","dropData","isexist"],"mappings":"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","sourcesContent":["import React ,{ Component } from 'react'\r\nimport echarts from 'echarts'\r\nimport ReactEcharts from 'echarts-for-react'\r\nimport china from './maps/china.js'\r\nimport world from './maps/world.js'\r\nimport shenzhen from './maps/shenzhen.js'\r\nimport usa from './maps/usa.js'\r\n\r\nimport _ from 'lodash'\r\nimport { themeOne } from '../echartTheme'\r\nimport DropList from '../DropList'\r\nclass Map extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      lineData:[],\r\n      pointData:[],\r\n      region:'china',\r\n      unit:'kb',\r\n      mapName:''\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    if(JSON.stringify(this.props.mapData).length>2){\r\n      const { lineData, pointData, region, unit, mapName} = this.props.mapData\r\n      this.setState({\r\n        lineData, pointData, region, unit\r\n      })\r\n    }\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(\r\n      ! _.isEqual(this.props.mapData,nextProps.mapData) ||\r\n      this.props.height !== nextProps.height\r\n    ){\r\n      const { lineData, pointData, region, unit, mapName} = nextProps.mapData\r\n      this.setState({\r\n        lineData, pointData, region, unit, mapName\r\n      })\r\n    }\r\n  }\r\n  getOption = ()=>{\r\n    //const planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\r\n    const planePath = 'arrow'\r\n    const colors = ['#a6c84c', '#ffa022', '#46bee9'];\r\n    const series = [];\r\n    series.push(\r\n    { //后面发光的效果\r\n        name: '',\r\n        type: 'lines',\r\n        zlevel: 1,\r\n        effect: { //发光体特效\r\n            show: true,\r\n            period: 6,\r\n            trailLength: 0, //发过点后面的虚光\r\n            color: 'rgba(255,255,255,0.5)',\r\n            symbolSize: 3, //发光体的大小\r\n        },\r\n        lineStyle: {\r\n            normal: {\r\n                color: (params)=>{return params.data.lightColor}, //移动发光体颜色\r\n                width: 0,\r\n                curveness: 0.2\r\n            }\r\n        },\r\n        data: this.state.lineData  //地图数据\r\n    },\r\n    { //连线和箭头\r\n        name: '',\r\n        type: 'lines',\r\n        zlevel: 2,\r\n        symbol: ['none', 'arrow'],//连线两端，起始端无箭头，终点端有箭头\r\n        symbolSize: 5,\r\n        effect: { //连线和箭头特效\r\n            show: true,\r\n            period: 6,\r\n            trailLength: 0,\r\n            symbol: planePath,\r\n            symbolSize: 1\r\n        },\r\n        lineStyle: {\r\n            normal: {\r\n                color: (params)=>{return params.data.lineColor}, //连线颜色\r\n                width: 1,\r\n                opacity: 0.6,\r\n                curveness: 0.2\r\n            }\r\n        },\r\n        data: this.state.lineData //地图数据\r\n    },\r\n    { //节点配置\r\n        name: '',\r\n        type: 'effectScatter',\r\n        coordinateSystem: 'geo',\r\n        zlevel: 2,\r\n        rippleEffect: { //涟漪特效相关配置\r\n            brushType: 'stroke', //波纹绘制方式，'stroke','fill'\r\n        },\r\n        label: {\r\n            normal: {\r\n                show: true,\r\n                position: 'right',\r\n                formatter: '{b}'\r\n            }\r\n        },\r\n        //symbol: ['none', 'none'],//节点形状\r\n        symbolSize: 10,//节点大小\r\n        itemStyle: {\r\n            normal: {\r\n                color: (params)=>{return params.data.color} //节点颜色\r\n            }\r\n        },\r\n        data: this.state.pointData\r\n    });\r\n\r\n    const option = {\r\n       backgroundColor: 'rgba(0,0,0,0)',//地图背景色\r\n       title : {\r\n           text: '',\r\n           subtext: '',\r\n           left: 'center',\r\n           textStyle : {\r\n               color: 'rgba(255,255,255,0.8)',\r\n               lineHeight:\"20px\",\r\n           }\r\n       },\r\n       layoutCenter:['50%','50%'], //地图位置\r\n\t\t\t layoutSize: '120%', //地图放大比例\r\n       tooltip : {\r\n           trigger: 'item',\r\n           formatter: (params)=>{\r\n      \t\t  if (params.componentSubType === \"effectScatter\"){    // is edge\r\n      \t\t\t\treturn '节点为：'+params.data.name+'<br/>'+'访问：'+params.data.value[2]+''+this.state.unit;\r\n            }else if(params.componentSubType === \"lines\"){\r\n              return '源：'+params.data.fromName+'<br/>'+'目的：'+params.data.toName+'<br/>'+'访问：'+params.data.value+''+this.state.unit;\r\n            }\r\n\t\t\t\t }\r\n       },\r\n       legend: { //图例为空\r\n           orient: 'vertical',\r\n           top: 'bottom',\r\n           left: 'right',\r\n           data:[],\r\n           textStyle: {\r\n               color: '#fff'\r\n           },\r\n           selectedMode: 'single'\r\n       },\r\n       geo: { //地图选择\r\n           map: this.state.region,\r\n           label: {\r\n               emphasis: {\r\n                   show: false\r\n               }\r\n           },\r\n           roam: true,\r\n           itemStyle: { //地图样式\r\n               normal: {\r\n                 areaColor: '\trgba(1,211,159,0.1)', //地图颜色\r\n                 borderColor: 'rgba(0,255,255,0.88)'//区域分界线颜色\r\n                                },\r\n               emphasis: {\r\n                 areaColor: 'rgba(0,251,255,0.56)', //鼠标移入颜色\r\n                 borderColor: 'rgba(255,255,255,0.88)'//区域分界线颜色\r\n               }\r\n           }\r\n       },\r\n       series: series\r\n   };\r\n    return option;\r\n  }\r\n  render(){\r\n    echarts.registerTheme('my_theme',themeOne)\r\n    return(\r\n      <div>\r\n        <ReactEcharts\r\n          option={this.getOption()}\r\n          theme=\"my_theme\"\r\n          opts={{renderer: 'canvas'}}\r\n          style={{height: this.props.height?this.props.height+'px':'400px', width: '100%'}}\r\n        />\r\n        <DropList\r\n          dropPosition={_.cloneDeep(this.state.dropPosition)}\r\n          dropData={_.cloneDeep(this.state.dropData)}\r\n          isexist={_.cloneDeep(this.state.isexist)}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map\r\n\r\n//数据\r\n// lineData = [\r\n//   {\r\n//     fromName: '上海',\r\n//     toName: '东莞',\r\n//     coords: [[121.4648,31.2891],[113.8953,22.901], 后台传过来没有，需要转化该字段\r\n//     value: 12\r\n//   },{\r\n//     fromName: '杭州',\r\n//     toName: '渭南',\r\n//     coords:[[119.5313,29.8773],[109.7864,35.0299]],\r\n//     value: 20\r\n//   },\r\n// ]\r\n\r\n// pointData = [\r\n//   {\r\n//     name: '上海',\r\n//     value: [121.4648,31.2891,10],  //经纬度和value组成的数组，后台传过来只有字符串value，没有坐标值，需转化\r\n//     symbolSize: 10  //节点大小，根据pointData.value值算出相对大小\r\n//   }\r\n// ]\r\n\r\n//region: 'china' 地图类型\r\n\r\n//unit : 'kb'  单位\r\n"]},"metadata":{},"sourceType":"module"}