{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _mapv = require('mapv');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(args) {\n    _classCallCheck(this, App);\n\n    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, args));\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: 'handleClick',\n    value: function handleClick(id) {\n      this.props.onClick && this.props.onClick(id);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var preData = JSON.stringify(prevProps.data);\n      var data = JSON.stringify(this.props.data);\n\n      if (preData != data || !this.map) {\n        this.initialize();\n      }\n    }\n  }, {\n    key: 'initialize',\n    value: function initialize() {\n      var self = this;\n      var map = this.props.map;\n\n      if (!map) {\n        return;\n      }\n\n      this.map = map;\n\n      if (!this._createLayer) {\n        this.createLayers();\n      }\n\n      this.showDatasets(this.props.data);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.initialize();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.shadowSet = null;\n      this.circleSet = null;\n      this.textSet = null;\n      this.numSet = null;\n      this.otherSet = null;\n      this.otherShadowSet = null;\n\n      for (var i = 0; i < this.layers.length; i++) {\n        this.layers[i].destroy();\n        this.layers[i] = null;\n      }\n    }\n  }, {\n    key: 'showDatasets',\n    value: function showDatasets(list) {\n      var _this2 = this;\n\n      var shadowData = [];\n      var circleData = [];\n      var textData = [];\n      var otherData = [];\n      var otherShadowData = [];\n      var overViews = [];\n\n      if (list.length > 0) {\n        list.forEach(function (item, key) {\n          var cityCenter = item['location'].split(',');\n\n          var p = _this2.project.pointToLngLat(new BMap.Pixel(cityCenter[0], cityCenter[1]));\n\n          overViews.push(p);\n\n          if (key < 10) {\n            shadowData.push({\n              geometry: {\n                type: 'Point',\n                coordinates: [cityCenter[0], cityCenter[1]]\n              },\n              count: parseInt(item['count'])\n            });\n            circleData.push({\n              geometry: {\n                type: 'Point',\n                coordinates: [cityCenter[0], cityCenter[1]]\n              },\n              id: key,\n              count: parseInt(item['count']),\n              text: parseInt(key) + 1\n            });\n            textData.push({\n              geometry: {\n                type: 'Point',\n                coordinates: [cityCenter[0], cityCenter[1]]\n              },\n              count: parseInt(item['count']),\n              text: item['text']\n            });\n          } else {\n            otherData.push({\n              geometry: {\n                type: 'Point',\n                coordinates: [cityCenter[0], cityCenter[1]]\n              },\n              id: key,\n              count: parseInt(item['count'])\n            });\n            otherShadowData.push({\n              geometry: {\n                type: 'Point',\n                coordinates: [cityCenter[0], cityCenter[1]]\n              },\n              count: parseInt(item['count'])\n            });\n          }\n        });\n        this.shadowSet.set(shadowData);\n        this.circleSet.set(circleData);\n        this.textSet.set(textData);\n        this.numSet.set(circleData);\n        this.otherSet.set(otherData);\n        this.otherShadowSet.set(otherShadowData);\n\n        if (overViews.length > 0 && this.props.autoViewport !== false) {\n          map.setViewport(overViews, self.props.viewportOptions);\n        }\n      }\n    }\n  }, {\n    key: 'createLayers',\n    value: function createLayers() {\n      this._createLayer = true;\n      var map = this.map;\n      this.project = map.getMapType().getProjection();\n      var self = this;\n      var shadowSet = this.shadowSet = new _mapv.DataSet([]);\n      var circleSet = this.circleSet = new _mapv.DataSet([]);\n      var textSet = this.textSet = new _mapv.DataSet([]);\n      var numSet = this.numSet = new _mapv.DataSet([]);\n      var otherSet = this.otherSet = new _mapv.DataSet([]);\n      var otherShadowSet = this.otherShadowSet = new _mapv.DataSet([]);\n      this.layers = [];\n      var otherOptions = {\n        coordType: 'bd09mc',\n        splitList: {\n          4: '#d53938',\n          3: '#fe6261',\n          2: '#ffb02d',\n          other: '#80db69'\n        },\n        shadowBlur: 10,\n        size: 5,\n        max: 30,\n        methods: {\n          click: function click(item) {\n            if (item) {\n              self.handleClick(item.id);\n            }\n          },\n          mousemove: function mousemove(item) {\n            otherSet.update(function (item) {\n              item.fillStyle = null;\n            });\n\n            if (item) {\n              self.isSmallPath = true;\n              self.props.map.setDefaultCursor('pointer');\n              otherSet.update(function (item) {\n                item.fillStyle = '#1495ff';\n              }, {\n                id: item.id\n              });\n            } else {\n              self.isSmallPath = false;\n\n              if (!self.isSmallPath && !self.isBigPath) {\n                self.props.map.setDefaultCursor('auto');\n              }\n            }\n          }\n        },\n        draw: 'category'\n      };\n      var otherShadowOptions = {\n        splitList: {\n          4: '#d53938',\n          3: '#fe6261',\n          2: '#ffb02d',\n          1: '#80db69'\n        },\n        styleType: 'fill',\n        globalAlpha: 0.4,\n        coordType: 'bd09mc',\n        size: 8,\n        minSize: 5,\n        draw: 'category'\n      };\n      this.layers.push(new _mapv.baiduMapLayer(map, otherShadowSet, otherShadowOptions));\n      this.layers.push(new _mapv.baiduMapLayer(map, otherSet, otherOptions));\n\n      if (this.props.animation === true) {\n        var shadowOptions = {\n          splitList: {\n            4: '#d53938',\n            3: '#fe6261',\n            2: '#ffb02d',\n            1: '#80db69'\n          },\n          styleType: 'stroke',\n          globalAlpha: 0.4,\n          coordType: 'bd09mc',\n          size: 20,\n          minSize: 10,\n          draw: 'category'\n        };\n        this.layers.push(new _mapv.baiduMapAnimationLayer(map, shadowSet, shadowOptions));\n      }\n\n      var circleOptions = {\n        splitList: {\n          1: '#80db69',\n          4: '#d53938',\n          3: '#fe6261',\n          2: '#ffb02d'\n        },\n        fillStyle: 'red',\n        coordType: 'bd09mc',\n        size: 10,\n        draw: 'category',\n        methods: {\n          click: function click(item) {\n            if (item) {\n              self.handleClick(item.id);\n            }\n          },\n          mousemove: function mousemove(item) {\n            circleSet.update(function (item) {\n              item.fillStyle = null;\n            });\n\n            if (item) {\n              self.isBigPath = true;\n              self.map.setDefaultCursor('pointer');\n              circleSet.update(function (item) {\n                item.fillStyle = '#1495ff';\n              }, {\n                id: item.id\n              });\n            } else {\n              self.isBigPath = false;\n\n              if (!self.isBigPath && !self.isSmallPath) {\n                self.map.setDefaultCursor('auto');\n              }\n            }\n          }\n        }\n      };\n      this.layers.push(new _mapv.baiduMapLayer(map, circleSet, circleOptions));\n      var numOptions = {\n        coordType: 'bd09mc',\n        draw: 'text',\n        font: '13px Arial',\n        fillStyle: '#ffffff',\n        shadowColor: '#ffffff',\n        shadowBlur: 10\n      };\n      this.layers.push(new _mapv.baiduMapLayer(map, numSet, numOptions));\n      var textOptions = {\n        coordType: 'bd09mc',\n        font: '13px Arial',\n        fillStyle: '#666',\n        shadowColor: '#ffffff',\n        shadowBlur: 10,\n        draw: 'text',\n        avoid: true,\n        textAlign: 'left',\n        offset: {\n          x: 10,\n          y: 0\n        }\n      };\n      this.layers.push(new _mapv.baiduMapLayer(map, textSet, textOptions));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }], [{\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        autoViewport: true\n      };\n    }\n  }]);\n\n  return App;\n}(_component2.default);\n\nexports.default = App;","map":null,"metadata":{},"sourceType":"script"}