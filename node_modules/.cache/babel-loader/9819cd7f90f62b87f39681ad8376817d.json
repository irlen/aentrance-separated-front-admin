{"ast":null,"code":"import \"antd/es/modal/style\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\nimport \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/popconfirm/style\";\nimport _Popconfirm from \"antd/es/popconfirm\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nvar _jsxFileName = \"/industry/app/src/SystemRule/Manage.js\";\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport JSONFormatter from 'json-formatter-js';\nimport { Amodule } from '../components/Amodule';\nimport WyTable from '../components/WyTable';\nimport { wyAxiosPost } from '../components/WyAxios';\nimport WySpin from '../components/WySpin';\nimport { forName } from '../components/RegExp';\nimport decodeArr from './decodeArr';\nconst TextArea = _Input.TextArea;\nconst Option = _Select.Option;\n\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"1ls65i2-Manage\",\n  styles: \"margin-left:5px;label:Manage;\"\n} : {\n  name: \"1ls65i2-Manage\",\n  styles: \"margin-left:5px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"34wk8m-Manage\",\n  styles: \"margin-left:10px;label:Manage;\"\n} : {\n  name: \"34wk8m-Manage\",\n  styles: \"margin-left:10px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"jjlulk-Manage\",\n  styles: \"padding-top:10px;label:Manage;\"\n} : {\n  name: \"jjlulk-Manage\",\n  styles: \"padding-top:10px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbVJ1bGUvTWFuYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStldUIiLCJmaWxlIjoiL2luZHVzdHJ5L2FwcC9zcmMvU3lzdGVtUnVsZS9NYW5hZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IElucHV0LCBCdXR0b24sIERyYXdlciwgUm93LCBDb2wsIG1lc3NhZ2UsIE1vZGFsLFBvcGNvbmZpcm0sIENoZWNrYm94LCBTZWxlY3QgfSBmcm9tICdhbnRkJ1xyXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXHJcbmltcG9ydCBKU09ORm9ybWF0dGVyIGZyb20gJ2pzb24tZm9ybWF0dGVyLWpzJ1xyXG5cclxuXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCAgV3lUYWJsZSAgZnJvbSAnLi4vY29tcG9uZW50cy9XeVRhYmxlJ1xyXG5pbXBvcnQgeyB3eUF4aW9zUG9zdH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBmb3JOYW1lIH0gZnJvbSAnLi4vY29tcG9uZW50cy9SZWdFeHAnXHJcbmltcG9ydCBkZWNvZGVBcnIgZnJvbSAnLi9kZWNvZGVBcnInXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgeyBPcHRpb24gfSA9IFNlbGVjdFxyXG5jbGFzcyBNYW5hZ2UgZXh0ZW5kcyBDb21wb25lbnR7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICBtZXNzYWdlOiAnJyxcclxuICAgIG1lc3NhZ2VGb3JTZWxlY3RNb2RlbDonJywgLy/liJLor43ml7blgJnnmoTml6Xlv5fmoLfkvotcclxuICAgIHBhdHRlcm46JycsXHJcbiAgICByZXN1bHQ6ICcnLFxyXG4gICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICBtb2RhbFZpc2libGU6IGZhbHNlLFxyXG4gICAgcnVsZW5hbWU6ICcnLFxyXG4gICAgcnVsZWRlczonJyxcclxuICAgIGxhc3RPbmU6IHsgICAvL+acgOi/keS4gOasoeaJp+ihjOino+aekOS5i+WQjueahOS4ieS4qumHj+eahOWAvFxyXG4gICAgICBtZXNzYWdlOiAnJyxcclxuICAgICAgcGF0dGVybjogJycsXHJcbiAgICAgIHJlc3VsdDogJycsXHJcbiAgICB9LFxyXG5cclxuICAgIHBhZ2VTaXplOjUsXHJcbiAgICBpc1NwaW5pbmc6IGZhbHNlLFxyXG4gICAgaWRzOltdLFxyXG4gICAgeERhdGE6IFtdLFxyXG4gICAgeURhdGE6IFtdLFxyXG4gICAgaWQ6JycsXHJcblxyXG4gICAgbW9kYWwydmlzaWJsZTogZmFsc2UsXHJcbiAgICBjdXJTbmlwcGV0OnsgLy/mnIDov5HkuIDmrKHpgInkuK3nmoTmlbDmja7kvovnmoTlkITkuKrlsZ7mgKfkv6Hmga9cclxuICAgICAgaWQ6JycsXHJcbiAgICAgIHN0YXJ0OicnLFxyXG4gICAgICBlbmQ6JycsXHJcbiAgICAgIHN0cjogJycsXHJcbiAgICAgIG5hbWU6JycsXHJcbiAgICAgIHNlbGVjdGVkOicnXHJcbiAgICB9LFxyXG4gICAgaXNTZWxlY3RNb2RlbDogZmFsc2UsLy/mmK/lkKbmmK/liJLor43ljLnphY3mqKHlvI9cclxuICAgIHNlbEFycjpbXSwvL+WIkuivjeaXtuiiq+mAieS4reeahOaVsOaNruS+i1xyXG4gICAgd2hvbGVBcnI6W10sLy/pgJrov4fpgInkuK3nmoTmlbDmja7kvovvvIznvJbor5Hlh7rnmoTmlbTmnaHmlbDmja7kvotcclxuICB9XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKXtcclxuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWVcclxuICAgIHRoaXMuZ2V0UnVsZSgpXHJcbiAgfVxyXG4gIHNob3dEcmF3ZXIgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBydWxlbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcnVsZW5hbWU6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJ1bGVkZXNDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHJ1bGVkZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNsb3NlID0gKCkgPT4ge1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgICAgcGF0dGVybjonJyxcclxuICAgICAgICByZXN1bHQ6ICcnLFxyXG4gICAgICAgIHJ1bGVuYW1lOiAnJyxcclxuICAgICAgICBydWxlZGVzOicnLFxyXG4gICAgICAgIGxhc3RPbmU6e30sXHJcbiAgICAgICAgaWQ6JydcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbWVzc2FnZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbWVzc2FnZTogZS50YXJnZXQudmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGF0dGVybkNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcGF0dGVybjogZS50YXJnZXQudmFsdWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgZG9BbmFseXNpcyA9ICgpPT57XHJcbiAgICBpZih0aGlzLnN0YXRlLm1lc3NhZ2UgIT09ICcnICYmIHRoaXMuc3RhdGUucGF0dGVybiAhPT0gJycpe1xyXG4gICAgICBjb25zdCB7IG1lc3NhZ2UsIHBhdHRlcm4gfSA9ICB0aGlzLnN0YXRlXHJcbiAgICAgIHd5QXhpb3NQb3N0KCdSdWxlL2dldE1zZ0J5R3Jvaycse21lc3NhZ2UsIHBhdHRlcm59LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHJlc3VsdDogcmVzcG9uc2VcclxuICAgICAgICAgIH0sKCk9PntcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgbGFzdE9uZToge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5zdGF0ZS5tZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogdGhpcy5zdGF0ZS5wYXR0ZXJuLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB0aGlzLnN0YXRlLnJlc3VsdCxcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1lbHNle1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+aKseatie+8jOaVsOaNruWunuS+i+WSjOino+aekOinhOWImeW/hemhu+Whq+WGmScpO1xyXG4gICAgfVxyXG4gIH1cclxuICBzaG93TW9kYWwgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBtb2RhbFZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDYW5jZWwgPSAoZSkgPT4ge1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbW9kYWxWaXNpYmxlOiBmYWxzZSxcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzTGVnYWwgPSAoKT0+e1xyXG4gICAgY29uc3Qge3BhdHRlcm4sbWVzc2FnZSxyZXN1bHR9ID0gdGhpcy5zdGF0ZVxyXG4gICAgbGV0IGlzTGVnYWwgPSB0cnVlXHJcbiAgICBpZihcclxuICAgICAgcGF0dGVybiA9PT0gdGhpcy5zdGF0ZS5sYXN0T25lLnBhdHRlcm4gJiZcclxuICAgICAgXy5pc0VxdWFsKG1lc3NhZ2UsIHRoaXMuc3RhdGUubGFzdE9uZS5tZXNzYWdlKSAmJlxyXG4gICAgICBfLmlzRXF1YWwocmVzdWx0LCB0aGlzLnN0YXRlLmxhc3RPbmUucmVzdWx0KVxyXG4gICAgKXtcclxuICAgICAgaWYocmVzdWx0ICE9PSAnJyl7XHJcbiAgICAgICAgaWYocmVzdWx0ICE9PSd7fScgJiYgcmVzdWx0ICE9PSdudWxsJyl7XHJcbiAgICAgICAgICAvL3RoaXMubW9kYWxTaG93KClcclxuICAgICAgICAgIGlzTGVnYWwgPSB0cnVlXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBpc0xlZ2FsID0gZmFsc2VcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZygn6KeE5YiZ5pyJ6K+vJylcclxuICAgICAgICB9XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGlzTGVnYWwgPSBmYWxzZVxyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+35YWI5aGr5YaZ6KeE5YiZJylcclxuICAgICAgfVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGlzTGVnYWwgPSBmYWxzZVxyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+S9oOi/mOacquaJp+ihjOino+aekO+8jOaIluiAheabtOaUueaVsOaNruWQjuacqumHjeaWsOino+aekCcpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzTGVnYWxcclxuICB9XHJcbiAgcmVhZHlTYXZlID0gKCk9PntcclxuICAgIGlmKHRoaXMuaXNMZWdhbCgpICYmIHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIG1vZGFsVmlzaWJsZTogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOinhOWImVxyXG4gIHNhdmVSdWxlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUucnVsZW5hbWUgIT09ICcnICYmIGZvck5hbWUudGVzdCh0aGlzLnN0YXRlLnJ1bGVuYW1lKSl7XHJcbiAgICAgIGNvbnN0IHtydWxlbmFtZSxydWxlZGVzLG1lc3NhZ2UscGF0dGVybixpZCxhcHBuYW1lfSA9IHRoaXMuc3RhdGVcclxuICAgICAgd3lBeGlvc1Bvc3QoJ1J1bGUvc2F2ZVJ1bGUnLHtydWxlbmFtZSxydWxlZGVzLG1lc3NhZ2UscGF0dGVybixpZCxhcHBuYW1lfSwocmVzdWx0KT0+e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICAgIGlmKHJlc3BvbnNlRGF0YS5zdGF0dXMgPT09IDEpe1xyXG4gICAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgICAgICB0aGlzLmhhbmRsZUNhbmNlbCgpXHJcbiAgICAgICAgICB0aGlzLm9uQ2xvc2UoKVxyXG4gICAgICAgICAgdGhpcy5nZXRSdWxlKClcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1lbHNle1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+inhOWImeWQjeensOacquWhq+WGmeaIluWhq+WGmeacieivrycpXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldFJ1bGUgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNTcGluaW5nOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICB3eUF4aW9zUG9zdCgnUnVsZS9nZXRSdWxlJyx7fSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGN1cnhEYXRhID0gXy5jbG9uZURlZXAocmVzcG9uc2VEYXRhLnh4eClcclxuICAgICAgY3VyeERhdGEucHVzaCh7XHJcbiAgICAgICAgdGl0bGU6ICfnvJbovpEnLFxyXG4gICAgICAgIGRhdGFJbmRleDogJ2VkaXQnLFxyXG4gICAgICAgIHJlbmRlcjogKHRleHQsIHJlY29yZCwgaW5kZXgpPT48c3BhbiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0UnVsZShyZWNvcmQuaWQpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1wZW5jaWwtc3F1YXJlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj5cclxuICAgICAgfSlcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHhEYXRhOiBjdXJ4RGF0YSxcclxuICAgICAgICAgIHlEYXRhOiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgICAgaXNTcGluaW5nOiBmYWxzZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIHBhZ2VTaXplQ2hhbmdlID0gKGN1cnJlbnQsIHNpemUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBwYWdlU2l6ZTogc2l6ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRSdWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1J1bGUvZ2V0UnVsZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgY29uc3Qge21lc3NhZ2UsIHBhdHRlcm4scnVsZW5hbWUscnVsZWRlcyxpZH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICBwYXR0ZXJuLFxyXG4gICAgICAgICAgcnVsZW5hbWUsXHJcbiAgICAgICAgICBydWxlZGVzLFxyXG4gICAgICAgICAgaWQsXHJcbiAgICAgICAgICBsYXN0T25lOntcclxuICAgICAgICAgICAgcGF0dGVybixcclxuICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgcmVzdWx0OicnXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgdGhpcy5zaG93RHJhd2VyKClcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+WIoOmZpFxyXG4gIGRlbFJ1bGUgPSAoKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1J1bGUvZGVsUnVsZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgIH0sKCk9PntcclxuICAgICAgICAgICAgdGhpcy5nZXRSdWxlKClcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgaGFuZGxlMk9rID0gZSA9PiB7XHJcbiAgICBpZih0aGlzLnN0YXRlLmN1clNuaXBwZXQubmFtZSA9PT0gJycpe1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+Wtl+auteWQjeS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgY29uc3Qgc2VsQXJyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5zZWxBcnIpXHJcbiAgICAgIGNvbnN0IGlzUmVuYW1lID0gc2VsQXJyLnNvbWUoaXRlbT0+e1xyXG4gICAgICAgIHJldHVybiBpdGVtLm5hbWUgPT09IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICAgIGlmKGlzUmVuYW1lKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcoJ+ivt+S4jeimgeeUqOmHjeWkjeWtl+auteWQjScpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIGNvbnN0IGN1ckFyciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuc2VsQXJyKVxyXG4gICAgICAgIGNvbnN0IG5ld0FyciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuY3VyU25pcHBldClcclxuICAgICAgICBjdXJBcnIucHVzaChuZXdBcnIpXHJcbiAgICAgICAgLy/lr7nmlbDnu4TmjpLluo9cclxuICAgICAgICBjb25zdCBoYWhhID0gXy5zb3J0QnkoY3VyQXJyLChpdGVtKT0+e1xyXG4gICAgICAgICAgcmV0dXJuIGl0ZW0uc3RhcnRcclxuICAgICAgICB9KVxyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2VsQXJyOiBfLmNsb25lRGVlcChoYWhhKVxyXG4gICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICBjb25zdCB3aG9sZUFyciA9IHRoaXMuY29tcGlsZUFycih0aGlzLnN0YXRlLnNlbEFycix0aGlzLnN0YXRlLm1lc3NhZ2UpXHJcbiAgICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICB3aG9sZUFyclxyXG4gICAgICAgICAgICAgIH0sKCk9PntcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlMkNhbmNlbCgpXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWcgPSBkZWNvZGVBcnIodGhpcy5zdGF0ZS53aG9sZUFyciwgdGhpcy5zdGF0ZS5tZXNzYWdlRm9yU2VsZWN0TW9kZWwpXHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiByZWdcclxuICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBoYW5kbGUyQ2FuY2VsID0gZSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBtb2RhbDJ2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBjdXJTbmlwcGV0OntcclxuICAgICAgICAgIGlkOicnLFxyXG4gICAgICAgICAgc3RhcnQ6JycsXHJcbiAgICAgICAgICBlbmQ6JycsXHJcbiAgICAgICAgICBzdHI6ICcnLFxyXG4gICAgICAgICAgbmFtZTonJ1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgY3VyU25pcHBldENoYW5nZSA9IChlKT0+e1xyXG4gICAgY29uc3QgY3VyID0gXy5jbG9uZURlZXAodGhpcy5zdGF0ZS5jdXJTbmlwcGV0KVxyXG4gICAgY29uc3QgY29tcGlsZUN1ciA9IE9iamVjdC5hc3NpZ24oe30sdGhpcy5zdGF0ZS5jdXJTbmlwcGV0LHtuYW1lOiBlLnRhcmdldC52YWx1ZX0pXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBjdXJTbmlwcGV0OiBfLmNsb25lRGVlcChjb21waWxlQ3VyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZWxlY3RXb3JkID0gKGV2ZW50KT0+e1xyXG4gICAgY29uc3QgZSA9IHdpbmRvdy5ldmVudCB8fCBldmVudFxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICBjb25zdCBjdXJNZXNzYWdlID0gdGhpcy5zdGF0ZS5tZXNzYWdlXHJcbiAgICBjb25zdCBzdGFydCA9IGUudGFyZ2V0LnNlbGVjdGlvblN0YXJ0XHJcbiAgICBjb25zdCBlbmQgPSBlLnRhcmdldC5zZWxlY3Rpb25FbmRcclxuICAgIC8v5Lqk5Y+J6YCJ5oup5Yik5patXHJcbiAgICBpZih0aGlzLmlzSW50ZXJzZWN0KHRoaXMuc3RhdGUuc2VsQXJyLHN0YXJ0LGVuZCkpe1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+mAieaLqeaXoOaViCzor7fpgb/lhY3kuqTlj4npgInmi6knKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IGN1ck1lc3NhZ2Uuc2xpY2Uoc3RhcnQsIGVuZClcclxuICAgIGNvbnN0IG5vdHJpbSA9IF8udHJpbShzZWxlY3RlZFRleHQpXHJcbiAgICBjb25zdCByYW5kb21Db3VudCA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICBjb25zdCBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICBjb25zdCBhc0lkID0gcGFyc2VJbnQocmFuZG9tQ291bnQsMTApICsgcGFyc2VJbnQoY3VyVGltZSwxMCkqMTAwXHJcbiAgICBjb25zdCBpZCA9IGFzSWQudG9TdHJpbmcoKVxyXG4gICAgaWYoKHNlbGVjdGVkVGV4dC5sZW5ndGg+MCAmJiBub3RyaW0ubGVuZ3RoID09PSAwKSB8fCBzZWxlY3RlZFRleHQubGVuZ3RoID09PSAwIHx8IHNlbGVjdGVkVGV4dCA9PT0gJycpe1xyXG4gICAgICBtZXNzYWdlLndhcm5pbmcoJ+ivt+S4jeimgemAieaLqeepuuWtl+espicpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgaWYoc2VsZWN0ZWRUZXh0ID09PSB0aGlzLnN0YXRlLm1lc3NhZ2Upe1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGN1clNuaXBwZXQ6e1xyXG4gICAgICAgICAgaWQsXHJcbiAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgIGVuZCxcclxuICAgICAgICAgIHN0cjogc2VsZWN0ZWRUZXh0LFxyXG4gICAgICAgICAgbmFtZTonJyxcclxuICAgICAgICAgIHNlbGVjdGVkOiB0cnVlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb2RhbDJ2aXNpYmxlOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGlzU2VsZWN0TW9kZWxDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU2VsZWN0TW9kZWw6IGUudGFyZ2V0LmNoZWNrZWQsXHJcbiAgICAgICAgbWVzc2FnZUZvclNlbGVjdE1vZGVsOiBlLnRhcmdldC5jaGVja2VkP3RoaXMuc3RhdGUubWVzc2FnZTonJyxcclxuICAgICAgICBzZWxBcnI6W10sXHJcbiAgICAgICAgd2hvbGVBcnI6W10sXHJcbiAgICAgICAgY3VycnVsZTonJyxcclxuICAgICAgICBwYXR0ZXJuOicnLFxyXG4gICAgICAgIHJlc3VsdDonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+WwhumAieS4reWtl+espuS4suaVsOe7hOS4reaPkuWFpeacqumAieS4reWtl+espuS4suaVsOe7hFxyXG4gIGNvbXBpbGVBcnIgPSAoYXJyLHN0cik9PntcclxuICAgIGNvbnN0IHJlc29sdmVBcnIgPSBbXVxyXG4gICAgaWYoYXJyICYmIGFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGFyci5tYXAoKGl0ZW0saW5kZXgpPT57XHJcbiAgICAgICAgaWYoaW5kZXggPT09IGFyci5sZW5ndGgtMSl7XHJcbiAgICAgICAgICBpZihpbmRleD09PTAgJiYgaXRlbS5zdGFydCAhPT0gMCl7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkIC0gMVxyXG4gICAgICAgICAgICBub1NlbGVjdC5pZCA9IGlkXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSAwXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IGFycltpbmRleF0uc3RhcnRcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICAgIHJlc29sdmVBcnIucHVzaChub1NlbGVjdClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmVBcnIucHVzaChpdGVtKVxyXG4gICAgICAgICAgY29uc3Qgbm9TZWxlY3QgPSB7fVxyXG4gICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgYXNJZCA9IHBhcnNlSW50KHJhbmRvbUNvdW50LDEwKSArIHBhcnNlSW50KGN1clRpbWUsMTApKjEwMFxyXG4gICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkICsgMVxyXG4gICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgbm9TZWxlY3Quc2VsZWN0ZWQgPSBmYWxzZVxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSBpdGVtLmVuZFxyXG4gICAgICAgICAgbm9TZWxlY3QuZW5kID0gc3RyLmxlbmd0aFxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBpZihpbmRleD09PTAgJiYgaXRlbS5zdGFydCAhPT0gMCl7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBjdXJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkIC0gMVxyXG4gICAgICAgICAgICBub1NlbGVjdC5pZCA9IGlkXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSAwXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IGFycltpbmRleF0uc3RhcnRcclxuICAgICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICAgIHJlc29sdmVBcnIucHVzaChub1NlbGVjdClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmVBcnIucHVzaChpdGVtKVxyXG4gICAgICAgICAgY29uc3Qgbm9TZWxlY3QgPSB7fVxyXG4gICAgICAgICAgLy8gY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgLy8gY29uc3QgYXNJZCA9IHBhcnNlSW50KHJhbmRvbUNvdW50LDEwKSArIHBhcnNlSW50KGN1clRpbWUsMTApKjEwMFxyXG4gICAgICAgICAgY29uc3QgaWQgPSBhcnJbaW5kZXhdLmlkICsgMVxyXG4gICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgbm9TZWxlY3Quc2VsZWN0ZWQgPSBmYWxzZVxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RhcnQgPSBpdGVtLmVuZFxyXG4gICAgICAgICAgbm9TZWxlY3QuZW5kID0gYXJyW2luZGV4KzFdLnN0YXJ0XHJcbiAgICAgICAgICBub1NlbGVjdC5zdHIgPSBzdHIuc2xpY2Uobm9TZWxlY3Quc3RhcnQsIG5vU2VsZWN0LmVuZClcclxuICAgICAgICAgIHJlc29sdmVBcnIucHVzaChub1NlbGVjdClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFyclxyXG4gIH1cclxuICAvL+S6pOWPiemAieaLqeWIpOaWrVxyXG4gIGlzSW50ZXJzZWN0ID0gKGFycixzdGFydCxlbmQpPT57XHJcbiAgICBsZXQgaXNJbiA9IGZhbHNlXHJcbiAgICBpZihhcnIgJiYgYXJyLmxlbmd0aD4wKXtcclxuICAgICAgaXNJbiA9IGFyci5zb21lKGl0ZW09PntcclxuICAgICAgICBjb25zdCBpc3RhcnQgPSBpdGVtLnN0YXJ0XHJcbiAgICAgICAgY29uc3QgaWVuZCA9IGl0ZW0uZW5kXHJcbiAgICAgICAgcmV0dXJuICgoaXN0YXJ0PHN0YXJ0IHx8IGlzdGFydCA9PSBzdGFydCkgJiYgKHN0YXJ0PGllbmQpKSB8fCAoKGlzdGFydDxlbmQpICYmIChlbmQ8aWVuZCB8fCBlbmQgPT0gaWVuZCkpXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNJblxyXG4gIH1cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gZmFsc2VcclxuICB9XHJcbiAgcmVuZGVyKCl7XHJcbiAgICBjb25zdCBzZWxlY3RlZFJvd0tleXMgPSB0aGlzLnN0YXRlLmlkc1xyXG4gICAgY29uc3Qgcm93U2VsZWN0aW9uID0ge1xyXG4gICAgICBzZWxlY3RlZFJvd0tleXMsXHJcbiAgICAgIG9uQ2hhbmdlOiAoc2VsZWN0ZWRSb3dLZXlzKSA9PiB7XHJcbiAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBpZHM6IHNlbGVjdGVkUm93S2V5c1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBzdHIgPSAnJ1xyXG4gICAgaWYodGhpcy5zdGF0ZS5yZXN1bHQpe1xyXG4gICAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKHRoaXMuc3RhdGUucmVzdWx0KSwgbnVsbCwgNClcclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxSdWxlOigpPT57fX0gb2tUZXh0PVwi56Gu5a6aXCIgY2FuY2VsVGV4dD1cIuWPlua2iFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gc3R5bGU9e3ttYXJnaW5MZWZ0OiBcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtbWludXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT17e21hcmdpbkxlZnQ6XCI1cHhcIn19PuWIoOmZpDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPC9Qb3Bjb25maXJtPlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZ1RvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxXeVNwaW4gaXNTcGluaW5nPXt0aGlzLnN0YXRlLmlzU3BpbmluZ30+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8V3lUYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VTaXplPXt0aGlzLnN0YXRlLnBhZ2VTaXplfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uU2hvd1NpemVDaGFuZ2U9e3RoaXMucGFnZVNpemVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U2VsZWN0aW9uPXtyb3dTZWxlY3Rpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeERhdGE9e3RoaXMuc3RhdGUueERhdGE/dGhpcy5zdGF0ZS54RGF0YTpbXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB5RGF0YT17dGhpcy5zdGF0ZS55RGF0YT90aGlzLnN0YXRlLnlEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvV3lTcGluPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgPC9BbW9kdWxlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxEcmF3ZXJcclxuICAgICAgICAgIHRpdGxlPVwi5pWw5o2u5rqQ6YWN572uXCJcclxuICAgICAgICAgIHBsYWNlbWVudD1cInJpZ2h0XCJcclxuICAgICAgICAgIG9uQ2xvc2U9e3RoaXMub25DbG9zZX1cclxuICAgICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUudmlzaWJsZX1cclxuICAgICAgICAgIHdpZHRoPXtcIjgwJVwifVxyXG4gICAgICAgID5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAvLyA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAvLyAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19PuaVsOaNruWunuS+izogPC9zcGFuPjxUZXh0QXJlYSBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19IHZhbHVlPXt0aGlzLnN0YXRlLm1lc3NhZ2V9IG9uQ2hhbmdlPXt0aGlzLm1lc3NhZ2VDaGFuZ2V9IGNzcz17e3dpZHRoOlwiODAlXCJ9fSAvPlxyXG4gICAgICAgICAgLy8gPC9kaXY+XHJcbiAgICAgICAgICAvLyA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAvLyAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19Pkdyb2vop6PmnpA6IDwvc3Bhbj48VGV4dEFyZWEgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fSB2YWx1ZT17dGhpcy5zdGF0ZS5wYXR0ZXJufSBvbkNoYW5nZT17dGhpcy5wYXR0ZXJuQ2hhbmdlfSAgY3NzPXt7d2lkdGg6XCI4MCVcIn19IC8+XHJcbiAgICAgICAgICAvLyA8L2Rpdj5cclxuICAgICAgICAgIC8vIDxkaXYgY3NzPXt7cGFkZGluZzogXCIyMHB4XCJ9fT5cclxuICAgICAgICAgIC8vICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmRvQW5hbHlzaXN9Puino+aekDwvQnV0dG9uPlxyXG4gICAgICAgICAgLy8gPC9kaXY+XHJcbiAgICAgICAgICAvLyA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAvLyAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19Puino+aekOe7k+aenO+8mjwvc3Bhbj48c3BhbiBjc3M9e3tvdmVyZmxvdzpcImF1dG9cIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsd2lkdGg6IFwiODAlXCIsbWluSGVpZ2h0OlwiMjAwcHhcIixib3JkZXI6XCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgc29saWQgMXB4XCJ9fT5cclxuICAgICAgICAgIC8vICAgICA8cHJlPntzdHJ9PC9wcmU+XHJcbiAgICAgICAgICAvLyAgIDwvc3Bhbj5cclxuICAgICAgICAgIC8vIDwvZGl2PlxyXG4gICAgICAgICAgLy8gPEJ1dHRvbiAgdHlwZT1cInByaW1hcnlcIiBvbkNsaWNrPXt0aGlzLnJlYWR5U2F2ZX0gPuS/neWtmEdyb2vop6PmnpA8L0J1dHRvbj5cclxuICAgICAgICB9XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19PuaVsOaNruWunuS+izogPC9zcGFuPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc1NlbGVjdE1vZGVsID9cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6XCI1cHggMCAwIDEwcHhcIix3aWR0aDpcIjgwJVwiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIixib3JkZXI6XCIjMjJjOTYwIHNvbGlkIDFweFwiLHBvc2l0aW9uOlwicmVsYXRpdmVcIixtaW5IZWlnaHQ6XCI1MHB4XCIsYm9yZGVyUmFkaXVzOlwiNXB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNzcz17e3dvcmRXcmFwOlwiYnJlYWstd29yZFwifX0+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLndob2xlQXJyLmxlbmd0aD4wP1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUud2hvbGVBcnIubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxzcGFuIHN0eWxlPXt7IGJhY2tncm91bmQ6aXRlbS5zZWxlY3RlZD8ncmdiYSgyMDQsMjU1LDAsMC44KSc6J25vbmUnfX0ga2V5PXtpdGVtLmlkfT57aXRlbS5zdHJ9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUubWVzc2FnZUZvclNlbGVjdE1vZGVsXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxUZXh0QXJlYVxyXG4gICAgICAgICAgICAgICAgICBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19XHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm1lc3NhZ2VGb3JTZWxlY3RNb2RlbH1cclxuICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9e3RoaXMuc2VsZWN0V29yZH1cclxuICAgICAgICAgICAgICAgICAgY3NzPXt7Ym9yZGVyOiBcIm5vbmVcIixwb3NpdGlvbjpcImFic29sdXRlXCIsbGVmdDpcIjBweFwiLHRvcDpcIjBweFwiLGJhY2tncm91bmQ6XCJub25lXCIsY29sb3I6XCJyZ2JhKDEyMywxMTEsMjU1LDAuNSlcIn19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgPFRleHRBcmVhXHJcbiAgICAgICAgICAgICAgICBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMubWVzc2FnZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgIGNzcz17e3dpZHRoOlwiODAlXCJ9fVxyXG4gICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nTGVmdDpcIjEwMHB4XCJ9fT5cclxuICAgICAgICAgICAgPHNwYW4+PENoZWNrYm94IG9uQ2hhbmdlPXt0aGlzLmlzU2VsZWN0TW9kZWxDaGFuZ2V9IGNoZWNrZWQ9e3RoaXMuc3RhdGUuaXNTZWxlY3RNb2RlbH0+5YiS6K+N5Yy56YWNPC9DaGVja2JveD48L3NwYW4+XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLndob2xlQXJyLmxlbmd0aD4wP1xyXG4gICAgICAgICAgICAgIDxzcGFuPjxCdXR0b24gb25DbGljaz17dGhpcy5jbGVhckRhdGF9IHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+6YeN5paw6YCJ5oupPC9CdXR0b24+PC9zcGFuPlxyXG4gICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZzogXCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7dmVydGljYWxBbGlnbjpcInRvcFwifX0+R3Jva+ino+aekDogPC9zcGFuPjxUZXh0QXJlYSBhdXRvc2l6ZT17eyBtaW5Sb3dzOiAyLCBtYXhSb3dzOiA2IH19IHZhbHVlPXt0aGlzLnN0YXRlLnBhdHRlcm59IG9uQ2hhbmdlPXt0aGlzLnBhdHRlcm5DaGFuZ2V9ICBjc3M9e3t3aWR0aDpcIjgwJVwifX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuZG9BbmFseXNpc30+6Kej5p6QPC9CdXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZzogXCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgPHNwYW4gY3NzPXt7dmVydGljYWxBbGlnbjpcInRvcFwifX0+6Kej5p6Q57uT5p6c77yaPC9zcGFuPjxzcGFuIGNzcz17e292ZXJmbG93OlwiYXV0b1wiLGRpc3BsYXk6XCJpbmxpbmUtYmxvY2tcIix3aWR0aDogXCI4MCVcIixtaW5IZWlnaHQ6XCIyMDBweFwiLGJvcmRlcjpcInJnYmEoMjU1LDI1NSwyNTUsMC4yKSBzb2xpZCAxcHhcIn19PlxyXG4gICAgICAgICAgICAgIDxwcmU+e1xyXG4gICAgICAgICAgICAgICAgc3RyXHJcbiAgICAgICAgICAgICAgfTwvcHJlPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxCdXR0b24gIHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5yZWFkeVNhdmV9ID7kv53lrZhHcm9r6Kej5p6Q6KeE5YiZPC9CdXR0b24+XHJcbiAgICAgICAgPC9EcmF3ZXI+XHJcbiAgICAgICAgPE1vZGFsXHJcbiAgICAgICAgICB0aXRsZT1cIuWtl+auteaPkOWPllwiXHJcbiAgICAgICAgICB2aXNpYmxlPXt0aGlzLnN0YXRlLm1vZGFsMnZpc2libGV9XHJcbiAgICAgICAgICBvbk9rPXt0aGlzLmhhbmRsZTJPa31cclxuICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLmhhbmRsZTJDYW5jZWx9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPHA+5a2X5q615ZCN77yaPElucHV0XHJcbiAgICAgICAgICAgIGNzcz17e3dpZHRoOlwiODAlXCJ9fVxyXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5jdXJTbmlwcGV0Lm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmN1clNuaXBwZXRDaGFuZ2V9XHJcbiAgICAgICAgICAvPjwvcD5cclxuICAgICAgICAgIDxwPuWMuemFjeWvueixoe+8mnt0aGlzLnN0YXRlLmN1clNuaXBwZXQuc3RyfTwvcD5cclxuICAgICAgICA8L01vZGFsPlxyXG4gICAgICAgIDxNb2RhbFxyXG4gICAgICAgICAgdGl0bGU9XCLkuLrop4TliJnlkb3lkI1cIlxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5tb2RhbFZpc2libGV9XHJcbiAgICAgICAgICBvbk9rPXt0aGlzLnNhdmVSdWxlfVxyXG4gICAgICAgICAgb25DYW5jZWw9e3RoaXMuaGFuZGxlQ2FuY2VsfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwifX0+6KeE5YiZ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT48SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUucnVsZW5hbWV9IG9uQ2hhbmdlPXt0aGlzLnJ1bGVuYW1lQ2hhbmdlfS8+PC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwifX0+6KeE5YiZ5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT48VGV4dEFyZWEgdmFsdWU9e3RoaXMuc3RhdGUucnVsZWRlc30gb25DaGFuZ2U9e3RoaXMucnVsZWRlc0NoYW5nZX0vPjwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9Nb2RhbD5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWFuYWdlXHJcbiJdfQ== */\"\n};\n\nvar _ref4 = process.env.NODE_ENV === \"production\" ? {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\"\n} : {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"12nvjrx-Manage\",\n  styles: \"vertical-align:top;label:Manage;\"\n} : {\n  name: \"12nvjrx-Manage\",\n  styles: \"vertical-align:top;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref6 = process.env.NODE_ENV === \"production\" ? {\n  name: \"pj9luj-Manage\",\n  styles: \"padding:5px 0 0 10px;width:80%;display:inline-block;border:#22c960 solid 1px;position:relative;min-height:50px;border-radius:5px;label:Manage;\"\n} : {\n  name: \"pj9luj-Manage\",\n  styles: \"padding:5px 0 0 10px;width:80%;display:inline-block;border:#22c960 solid 1px;position:relative;min-height:50px;border-radius:5px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref7 = process.env.NODE_ENV === \"production\" ? {\n  name: \"hv6ur5-Manage\",\n  styles: \"word-wrap:break-word;label:Manage;\"\n} : {\n  name: \"hv6ur5-Manage\",\n  styles: \"word-wrap:break-word;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref8 = process.env.NODE_ENV === \"production\" ? {\n  name: \"vztlt3-Manage\",\n  styles: \"border:none;position:absolute;left:0px;top:0px;background:none;color:rgba(123,111,255,0.5);label:Manage;\"\n} : {\n  name: \"vztlt3-Manage\",\n  styles: \"border:none;position:absolute;left:0px;top:0px;background:none;color:rgba(123,111,255,0.5);label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref9 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1jvh7rp-Manage\",\n  styles: \"width:80%;label:Manage;\"\n} : {\n  name: \"1jvh7rp-Manage\",\n  styles: \"width:80%;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref10 = process.env.NODE_ENV === \"production\" ? {\n  name: \"rz5scy-Manage\",\n  styles: \"padding-left:100px;label:Manage;\"\n} : {\n  name: \"rz5scy-Manage\",\n  styles: \"padding-left:100px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref11 = process.env.NODE_ENV === \"production\" ? {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\"\n} : {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref12 = process.env.NODE_ENV === \"production\" ? {\n  name: \"12nvjrx-Manage\",\n  styles: \"vertical-align:top;label:Manage;\"\n} : {\n  name: \"12nvjrx-Manage\",\n  styles: \"vertical-align:top;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbVJ1bGUvTWFuYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdrQmtCIiwiZmlsZSI6Ii9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbVJ1bGUvTWFuYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXHJcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSdcclxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBJbnB1dCwgQnV0dG9uLCBEcmF3ZXIsIFJvdywgQ29sLCBtZXNzYWdlLCBNb2RhbCxQb3Bjb25maXJtLCBDaGVja2JveCwgU2VsZWN0IH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5pbXBvcnQgSlNPTkZvcm1hdHRlciBmcm9tICdqc29uLWZvcm1hdHRlci1qcydcclxuXHJcblxyXG5pbXBvcnQgeyBBbW9kdWxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy9BbW9kdWxlJ1xyXG5pbXBvcnQgIFd5VGFibGUgIGZyb20gJy4uL2NvbXBvbmVudHMvV3lUYWJsZSdcclxuaW1wb3J0IHsgd3lBeGlvc1Bvc3R9IGZyb20gJy4uL2NvbXBvbmVudHMvV3lBeGlvcydcclxuaW1wb3J0IFd5U3BpbiBmcm9tICcuLi9jb21wb25lbnRzL1d5U3BpbidcclxuaW1wb3J0IHsgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5pbXBvcnQgZGVjb2RlQXJyIGZyb20gJy4vZGVjb2RlQXJyJ1xyXG5jb25zdCBUZXh0QXJlYSA9IElucHV0LlRleHRBcmVhXHJcbmNvbnN0IHsgT3B0aW9uIH0gPSBTZWxlY3RcclxuY2xhc3MgTWFuYWdlIGV4dGVuZHMgQ29tcG9uZW50e1xyXG4gIHN0YXRlID0ge1xyXG4gICAgbWVzc2FnZTogJycsXHJcbiAgICBtZXNzYWdlRm9yU2VsZWN0TW9kZWw6JycsIC8v5YiS6K+N5pe25YCZ55qE5pel5b+X5qC35L6LXHJcbiAgICBwYXR0ZXJuOicnLFxyXG4gICAgcmVzdWx0OiAnJyxcclxuICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgbW9kYWxWaXNpYmxlOiBmYWxzZSxcclxuICAgIHJ1bGVuYW1lOiAnJyxcclxuICAgIHJ1bGVkZXM6JycsXHJcbiAgICBsYXN0T25lOiB7ICAgLy/mnIDov5HkuIDmrKHmiafooYzop6PmnpDkuYvlkI7nmoTkuInkuKrph4/nmoTlgLxcclxuICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgIHBhdHRlcm46ICcnLFxyXG4gICAgICByZXN1bHQ6ICcnLFxyXG4gICAgfSxcclxuXHJcbiAgICBwYWdlU2l6ZTo1LFxyXG4gICAgaXNTcGluaW5nOiBmYWxzZSxcclxuICAgIGlkczpbXSxcclxuICAgIHhEYXRhOiBbXSxcclxuICAgIHlEYXRhOiBbXSxcclxuICAgIGlkOicnLFxyXG5cclxuICAgIG1vZGFsMnZpc2libGU6IGZhbHNlLFxyXG4gICAgY3VyU25pcHBldDp7IC8v5pyA6L+R5LiA5qyh6YCJ5Lit55qE5pWw5o2u5L6L55qE5ZCE5Liq5bGe5oCn5L+h5oGvXHJcbiAgICAgIGlkOicnLFxyXG4gICAgICBzdGFydDonJyxcclxuICAgICAgZW5kOicnLFxyXG4gICAgICBzdHI6ICcnLFxyXG4gICAgICBuYW1lOicnLFxyXG4gICAgICBzZWxlY3RlZDonJ1xyXG4gICAgfSxcclxuICAgIGlzU2VsZWN0TW9kZWw6IGZhbHNlLC8v5piv5ZCm5piv5YiS6K+N5Yy56YWN5qih5byPXHJcbiAgICBzZWxBcnI6W10sLy/liJLor43ml7booqvpgInkuK3nmoTmlbDmja7kvotcclxuICAgIHdob2xlQXJyOltdLC8v6YCa6L+H6YCJ5Lit55qE5pWw5o2u5L6L77yM57yW6K+R5Ye655qE5pW05p2h5pWw5o2u5L6LXHJcbiAgfVxyXG4gIGNvbXBvbmVudERpZE1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlXHJcbiAgICB0aGlzLmdldFJ1bGUoKVxyXG4gIH1cclxuICBzaG93RHJhd2VyID0gKCkgPT4ge1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcnVsZW5hbWVDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHJ1bGVuYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBydWxlZGVzQ2hhbmdlID0gKGUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBydWxlZGVzOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25DbG9zZSA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICAgIHBhdHRlcm46JycsXHJcbiAgICAgICAgcmVzdWx0OiAnJyxcclxuICAgICAgICBydWxlbmFtZTogJycsXHJcbiAgICAgICAgcnVsZWRlczonJyxcclxuICAgICAgICBsYXN0T25lOnt9LFxyXG4gICAgICAgIGlkOicnXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG1lc3NhZ2VDaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIG1lc3NhZ2U6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIHBhdHRlcm5DaGFuZ2UgPSAoZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhdHRlcm46IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQW5hbHlzaXMgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5zdGF0ZS5tZXNzYWdlICE9PSAnJyAmJiB0aGlzLnN0YXRlLnBhdHRlcm4gIT09ICcnKXtcclxuICAgICAgY29uc3QgeyBtZXNzYWdlLCBwYXR0ZXJuIH0gPSAgdGhpcy5zdGF0ZVxyXG4gICAgICB3eUF4aW9zUG9zdCgnUnVsZS9nZXRNc2dCeUdyb2snLHttZXNzYWdlLCBwYXR0ZXJufSwocmVzdWx0KT0+e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICByZXN1bHQ6IHJlc3BvbnNlXHJcbiAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGxhc3RPbmU6IHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMuc3RhdGUubWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IHRoaXMuc3RhdGUucGF0dGVybixcclxuICAgICAgICAgICAgICAgIHJlc3VsdDogdGhpcy5zdGF0ZS5yZXN1bHQsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfmirHmrYnvvIzmlbDmja7lrp7kvovlkozop6PmnpDop4TliJnlv4XpobvloavlhpknKTtcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd01vZGFsID0gKCkgPT4ge1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbW9kYWxWaXNpYmxlOiB0cnVlLFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlQ2FuY2VsID0gKGUpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIG1vZGFsVmlzaWJsZTogZmFsc2UsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0xlZ2FsID0gKCk9PntcclxuICAgIGNvbnN0IHtwYXR0ZXJuLG1lc3NhZ2UscmVzdWx0fSA9IHRoaXMuc3RhdGVcclxuICAgIGxldCBpc0xlZ2FsID0gdHJ1ZVxyXG4gICAgaWYoXHJcbiAgICAgIHBhdHRlcm4gPT09IHRoaXMuc3RhdGUubGFzdE9uZS5wYXR0ZXJuICYmXHJcbiAgICAgIF8uaXNFcXVhbChtZXNzYWdlLCB0aGlzLnN0YXRlLmxhc3RPbmUubWVzc2FnZSkgJiZcclxuICAgICAgXy5pc0VxdWFsKHJlc3VsdCwgdGhpcy5zdGF0ZS5sYXN0T25lLnJlc3VsdClcclxuICAgICl7XHJcbiAgICAgIGlmKHJlc3VsdCAhPT0gJycpe1xyXG4gICAgICAgIGlmKHJlc3VsdCAhPT0ne30nICYmIHJlc3VsdCAhPT0nbnVsbCcpe1xyXG4gICAgICAgICAgLy90aGlzLm1vZGFsU2hvdygpXHJcbiAgICAgICAgICBpc0xlZ2FsID0gdHJ1ZVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgaXNMZWdhbCA9IGZhbHNlXHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcoJ+inhOWImeacieivrycpXHJcbiAgICAgICAgfVxyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBpc0xlZ2FsID0gZmFsc2VcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcoJ+ivt+WFiOWhq+WGmeinhOWImScpXHJcbiAgICAgIH1cclxuICAgIH1lbHNle1xyXG4gICAgICBpc0xlZ2FsID0gZmFsc2VcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfkvaDov5jmnKrmiafooYzop6PmnpDvvIzmiJbogIXmm7TmlLnmlbDmja7lkI7mnKrph43mlrDop6PmnpAnKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc0xlZ2FsXHJcbiAgfVxyXG4gIHJlYWR5U2F2ZSA9ICgpPT57XHJcbiAgICBpZih0aGlzLmlzTGVnYWwoKSAmJiB0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBtb2RhbFZpc2libGU6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/kv53lrZjop4TliJlcclxuICBzYXZlUnVsZSA9ICgpPT57XHJcbiAgICBpZih0aGlzLnN0YXRlLnJ1bGVuYW1lICE9PSAnJyAmJiBmb3JOYW1lLnRlc3QodGhpcy5zdGF0ZS5ydWxlbmFtZSkpe1xyXG4gICAgICBjb25zdCB7cnVsZW5hbWUscnVsZWRlcyxtZXNzYWdlLHBhdHRlcm4saWQsYXBwbmFtZX0gPSB0aGlzLnN0YXRlXHJcbiAgICAgIHd5QXhpb3NQb3N0KCdSdWxlL3NhdmVSdWxlJyx7cnVsZW5hbWUscnVsZWRlcyxtZXNzYWdlLHBhdHRlcm4saWQsYXBwbmFtZX0sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgdGhpcy5oYW5kbGVDYW5jZWwoKVxyXG4gICAgICAgICAgdGhpcy5vbkNsb3NlKClcclxuICAgICAgICAgIHRoaXMuZ2V0UnVsZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfop4TliJnlkI3np7DmnKrloavlhpnmiJbloavlhpnmnInor68nKVxyXG4gICAgfVxyXG4gIH1cclxuICBnZXRSdWxlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1J1bGUvZ2V0UnVsZScse30sKHJlc3VsdCk9PntcclxuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgIGxldCBjdXJ4RGF0YSA9IF8uY2xvbmVEZWVwKHJlc3BvbnNlRGF0YS54eHgpXHJcbiAgICAgIGN1cnhEYXRhLnB1c2goe1xyXG4gICAgICAgIHRpdGxlOiAn57yW6L6RJyxcclxuICAgICAgICBkYXRhSW5kZXg6ICdlZGl0JyxcclxuICAgICAgICByZW5kZXI6ICh0ZXh0LCByZWNvcmQsIGluZGV4KT0+PHNwYW4gc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwifX0gb25DbGljaz17KCk9PnRoaXMuZWRpdFJ1bGUocmVjb3JkLmlkKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L3NwYW4+XHJcbiAgICAgIH0pXHJcbiAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICB4RGF0YTogY3VyeERhdGEsXHJcbiAgICAgICAgICB5RGF0YTogcmVzcG9uc2VEYXRhLnl5eSxcclxuICAgICAgICAgIGlzU3BpbmluZzogZmFsc2VcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICBwYWdlU2l6ZUNoYW5nZSA9IChjdXJyZW50LCBzaXplKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgcGFnZVNpemU6IHNpemVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/nvJbovpFcclxuICBlZGl0UnVsZSA9IChpZCk9PntcclxuICAgIHd5QXhpb3NQb3N0KCdSdWxlL2dldFJ1bGUnLHtpZH0sKHJlc3VsdCk9PntcclxuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgIGNvbnN0IHttZXNzYWdlLCBwYXR0ZXJuLHJ1bGVuYW1lLHJ1bGVkZXMsaWR9ID0gcmVzcG9uc2VEYXRhXHJcbiAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgcGF0dGVybixcclxuICAgICAgICAgIHJ1bGVuYW1lLFxyXG4gICAgICAgICAgcnVsZWRlcyxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgbGFzdE9uZTp7XHJcbiAgICAgICAgICAgIHBhdHRlcm4sXHJcbiAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHJlc3VsdDonJ1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sKCk9PntcclxuICAgICAgICAgIHRoaXMuc2hvd0RyYXdlcigpXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/liKDpmaRcclxuICBkZWxSdWxlID0gKCk9PntcclxuICAgIHd5QXhpb3NQb3N0KCdSdWxlL2RlbFJ1bGUnLHtpZHM6IHRoaXMuc3RhdGUuaWRzfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBpZHM6IFtdXHJcbiAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0UnVsZSgpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGhhbmRsZTJPayA9IGUgPT4ge1xyXG4gICAgaWYodGhpcy5zdGF0ZS5jdXJTbmlwcGV0Lm5hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCflrZfmrrXlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IHNlbEFyciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuc2VsQXJyKVxyXG4gICAgICBjb25zdCBpc1JlbmFtZSA9IHNlbEFyci5zb21lKGl0ZW09PntcclxuICAgICAgICByZXR1cm4gaXRlbS5uYW1lID09PSBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgICBpZihpc1JlbmFtZSl7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKCfor7fkuI3opoHnlKjph43lpI3lrZfmrrXlkI0nKVxyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICBjb25zdCBjdXJBcnIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLnNlbEFycilcclxuICAgICAgICBjb25zdCBuZXdBcnIgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmN1clNuaXBwZXQpXHJcbiAgICAgICAgY3VyQXJyLnB1c2gobmV3QXJyKVxyXG4gICAgICAgIC8v5a+55pWw57uE5o6S5bqPXHJcbiAgICAgICAgY29uc3QgaGFoYSA9IF8uc29ydEJ5KGN1ckFyciwoaXRlbSk9PntcclxuICAgICAgICAgIHJldHVybiBpdGVtLnN0YXJ0XHJcbiAgICAgICAgfSlcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHNlbEFycjogXy5jbG9uZURlZXAoaGFoYSlcclxuICAgICAgICAgIH0sKCk9PntcclxuICAgICAgICAgICAgY29uc3Qgd2hvbGVBcnIgPSB0aGlzLmNvbXBpbGVBcnIodGhpcy5zdGF0ZS5zZWxBcnIsdGhpcy5zdGF0ZS5tZXNzYWdlKVxyXG4gICAgICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgd2hvbGVBcnJcclxuICAgICAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZTJDYW5jZWwoKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnID0gZGVjb2RlQXJyKHRoaXMuc3RhdGUud2hvbGVBcnIsIHRoaXMuc3RhdGUubWVzc2FnZUZvclNlbGVjdE1vZGVsKVxyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogcmVnXHJcbiAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgaGFuZGxlMkNhbmNlbCA9IGUgPT4ge1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbW9kYWwydmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgY3VyU25pcHBldDp7XHJcbiAgICAgICAgICBpZDonJyxcclxuICAgICAgICAgIHN0YXJ0OicnLFxyXG4gICAgICAgICAgZW5kOicnLFxyXG4gICAgICAgICAgc3RyOiAnJyxcclxuICAgICAgICAgIG5hbWU6JydcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGN1clNuaXBwZXRDaGFuZ2UgPSAoZSk9PntcclxuICAgIGNvbnN0IGN1ciA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUuY3VyU25pcHBldClcclxuICAgIGNvbnN0IGNvbXBpbGVDdXIgPSBPYmplY3QuYXNzaWduKHt9LHRoaXMuc3RhdGUuY3VyU25pcHBldCx7bmFtZTogZS50YXJnZXQudmFsdWV9KVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY3VyU25pcHBldDogXy5jbG9uZURlZXAoY29tcGlsZUN1cilcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2VsZWN0V29yZCA9IChldmVudCk9PntcclxuICAgIGNvbnN0IGUgPSB3aW5kb3cuZXZlbnQgfHwgZXZlbnRcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKVxyXG4gICAgY29uc3QgY3VyTWVzc2FnZSA9IHRoaXMuc3RhdGUubWVzc2FnZVxyXG4gICAgY29uc3Qgc3RhcnQgPSBlLnRhcmdldC5zZWxlY3Rpb25TdGFydFxyXG4gICAgY29uc3QgZW5kID0gZS50YXJnZXQuc2VsZWN0aW9uRW5kXHJcbiAgICAvL+S6pOWPiemAieaLqeWIpOaWrVxyXG4gICAgaWYodGhpcy5pc0ludGVyc2VjdCh0aGlzLnN0YXRlLnNlbEFycixzdGFydCxlbmQpKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfpgInmi6nml6DmlYgs6K+36YG/5YWN5Lqk5Y+J6YCJ5oupJylcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBjdXJNZXNzYWdlLnNsaWNlKHN0YXJ0LCBlbmQpXHJcbiAgICBjb25zdCBub3RyaW0gPSBfLnRyaW0oc2VsZWN0ZWRUZXh0KVxyXG4gICAgY29uc3QgcmFuZG9tQ291bnQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgY29uc3QgYXNJZCA9IHBhcnNlSW50KHJhbmRvbUNvdW50LDEwKSArIHBhcnNlSW50KGN1clRpbWUsMTApKjEwMFxyXG4gICAgY29uc3QgaWQgPSBhc0lkLnRvU3RyaW5nKClcclxuICAgIGlmKChzZWxlY3RlZFRleHQubGVuZ3RoPjAgJiYgbm90cmltLmxlbmd0aCA9PT0gMCkgfHwgc2VsZWN0ZWRUZXh0Lmxlbmd0aCA9PT0gMCB8fCBzZWxlY3RlZFRleHQgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfor7fkuI3opoHpgInmi6nnqbrlrZfnrKYnKVxyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIGlmKHNlbGVjdGVkVGV4dCA9PT0gdGhpcy5zdGF0ZS5tZXNzYWdlKXtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBjdXJTbmlwcGV0OntcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgICBlbmQsXHJcbiAgICAgICAgICBzdHI6IHNlbGVjdGVkVGV4dCxcclxuICAgICAgICAgIG5hbWU6JycsXHJcbiAgICAgICAgICBzZWxlY3RlZDogdHJ1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9kYWwydmlzaWJsZTogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBpc1NlbGVjdE1vZGVsQ2hhbmdlID0gKGUpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBpc1NlbGVjdE1vZGVsOiBlLnRhcmdldC5jaGVja2VkLFxyXG4gICAgICAgIG1lc3NhZ2VGb3JTZWxlY3RNb2RlbDogZS50YXJnZXQuY2hlY2tlZD90aGlzLnN0YXRlLm1lc3NhZ2U6JycsXHJcbiAgICAgICAgc2VsQXJyOltdLFxyXG4gICAgICAgIHdob2xlQXJyOltdLFxyXG4gICAgICAgIGN1cnJ1bGU6JycsXHJcbiAgICAgICAgcGF0dGVybjonJyxcclxuICAgICAgICByZXN1bHQ6JydcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lsIbpgInkuK3lrZfnrKbkuLLmlbDnu4TkuK3mj5LlhaXmnKrpgInkuK3lrZfnrKbkuLLmlbDnu4RcclxuICBjb21waWxlQXJyID0gKGFycixzdHIpPT57XHJcbiAgICBjb25zdCByZXNvbHZlQXJyID0gW11cclxuICAgIGlmKGFyciAmJiBhcnIubGVuZ3RoPjApe1xyXG4gICAgICBhcnIubWFwKChpdGVtLGluZGV4KT0+e1xyXG4gICAgICAgIGlmKGluZGV4ID09PSBhcnIubGVuZ3RoLTEpe1xyXG4gICAgICAgICAgaWYoaW5kZXg9PT0wICYmIGl0ZW0uc3RhcnQgIT09IDApe1xyXG4gICAgICAgICAgICBjb25zdCBub1NlbGVjdCA9IHt9XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBhc0lkID0gcGFyc2VJbnQocmFuZG9tQ291bnQsMTApICsgcGFyc2VJbnQoY3VyVGltZSwxMCkqMTAwXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCAtIDFcclxuICAgICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgICBub1NlbGVjdC5zZWxlY3RlZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gMFxyXG4gICAgICAgICAgICBub1NlbGVjdC5lbmQgPSBhcnJbaW5kZXhdLnN0YXJ0XHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0ciA9IHN0ci5zbGljZShub1NlbGVjdC5zdGFydCwgbm9TZWxlY3QuZW5kKVxyXG4gICAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2goaXRlbSlcclxuICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCArIDFcclxuICAgICAgICAgIG5vU2VsZWN0LmlkID0gaWRcclxuICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gaXRlbS5lbmRcclxuICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IHN0ci5sZW5ndGhcclxuICAgICAgICAgIG5vU2VsZWN0LnN0ciA9IHN0ci5zbGljZShub1NlbGVjdC5zdGFydCwgbm9TZWxlY3QuZW5kKVxyXG4gICAgICAgICAgcmVzb2x2ZUFyci5wdXNoKG5vU2VsZWN0KVxyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgaWYoaW5kZXg9PT0wICYmIGl0ZW0uc3RhcnQgIT09IDApe1xyXG4gICAgICAgICAgICBjb25zdCBub1NlbGVjdCA9IHt9XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgLy8gY29uc3QgY3VyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAvLyBjb25zdCBhc0lkID0gcGFyc2VJbnQocmFuZG9tQ291bnQsMTApICsgcGFyc2VJbnQoY3VyVGltZSwxMCkqMTAwXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCAtIDFcclxuICAgICAgICAgICAgbm9TZWxlY3QuaWQgPSBpZFxyXG4gICAgICAgICAgICBub1NlbGVjdC5zZWxlY3RlZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gMFxyXG4gICAgICAgICAgICBub1NlbGVjdC5lbmQgPSBhcnJbaW5kZXhdLnN0YXJ0XHJcbiAgICAgICAgICAgIG5vU2VsZWN0LnN0ciA9IHN0ci5zbGljZShub1NlbGVjdC5zdGFydCwgbm9TZWxlY3QuZW5kKVxyXG4gICAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2goaXRlbSlcclxuICAgICAgICAgIGNvbnN0IG5vU2VsZWN0ID0ge31cclxuICAgICAgICAgIC8vIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgIC8vIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgICAgICAgIGNvbnN0IGlkID0gYXJyW2luZGV4XS5pZCArIDFcclxuICAgICAgICAgIG5vU2VsZWN0LmlkID0gaWRcclxuICAgICAgICAgIG5vU2VsZWN0LnNlbGVjdGVkID0gZmFsc2VcclxuICAgICAgICAgIG5vU2VsZWN0LnN0YXJ0ID0gaXRlbS5lbmRcclxuICAgICAgICAgIG5vU2VsZWN0LmVuZCA9IGFycltpbmRleCsxXS5zdGFydFxyXG4gICAgICAgICAgbm9TZWxlY3Quc3RyID0gc3RyLnNsaWNlKG5vU2VsZWN0LnN0YXJ0LCBub1NlbGVjdC5lbmQpXHJcbiAgICAgICAgICByZXNvbHZlQXJyLnB1c2gobm9TZWxlY3QpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc29sdmVBcnJcclxuICB9XHJcbiAgLy/kuqTlj4npgInmi6nliKTmlq1cclxuICBpc0ludGVyc2VjdCA9IChhcnIsc3RhcnQsZW5kKT0+e1xyXG4gICAgbGV0IGlzSW4gPSBmYWxzZVxyXG4gICAgaWYoYXJyICYmIGFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlzSW4gPSBhcnIuc29tZShpdGVtPT57XHJcbiAgICAgICAgY29uc3QgaXN0YXJ0ID0gaXRlbS5zdGFydFxyXG4gICAgICAgIGNvbnN0IGllbmQgPSBpdGVtLmVuZFxyXG4gICAgICAgIHJldHVybiAoKGlzdGFydDxzdGFydCB8fCBpc3RhcnQgPT0gc3RhcnQpICYmIChzdGFydDxpZW5kKSkgfHwgKChpc3RhcnQ8ZW5kKSAmJiAoZW5kPGllbmQgfHwgZW5kID09IGllbmQpKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzSW5cclxuICB9XHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKXtcclxuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlXHJcbiAgfVxyXG4gIHJlbmRlcigpe1xyXG4gICAgY29uc3Qgc2VsZWN0ZWRSb3dLZXlzID0gdGhpcy5zdGF0ZS5pZHNcclxuICAgIGNvbnN0IHJvd1NlbGVjdGlvbiA9IHtcclxuICAgICAgc2VsZWN0ZWRSb3dLZXlzLFxyXG4gICAgICBvbkNoYW5nZTogKHNlbGVjdGVkUm93S2V5cykgPT4ge1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgaWRzOiBzZWxlY3RlZFJvd0tleXNcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgc3RyID0gJydcclxuICAgIGlmKHRoaXMuc3RhdGUucmVzdWx0KXtcclxuICAgICAgc3RyID0gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZSh0aGlzLnN0YXRlLnJlc3VsdCksIG51bGwsIDQpXHJcbiAgICB9XHJcbiAgICByZXR1cm4oXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxBbW9kdWxlPlxyXG4gICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICA8Q29sPlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2hvd0RyYXdlcn0gdHlwZT1cInByaW1hcnlcIj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzLXNxdWFyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiA8c3BhbiBjc3M9e3ttYXJnaW5MZWZ0OlwiNXB4XCJ9fT7mt7vliqA8L3NwYW4+PC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBwbGFjZW1lbnQ9XCJ0b3BMZWZ0XCIgdGl0bGU9e3RoaXMuc3RhdGUuaWRzLmxlbmd0aD4wPyfnoa7lrpropoHliKDpmaTmiYDpgInpobnvvJ8nOifor7flhYjpgInmi6nmgqjopoHliKDpmaTnmoTpobnvvJ8nfSBvbkNvbmZpcm09e3RoaXMuc3RhdGUuaWRzLmxlbmd0aD4wP3RoaXMuZGVsUnVsZTooKT0+e319IG9rVGV4dD1cIuehruWumlwiIGNhbmNlbFRleHQ9XCLlj5bmtohcIj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHN0eWxlPXt7bWFyZ2luTGVmdDogXCIxMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLW1pbnVzLXNxdWFyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3ttYXJnaW5MZWZ0OlwiNXB4XCJ9fT7liKDpmaQ8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuICAgICAgICAgICAgICAgIDwvQ29sPlxyXG4gICAgICAgICAgICAgIDwvUm93PlxyXG4gICAgICAgICAgICAgIDxSb3c+XHJcbiAgICAgICAgICAgICAgICA8Q29sPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCIxMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8V3lTcGluIGlzU3BpbmluZz17dGhpcy5zdGF0ZS5pc1NwaW5pbmd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPFd5VGFibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlU2l6ZT17dGhpcy5zdGF0ZS5wYWdlU2l6ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvblNob3dTaXplQ2hhbmdlPXt0aGlzLnBhZ2VTaXplQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NlbGVjdGlvbj17cm93U2VsZWN0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHhEYXRhPXt0aGlzLnN0YXRlLnhEYXRhP3RoaXMuc3RhdGUueERhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeURhdGE9e3RoaXMuc3RhdGUueURhdGE/dGhpcy5zdGF0ZS55RGF0YTpbXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L1d5U3Bpbj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgIDwvQW1vZHVsZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8RHJhd2VyXHJcbiAgICAgICAgICB0aXRsZT1cIuaVsOaNrua6kOmFjee9rlwiXHJcbiAgICAgICAgICBwbGFjZW1lbnQ9XCJyaWdodFwiXHJcbiAgICAgICAgICBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9XHJcbiAgICAgICAgICB2aXNpYmxlPXt0aGlzLnN0YXRlLnZpc2libGV9XHJcbiAgICAgICAgICB3aWR0aD17XCI4MCVcIn1cclxuICAgICAgICA+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgLy8gPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgLy8gICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT7mlbDmja7lrp7kvos6IDwvc3Bhbj48VGV4dEFyZWEgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fSB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlfSBvbkNoYW5nZT17dGhpcy5tZXNzYWdlQ2hhbmdlfSBjc3M9e3t3aWR0aDpcIjgwJVwifX0gLz5cclxuICAgICAgICAgIC8vIDwvZGl2PlxyXG4gICAgICAgICAgLy8gPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgLy8gICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT5Hcm9r6Kej5p6QOiA8L3NwYW4+PFRleHRBcmVhIGF1dG9zaXplPXt7IG1pblJvd3M6IDIsIG1heFJvd3M6IDYgfX0gdmFsdWU9e3RoaXMuc3RhdGUucGF0dGVybn0gb25DaGFuZ2U9e3RoaXMucGF0dGVybkNoYW5nZX0gIGNzcz17e3dpZHRoOlwiODAlXCJ9fSAvPlxyXG4gICAgICAgICAgLy8gPC9kaXY+XHJcbiAgICAgICAgICAvLyA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAvLyAgIDxCdXR0b24gb25DbGljaz17dGhpcy5kb0FuYWx5c2lzfT7op6PmnpA8L0J1dHRvbj5cclxuICAgICAgICAgIC8vIDwvZGl2PlxyXG4gICAgICAgICAgLy8gPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgLy8gICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT7op6PmnpDnu5PmnpzvvJo8L3NwYW4+PHNwYW4gY3NzPXt7b3ZlcmZsb3c6XCJhdXRvXCIsZGlzcGxheTpcImlubGluZS1ibG9ja1wiLHdpZHRoOiBcIjgwJVwiLG1pbkhlaWdodDpcIjIwMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwifX0+XHJcbiAgICAgICAgICAvLyAgICAgPHByZT57c3RyfTwvcHJlPlxyXG4gICAgICAgICAgLy8gICA8L3NwYW4+XHJcbiAgICAgICAgICAvLyA8L2Rpdj5cclxuICAgICAgICAgIC8vIDxCdXR0b24gIHR5cGU9XCJwcmltYXJ5XCIgb25DbGljaz17dGhpcy5yZWFkeVNhdmV9ID7kv53lrZhHcm9r6Kej5p6QPC9CdXR0b24+XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOiBcIjIwcHhcIn19PlxyXG4gICAgICAgICAgICA8c3BhbiBjc3M9e3t2ZXJ0aWNhbEFsaWduOlwidG9wXCJ9fT7mlbDmja7lrp7kvos6IDwvc3Bhbj5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuaXNTZWxlY3RNb2RlbCA/XHJcbiAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nOlwiNXB4IDAgMCAxMHB4XCIsd2lkdGg6XCI4MCVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsYm9yZGVyOlwiIzIyYzk2MCBzb2xpZCAxcHhcIixwb3NpdGlvbjpcInJlbGF0aXZlXCIsbWluSGVpZ2h0OlwiNTBweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjc3M9e3t3b3JkV3JhcDpcImJyZWFrLXdvcmRcIn19PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS53aG9sZUFyci5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLndob2xlQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8c3BhbiBzdHlsZT17eyBiYWNrZ3JvdW5kOml0ZW0uc2VsZWN0ZWQ/J3JnYmEoMjA0LDI1NSwwLDAuOCknOidub25lJ319IGtleT17aXRlbS5pZH0+e2l0ZW0uc3RyfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLm1lc3NhZ2VGb3JTZWxlY3RNb2RlbFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8VGV4dEFyZWFcclxuICAgICAgICAgICAgICAgICAgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fVxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5tZXNzYWdlRm9yU2VsZWN0TW9kZWx9XHJcbiAgICAgICAgICAgICAgICAgIG9uU2VsZWN0PXt0aGlzLnNlbGVjdFdvcmR9XHJcbiAgICAgICAgICAgICAgICAgIGNzcz17e2JvcmRlcjogXCJub25lXCIscG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6XCIwcHhcIix0b3A6XCIwcHhcIixiYWNrZ3JvdW5kOlwibm9uZVwiLGNvbG9yOlwicmdiYSgxMjMsMTExLDI1NSwwLjUpXCJ9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgIDxUZXh0QXJlYVxyXG4gICAgICAgICAgICAgICAgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fVxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubWVzc2FnZX1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm1lc3NhZ2VDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICBjc3M9e3t3aWR0aDpcIjgwJVwifX1cclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZ0xlZnQ6XCIxMDBweFwifX0+XHJcbiAgICAgICAgICAgIDxzcGFuPjxDaGVja2JveCBvbkNoYW5nZT17dGhpcy5pc1NlbGVjdE1vZGVsQ2hhbmdlfSBjaGVja2VkPXt0aGlzLnN0YXRlLmlzU2VsZWN0TW9kZWx9PuWIkuivjeWMuemFjTwvQ2hlY2tib3g+PC9zcGFuPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZS53aG9sZUFyci5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICA8c3Bhbj48QnV0dG9uIG9uQ2xpY2s9e3RoaXMuY2xlYXJEYXRhfSBzaXplPVwic21hbGxcIiB0eXBlPVwicHJpbWFyeVwiPumHjeaWsOmAieaLqTwvQnV0dG9uPjwvc3Bhbj5cclxuICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19Pkdyb2vop6PmnpA6IDwvc3Bhbj48VGV4dEFyZWEgYXV0b3NpemU9e3sgbWluUm93czogMiwgbWF4Um93czogNiB9fSB2YWx1ZT17dGhpcy5zdGF0ZS5wYXR0ZXJufSBvbkNoYW5nZT17dGhpcy5wYXR0ZXJuQ2hhbmdlfSAgY3NzPXt7d2lkdGg6XCI4MCVcIn19IC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY3NzPXt7cGFkZGluZzogXCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmRvQW5hbHlzaXN9Puino+aekDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmc6IFwiMjBweFwifX0+XHJcbiAgICAgICAgICAgIDxzcGFuIGNzcz17e3ZlcnRpY2FsQWxpZ246XCJ0b3BcIn19Puino+aekOe7k+aenO+8mjwvc3Bhbj48c3BhbiBjc3M9e3tvdmVyZmxvdzpcImF1dG9cIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsd2lkdGg6IFwiODAlXCIsbWluSGVpZ2h0OlwiMjAwcHhcIixib3JkZXI6XCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgc29saWQgMXB4XCJ9fT5cclxuICAgICAgICAgICAgICA8cHJlPntcclxuICAgICAgICAgICAgICAgIHN0clxyXG4gICAgICAgICAgICAgIH08L3ByZT5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8QnV0dG9uICB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMucmVhZHlTYXZlfSA+5L+d5a2YR3Jva+ino+aekOinhOWImTwvQnV0dG9uPlxyXG4gICAgICAgIDwvRHJhd2VyPlxyXG4gICAgICAgIDxNb2RhbFxyXG4gICAgICAgICAgdGl0bGU9XCLlrZfmrrXmj5Dlj5ZcIlxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS5tb2RhbDJ2aXNpYmxlfVxyXG4gICAgICAgICAgb25Paz17dGhpcy5oYW5kbGUyT2t9XHJcbiAgICAgICAgICBvbkNhbmNlbD17dGhpcy5oYW5kbGUyQ2FuY2VsfVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxwPuWtl+auteWQje+8mjxJbnB1dFxyXG4gICAgICAgICAgICBjc3M9e3t3aWR0aDpcIjgwJVwifX1cclxuICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuY3VyU25pcHBldC5uYW1lfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5jdXJTbmlwcGV0Q2hhbmdlfVxyXG4gICAgICAgICAgLz48L3A+XHJcbiAgICAgICAgICA8cD7ljLnphY3lr7nosaHvvJp7dGhpcy5zdGF0ZS5jdXJTbmlwcGV0LnN0cn08L3A+XHJcbiAgICAgICAgPC9Nb2RhbD5cclxuICAgICAgICA8TW9kYWxcclxuICAgICAgICAgIHRpdGxlPVwi5Li66KeE5YiZ5ZG95ZCNXCJcclxuICAgICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUubW9kYWxWaXNpYmxlfVxyXG4gICAgICAgICAgb25Paz17dGhpcy5zYXZlUnVsZX1cclxuICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLmhhbmRsZUNhbmNlbH1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIn19PuinhOWImeWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+PElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnJ1bGVuYW1lfSBvbkNoYW5nZT17dGhpcy5ydWxlbmFtZUNoYW5nZX0vPjwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIn19PuinhOWImeaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIxIDEgYXV0b1wifX0+PFRleHRBcmVhIHZhbHVlPXt0aGlzLnN0YXRlLnJ1bGVkZXN9IG9uQ2hhbmdlPXt0aGlzLnJ1bGVkZXNDaGFuZ2V9Lz48L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvTW9kYWw+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hbmFnZVxyXG4iXX0= */\"\n};\n\nvar _ref13 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1jvh7rp-Manage\",\n  styles: \"width:80%;label:Manage;\"\n} : {\n  name: \"1jvh7rp-Manage\",\n  styles: \"width:80%;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref14 = process.env.NODE_ENV === \"production\" ? {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\"\n} : {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref15 = process.env.NODE_ENV === \"production\" ? {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\"\n} : {\n  name: \"pjdqfc-Manage\",\n  styles: \"padding:20px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref16 = process.env.NODE_ENV === \"production\" ? {\n  name: \"12nvjrx-Manage\",\n  styles: \"vertical-align:top;label:Manage;\"\n} : {\n  name: \"12nvjrx-Manage\",\n  styles: \"vertical-align:top;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref17 = process.env.NODE_ENV === \"production\" ? {\n  name: \"xcsl82-Manage\",\n  styles: \"overflow:auto;display:inline-block;width:80%;min-height:200px;border:rgba(255,255,255,0.2) solid 1px;label:Manage;\"\n} : {\n  name: \"xcsl82-Manage\",\n  styles: \"overflow:auto;display:inline-block;width:80%;min-height:200px;border:rgba(255,255,255,0.2) solid 1px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref18 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1jvh7rp-Manage\",\n  styles: \"width:80%;label:Manage;\"\n} : {\n  name: \"1jvh7rp-Manage\",\n  styles: \"width:80%;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref19 = process.env.NODE_ENV === \"production\" ? {\n  name: \"oqsto2-Manage\",\n  styles: \"display:flex;line-height:40px;label:Manage;\"\n} : {\n  name: \"oqsto2-Manage\",\n  styles: \"display:flex;line-height:40px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref20 = process.env.NODE_ENV === \"production\" ? {\n  name: \"15tkist-Manage\",\n  styles: \"flex:0 0 100px;label:Manage;\"\n} : {\n  name: \"15tkist-Manage\",\n  styles: \"flex:0 0 100px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref21 = process.env.NODE_ENV === \"production\" ? {\n  name: \"qr2ccj-Manage\",\n  styles: \"flex:1 1 auto;label:Manage;\"\n} : {\n  name: \"qr2ccj-Manage\",\n  styles: \"flex:1 1 auto;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref22 = process.env.NODE_ENV === \"production\" ? {\n  name: \"oqsto2-Manage\",\n  styles: \"display:flex;line-height:40px;label:Manage;\"\n} : {\n  name: \"oqsto2-Manage\",\n  styles: \"display:flex;line-height:40px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref23 = process.env.NODE_ENV === \"production\" ? {\n  name: \"15tkist-Manage\",\n  styles: \"flex:0 0 100px;label:Manage;\"\n} : {\n  name: \"15tkist-Manage\",\n  styles: \"flex:0 0 100px;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref24 = process.env.NODE_ENV === \"production\" ? {\n  name: \"qr2ccj-Manage\",\n  styles: \"flex:1 1 auto;label:Manage;\"\n} : {\n  name: \"qr2ccj-Manage\",\n  styles: \"flex:1 1 auto;label:Manage;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nclass Manage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      message: '',\n      messageForSelectModel: '',\n      //划词时候的日志样例\n      pattern: '',\n      result: '',\n      visible: false,\n      modalVisible: false,\n      rulename: '',\n      ruledes: '',\n      lastOne: {\n        //最近一次执行解析之后的三个量的值\n        message: '',\n        pattern: '',\n        result: ''\n      },\n      pageSize: 5,\n      isSpining: false,\n      ids: [],\n      xData: [],\n      yData: [],\n      id: '',\n      modal2visible: false,\n      curSnippet: {\n        //最近一次选中的数据例的各个属性信息\n        id: '',\n        start: '',\n        end: '',\n        str: '',\n        name: '',\n        selected: ''\n      },\n      isSelectModel: false,\n      //是否是划词匹配模式\n      selArr: [],\n      //划词时被选中的数据例\n      wholeArr: [] //通过选中的数据例，编译出的整条数据例\n\n    };\n\n    this.showDrawer = () => {\n      if (this._isMounted) {\n        this.setState({\n          visible: true\n        });\n      }\n    };\n\n    this.rulenameChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          rulename: e.target.value\n        });\n      }\n    };\n\n    this.ruledesChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          ruledes: e.target.value\n        });\n      }\n    };\n\n    this.onClose = () => {\n      if (this._isMounted) {\n        this.setState({\n          visible: false,\n          message: '',\n          pattern: '',\n          result: '',\n          rulename: '',\n          ruledes: '',\n          lastOne: {},\n          id: ''\n        });\n      }\n    };\n\n    this.messageChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          message: e.target.value\n        });\n      }\n    };\n\n    this.patternChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          pattern: e.target.value\n        });\n      }\n    };\n\n    this.doAnalysis = () => {\n      if (this.state.message !== '' && this.state.pattern !== '') {\n        const _this$state = this.state,\n              message = _this$state.message,\n              pattern = _this$state.pattern;\n        wyAxiosPost('Rule/getMsgByGrok', {\n          message,\n          pattern\n        }, result => {\n          const response = result.data.msg;\n\n          if (this._isMounted) {\n            this.setState({\n              result: response\n            }, () => {\n              this.setState({\n                lastOne: {\n                  message: this.state.message,\n                  pattern: this.state.pattern,\n                  result: this.state.result\n                }\n              });\n            });\n          }\n        });\n      } else {\n        _message.warning('抱歉，数据实例和解析规则必须填写');\n      }\n    };\n\n    this.showModal = () => {\n      if (this._isMounted) {\n        this.setState({\n          modalVisible: true\n        });\n      }\n    };\n\n    this.handleCancel = e => {\n      if (this._isMounted) {\n        this.setState({\n          modalVisible: false\n        });\n      }\n    };\n\n    this.isLegal = () => {\n      const _this$state2 = this.state,\n            pattern = _this$state2.pattern,\n            message = _this$state2.message,\n            result = _this$state2.result;\n      let isLegal = true;\n\n      if (pattern === this.state.lastOne.pattern && _.isEqual(message, this.state.lastOne.message) && _.isEqual(result, this.state.lastOne.result)) {\n        if (result !== '') {\n          if (result !== '{}' && result !== 'null') {\n            //this.modalShow()\n            isLegal = true;\n          } else {\n            isLegal = false;\n\n            _message.warning('规则有误');\n          }\n        } else {\n          isLegal = false;\n\n          _message.warning('请先填写规则');\n        }\n      } else {\n        isLegal = false;\n\n        _message.warning('你还未执行解析，或者更改数据后未重新解析');\n      }\n\n      return isLegal;\n    };\n\n    this.readySave = () => {\n      if (this.isLegal() && this._isMounted) {\n        this.setState({\n          modalVisible: true\n        });\n      }\n    };\n\n    this.saveRule = () => {\n      if (this.state.rulename !== '' && forName.test(this.state.rulename)) {\n        const _this$state3 = this.state,\n              rulename = _this$state3.rulename,\n              ruledes = _this$state3.ruledes,\n              message = _this$state3.message,\n              pattern = _this$state3.pattern,\n              id = _this$state3.id,\n              appname = _this$state3.appname;\n        wyAxiosPost('Rule/saveRule', {\n          rulename,\n          ruledes,\n          message,\n          pattern,\n          id,\n          appname\n        }, result => {\n          const responseData = result.data.msg;\n\n          if (responseData.status === 1) {\n            _message.success(responseData.msg);\n\n            this.handleCancel();\n            this.onClose();\n            this.getRule();\n          } else {\n            _message.warning(responseData.msg);\n          }\n        });\n      } else {\n        _message.warning('规则名称未填写或填写有误');\n      }\n    };\n\n    this.getRule = () => {\n      if (this._isMounted) {\n        this.setState({\n          isSpining: true\n        });\n      }\n\n      wyAxiosPost('Rule/getRule', {}, result => {\n        const responseData = result.data.msg;\n\n        let curxData = _.cloneDeep(responseData.xxx);\n\n        curxData.push({\n          title: '编辑',\n          dataIndex: 'edit',\n          render: (text, record, index) => jsx(\"span\", {\n            style: {\n              cursor: \"pointer\",\n              color: \"#00CC66\"\n            },\n            onClick: () => this.editRule(record.id),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            },\n            __self: this\n          }, jsx(\"i\", {\n            className: \"fa fa-pencil-square\",\n            \"aria-hidden\": \"true\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 211\n            },\n            __self: this\n          }))\n        });\n\n        if (this._isMounted) {\n          this.setState({\n            xData: curxData,\n            yData: responseData.yyy,\n            isSpining: false\n          });\n        }\n      });\n    };\n\n    this.pageSizeChange = (current, size) => {\n      if (this._isMounted) {\n        this.setState({\n          pageSize: size\n        });\n      }\n    };\n\n    this.editRule = id => {\n      wyAxiosPost('Rule/getRule', {\n        id\n      }, result => {\n        const responseData = result.data.msg;\n        const message = responseData.message,\n              pattern = responseData.pattern,\n              rulename = responseData.rulename,\n              ruledes = responseData.ruledes,\n              id = responseData.id;\n\n        if (this._isMounted) {\n          this.setState({\n            message,\n            pattern,\n            rulename,\n            ruledes,\n            id,\n            lastOne: {\n              pattern,\n              message,\n              result: ''\n            }\n          }, () => {\n            this.showDrawer();\n          });\n        }\n      });\n    };\n\n    this.delRule = () => {\n      wyAxiosPost('Rule/delRule', {\n        ids: this.state.ids\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData.status === 1) {\n          _message.success(responseData.msg);\n\n          if (this._isMounted) {\n            this.setState({\n              ids: []\n            }, () => {\n              this.getRule();\n            });\n          }\n        } else {\n          _message.warning(responseData.msg);\n        }\n      });\n    };\n\n    this.handle2Ok = e => {\n      if (this.state.curSnippet.name === '') {\n        _message.warning('字段名不能为空');\n      } else {\n        const selArr = _.cloneDeep(this.state.selArr);\n\n        const isRename = selArr.some(item => {\n          return item.name === e.target.value;\n        });\n\n        if (isRename) {\n          _message.warning('请不要用重复字段名');\n        } else {\n          const curArr = _.cloneDeep(this.state.selArr);\n\n          const newArr = _.cloneDeep(this.state.curSnippet);\n\n          curArr.push(newArr); //对数组排序\n\n          const haha = _.sortBy(curArr, item => {\n            return item.start;\n          });\n\n          if (this._isMounted) {\n            this.setState({\n              selArr: _.cloneDeep(haha)\n            }, () => {\n              const wholeArr = this.compileArr(this.state.selArr, this.state.message);\n\n              if (this._isMounted) {\n                this.setState({\n                  wholeArr\n                }, () => {\n                  this.handle2Cancel();\n                  const reg = decodeArr(this.state.wholeArr, this.state.messageForSelectModel);\n\n                  if (this._isMounted) {\n                    this.setState({\n                      pattern: reg\n                    });\n                  }\n                });\n              }\n            });\n          }\n        }\n      }\n    };\n\n    this.handle2Cancel = e => {\n      if (this._isMounted) {\n        this.setState({\n          modal2visible: false,\n          curSnippet: {\n            id: '',\n            start: '',\n            end: '',\n            str: '',\n            name: ''\n          }\n        });\n      }\n    };\n\n    this.curSnippetChange = e => {\n      const cur = _.cloneDeep(this.state.curSnippet);\n\n      const compileCur = Object.assign({}, this.state.curSnippet, {\n        name: e.target.value\n      });\n\n      if (this._isMounted) {\n        this.setState({\n          curSnippet: _.cloneDeep(compileCur)\n        });\n      }\n    };\n\n    this.selectWord = event => {\n      const e = window.event || event;\n      e.preventDefault();\n      e.stopPropagation();\n      const curMessage = this.state.message;\n      const start = e.target.selectionStart;\n      const end = e.target.selectionEnd; //交叉选择判断\n\n      if (this.isIntersect(this.state.selArr, start, end)) {\n        _message.warning('选择无效,请避免交叉选择');\n\n        return;\n      }\n\n      const selectedText = curMessage.slice(start, end);\n\n      const notrim = _.trim(selectedText);\n\n      const randomCount = Math.random();\n      const curTime = new Date().getTime();\n      const asId = parseInt(randomCount, 10) + parseInt(curTime, 10) * 100;\n      const id = asId.toString();\n\n      if (selectedText.length > 0 && notrim.length === 0 || selectedText.length === 0 || selectedText === '') {\n        _message.warning('请不要选择空字符');\n\n        return;\n      }\n\n      if (selectedText === this.state.message) {\n        return;\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          curSnippet: {\n            id,\n            start,\n            end,\n            str: selectedText,\n            name: '',\n            selected: true\n          },\n          modal2visible: true\n        });\n      }\n    };\n\n    this.isSelectModelChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          isSelectModel: e.target.checked,\n          messageForSelectModel: e.target.checked ? this.state.message : '',\n          selArr: [],\n          wholeArr: [],\n          currule: '',\n          pattern: '',\n          result: ''\n        });\n      }\n    };\n\n    this.compileArr = (arr, str) => {\n      const resolveArr = [];\n\n      if (arr && arr.length > 0) {\n        arr.map((item, index) => {\n          if (index === arr.length - 1) {\n            if (index === 0 && item.start !== 0) {\n              const noSelect = {}; // const randomCount = Math.random();\n              // const curTime = new Date().getTime();\n              // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n              const id = arr[index].id - 1;\n              noSelect.id = id;\n              noSelect.selected = false;\n              noSelect.start = 0;\n              noSelect.end = arr[index].start;\n              noSelect.str = str.slice(noSelect.start, noSelect.end);\n              resolveArr.push(noSelect);\n            }\n\n            resolveArr.push(item);\n            const noSelect = {}; // const randomCount = Math.random();\n            // const curTime = new Date().getTime();\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n            const id = arr[index].id + 1;\n            noSelect.id = id;\n            noSelect.selected = false;\n            noSelect.start = item.end;\n            noSelect.end = str.length;\n            noSelect.str = str.slice(noSelect.start, noSelect.end);\n            resolveArr.push(noSelect);\n          } else {\n            if (index === 0 && item.start !== 0) {\n              const noSelect = {}; // const randomCount = Math.random();\n              // const curTime = new Date().getTime();\n              // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n              const id = arr[index].id - 1;\n              noSelect.id = id;\n              noSelect.selected = false;\n              noSelect.start = 0;\n              noSelect.end = arr[index].start;\n              noSelect.str = str.slice(noSelect.start, noSelect.end);\n              resolveArr.push(noSelect);\n            }\n\n            resolveArr.push(item);\n            const noSelect = {}; // const randomCount = Math.random();\n            // const curTime = new Date().getTime();\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\n\n            const id = arr[index].id + 1;\n            noSelect.id = id;\n            noSelect.selected = false;\n            noSelect.start = item.end;\n            noSelect.end = arr[index + 1].start;\n            noSelect.str = str.slice(noSelect.start, noSelect.end);\n            resolveArr.push(noSelect);\n          }\n        });\n      }\n\n      return resolveArr;\n    };\n\n    this.isIntersect = (arr, start, end) => {\n      let isIn = false;\n\n      if (arr && arr.length > 0) {\n        isIn = arr.some(item => {\n          const istart = item.start;\n          const iend = item.end;\n          return (istart < start || istart == start) && start < iend || istart < end && (end < iend || end == iend);\n        });\n      }\n\n      return isIn;\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.getRule();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const selectedRowKeys = this.state.ids;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: selectedRowKeys => {\n        if (this._isMounted) {\n          this.setState({\n            ids: selectedRowKeys\n          });\n        }\n      }\n    };\n    let str = '';\n\n    if (this.state.result) {\n      str = JSON.stringify(JSON.parse(this.state.result), null, 4);\n    }\n\n    return jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480\n      },\n      __self: this\n    }, jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    }, jsx(Amodule, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482\n      },\n      __self: this\n    }, jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.showDrawer,\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-plus-square-o\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }), \" \", jsx(\"span\", {\n      css: _ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485\n      },\n      __self: this\n    }, \"\\u6DFB\\u52A0\")), jsx(_Popconfirm, {\n      css: _ref2,\n      placement: \"topLeft\",\n      title: this.state.ids.length > 0 ? '确定要删除所选项？' : '请先选择您要删除的项？',\n      onConfirm: this.state.ids.length > 0 ? this.delRule : () => {},\n      okText: \"\\u786E\\u5B9A\",\n      cancelText: \"\\u53D6\\u6D88\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, jsx(_Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-minus-square-o\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488\n      },\n      __self: this\n    }), jsx(\"span\", {\n      style: {\n        marginLeft: \"5px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, \"\\u5220\\u9664\"))))), jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, jsx(WySpin, {\n      isSpining: this.state.isSpining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, jsx(WyTable, {\n      pageSize: this.state.pageSize,\n      onShowSizeChange: this.pageSizeChange,\n      rowSelection: rowSelection,\n      xData: this.state.xData ? this.state.xData : [],\n      yData: this.state.yData ? this.state.yData : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }))))))), jsx(_Drawer, {\n      title: \"\\u6570\\u636E\\u6E90\\u914D\\u7F6E\",\n      placement: \"right\",\n      onClose: this.onClose,\n      visible: this.state.visible,\n      width: \"80%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, \"\\u6570\\u636E\\u5B9E\\u4F8B: \"), this.state.isSelectModel ? jsx(\"div\", {\n      css: _ref6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    }, this.state.wholeArr.length > 0 ? this.state.wholeArr.map(item => {\n      return jsx(\"span\", {\n        style: {\n          background: item.selected ? 'rgba(204,255,0,0.8)' : 'none'\n        },\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }, item.str);\n    }) : this.state.messageForSelectModel), jsx(TextArea, {\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      value: this.state.messageForSelectModel,\n      onSelect: this.selectWord,\n      css: _ref8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    })) : jsx(TextArea, {\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      value: this.state.message,\n      onChange: this.messageChange,\n      css: _ref9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559\n      },\n      __self: this\n    })), jsx(\"div\", {\n      css: _ref10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, jsx(_Checkbox, {\n      onChange: this.isSelectModelChange,\n      checked: this.state.isSelectModel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568\n      },\n      __self: this\n    }, \"\\u5212\\u8BCD\\u5339\\u914D\")), this.state.wholeArr.length > 0 ? jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.clearData,\n      size: \"small\",\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571\n      },\n      __self: this\n    }, \"\\u91CD\\u65B0\\u9009\\u62E9\")) : ''), jsx(\"div\", {\n      css: _ref11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \"Grok\\u89E3\\u6790: \"), jsx(TextArea, {\n      autosize: {\n        minRows: 2,\n        maxRows: 6\n      },\n      value: this.state.pattern,\n      onChange: this.patternChange,\n      css: _ref13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    })), jsx(\"div\", {\n      css: _ref14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.doAnalysis,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580\n      },\n      __self: this\n    }, \"\\u89E3\\u6790\")), jsx(\"div\", {\n      css: _ref15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, jsx(\"span\", {\n      css: _ref16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, \"\\u89E3\\u6790\\u7ED3\\u679C\\uFF1A\"), jsx(\"span\", {\n      css: _ref17,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, jsx(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, str))), jsx(_Button, {\n      type: \"primary\",\n      onClick: this.readySave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, \"\\u4FDD\\u5B58Grok\\u89E3\\u6790\\u89C4\\u5219\")), jsx(_Modal, {\n      title: \"\\u5B57\\u6BB5\\u63D0\\u53D6\",\n      visible: this.state.modal2visible,\n      onOk: this.handle2Ok,\n      onCancel: this.handle2Cancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }, jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, \"\\u5B57\\u6BB5\\u540D\\uFF1A\", jsx(_Input, {\n      css: _ref18,\n      value: this.state.curSnippet.name,\n      onChange: this.curSnippetChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    })), jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \"\\u5339\\u914D\\u5BF9\\u8C61\\uFF1A\", this.state.curSnippet.str)), jsx(_Modal, {\n      title: \"\\u4E3A\\u89C4\\u5219\\u547D\\u540D\",\n      visible: this.state.modalVisible,\n      onOk: this.saveRule,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref19,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, \"\\u89C4\\u5219\\u540D\\u79F0\\uFF1A\"), jsx(\"div\", {\n      css: _ref21,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }, jsx(_Input, {\n      value: this.state.rulename,\n      onChange: this.rulenameChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref23,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"\\u89C4\\u5219\\u63CF\\u8FF0\\uFF1A\"), jsx(\"div\", {\n      css: _ref24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, jsx(TextArea, {\n      value: this.state.ruledes,\n      onChange: this.ruledesChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Manage;","map":{"version":3,"sources":["/industry/app/src/SystemRule/Manage.js"],"names":["jsx","css","React","Component","_","JSONFormatter","Amodule","WyTable","wyAxiosPost","WySpin","forName","decodeArr","TextArea","Option","Manage","state","message","messageForSelectModel","pattern","result","visible","modalVisible","rulename","ruledes","lastOne","pageSize","isSpining","ids","xData","yData","id","modal2visible","curSnippet","start","end","str","name","selected","isSelectModel","selArr","wholeArr","showDrawer","_isMounted","setState","rulenameChange","e","target","value","ruledesChange","onClose","messageChange","patternChange","doAnalysis","response","data","msg","warning","showModal","handleCancel","isLegal","isEqual","readySave","saveRule","test","appname","responseData","status","success","getRule","curxData","cloneDeep","xxx","push","title","dataIndex","render","text","record","index","cursor","color","editRule","yyy","pageSizeChange","current","size","delRule","handle2Ok","isRename","some","item","curArr","newArr","haha","sortBy","compileArr","handle2Cancel","reg","curSnippetChange","cur","compileCur","Object","assign","selectWord","event","window","preventDefault","stopPropagation","curMessage","selectionStart","selectionEnd","isIntersect","selectedText","slice","notrim","trim","randomCount","Math","random","curTime","Date","getTime","asId","parseInt","toString","length","isSelectModelChange","checked","currule","arr","resolveArr","map","noSelect","isIn","istart","iend","componentDidMount","componentWillUnmount","selectedRowKeys","rowSelection","onChange","JSON","stringify","parse","marginLeft","background","minRows","maxRows","clearData"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx, css } from '@emotion/core'\r\nimport React, { Component } from 'react'\r\nimport { Input, Button, Drawer, Row, Col, message, Modal,Popconfirm, Checkbox, Select } from 'antd'\r\nimport _ from 'lodash'\r\nimport JSONFormatter from 'json-formatter-js'\r\n\r\n\r\nimport { Amodule } from '../components/Amodule'\r\nimport  WyTable  from '../components/WyTable'\r\nimport { wyAxiosPost} from '../components/WyAxios'\r\nimport WySpin from '../components/WySpin'\r\nimport { forName } from '../components/RegExp'\r\nimport decodeArr from './decodeArr'\r\nconst TextArea = Input.TextArea\r\nconst { Option } = Select\r\nclass Manage extends Component{\r\n  state = {\r\n    message: '',\r\n    messageForSelectModel:'', //划词时候的日志样例\r\n    pattern:'',\r\n    result: '',\r\n    visible: false,\r\n    modalVisible: false,\r\n    rulename: '',\r\n    ruledes:'',\r\n    lastOne: {   //最近一次执行解析之后的三个量的值\r\n      message: '',\r\n      pattern: '',\r\n      result: '',\r\n    },\r\n\r\n    pageSize:5,\r\n    isSpining: false,\r\n    ids:[],\r\n    xData: [],\r\n    yData: [],\r\n    id:'',\r\n\r\n    modal2visible: false,\r\n    curSnippet:{ //最近一次选中的数据例的各个属性信息\r\n      id:'',\r\n      start:'',\r\n      end:'',\r\n      str: '',\r\n      name:'',\r\n      selected:''\r\n    },\r\n    isSelectModel: false,//是否是划词匹配模式\r\n    selArr:[],//划词时被选中的数据例\r\n    wholeArr:[],//通过选中的数据例，编译出的整条数据例\r\n  }\r\n  componentDidMount(){\r\n    this._isMounted = true\r\n    this.getRule()\r\n  }\r\n  showDrawer = () => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: true,\r\n      })\r\n    }\r\n  }\r\n  rulenameChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        rulename: e.target.value\r\n      })\r\n    }\r\n  }\r\n  ruledesChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        ruledes: e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  onClose = () => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: false,\r\n        message: '',\r\n        pattern:'',\r\n        result: '',\r\n        rulename: '',\r\n        ruledes:'',\r\n        lastOne:{},\r\n        id:''\r\n      })\r\n    }\r\n  }\r\n  messageChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        message: e.target.value\r\n      })\r\n    }\r\n  }\r\n  patternChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        pattern: e.target.value\r\n      })\r\n    }\r\n  }\r\n  doAnalysis = ()=>{\r\n    if(this.state.message !== '' && this.state.pattern !== ''){\r\n      const { message, pattern } =  this.state\r\n      wyAxiosPost('Rule/getMsgByGrok',{message, pattern},(result)=>{\r\n        const response = result.data.msg\r\n        if(this._isMounted){\r\n          this.setState({\r\n            result: response\r\n          },()=>{\r\n            this.setState({\r\n              lastOne: {\r\n                message: this.state.message,\r\n                pattern: this.state.pattern,\r\n                result: this.state.result,\r\n              }\r\n            })\r\n          })\r\n        }\r\n      })\r\n    }else{\r\n      message.warning('抱歉，数据实例和解析规则必须填写');\r\n    }\r\n  }\r\n  showModal = () => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        modalVisible: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  handleCancel = (e) => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        modalVisible: false,\r\n      })\r\n    }\r\n  }\r\n\r\n  isLegal = ()=>{\r\n    const {pattern,message,result} = this.state\r\n    let isLegal = true\r\n    if(\r\n      pattern === this.state.lastOne.pattern &&\r\n      _.isEqual(message, this.state.lastOne.message) &&\r\n      _.isEqual(result, this.state.lastOne.result)\r\n    ){\r\n      if(result !== ''){\r\n        if(result !=='{}' && result !=='null'){\r\n          //this.modalShow()\r\n          isLegal = true\r\n        }else{\r\n          isLegal = false\r\n          message.warning('规则有误')\r\n        }\r\n      }else{\r\n        isLegal = false\r\n        message.warning('请先填写规则')\r\n      }\r\n    }else{\r\n      isLegal = false\r\n      message.warning('你还未执行解析，或者更改数据后未重新解析')\r\n    }\r\n\r\n    return isLegal\r\n  }\r\n  readySave = ()=>{\r\n    if(this.isLegal() && this._isMounted){\r\n      this.setState({\r\n        modalVisible: true\r\n      })\r\n    }\r\n  }\r\n  //保存规则\r\n  saveRule = ()=>{\r\n    if(this.state.rulename !== '' && forName.test(this.state.rulename)){\r\n      const {rulename,ruledes,message,pattern,id,appname} = this.state\r\n      wyAxiosPost('Rule/saveRule',{rulename,ruledes,message,pattern,id,appname},(result)=>{\r\n        const responseData = result.data.msg\r\n        if(responseData.status === 1){\r\n          message.success(responseData.msg)\r\n          this.handleCancel()\r\n          this.onClose()\r\n          this.getRule()\r\n        }else{\r\n          message.warning(responseData.msg)\r\n        }\r\n      })\r\n    }else{\r\n      message.warning('规则名称未填写或填写有误')\r\n    }\r\n  }\r\n  getRule = ()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isSpining: true\r\n      })\r\n    }\r\n    wyAxiosPost('Rule/getRule',{},(result)=>{\r\n      const responseData = result.data.msg\r\n      let curxData = _.cloneDeep(responseData.xxx)\r\n      curxData.push({\r\n        title: '编辑',\r\n        dataIndex: 'edit',\r\n        render: (text, record, index)=><span style={{cursor:\"pointer\",color: \"#00CC66\"}} onClick={()=>this.editRule(record.id)}><i className=\"fa fa-pencil-square\" aria-hidden=\"true\"></i></span>\r\n      })\r\n      if(this._isMounted){\r\n        this.setState({\r\n          xData: curxData,\r\n          yData: responseData.yyy,\r\n          isSpining: false\r\n        })\r\n      }\r\n    })\r\n  }\r\n  pageSizeChange = (current, size)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        pageSize: size\r\n      })\r\n    }\r\n  }\r\n  //编辑\r\n  editRule = (id)=>{\r\n    wyAxiosPost('Rule/getRule',{id},(result)=>{\r\n      const responseData = result.data.msg\r\n      const {message, pattern,rulename,ruledes,id} = responseData\r\n      if(this._isMounted){\r\n        this.setState({\r\n          message,\r\n          pattern,\r\n          rulename,\r\n          ruledes,\r\n          id,\r\n          lastOne:{\r\n            pattern,\r\n            message,\r\n            result:''\r\n          }\r\n        },()=>{\r\n          this.showDrawer()\r\n        })\r\n      }\r\n    })\r\n  }\r\n  //删除\r\n  delRule = ()=>{\r\n    wyAxiosPost('Rule/delRule',{ids: this.state.ids},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData.status === 1){\r\n        message.success(responseData.msg)\r\n        if(this._isMounted){\r\n          this.setState({\r\n            ids: []\r\n          },()=>{\r\n            this.getRule()\r\n          })\r\n        }\r\n      }else{\r\n        message.warning(responseData.msg)\r\n      }\r\n    })\r\n  }\r\n  handle2Ok = e => {\r\n    if(this.state.curSnippet.name === ''){\r\n      message.warning('字段名不能为空')\r\n    }else{\r\n      const selArr = _.cloneDeep(this.state.selArr)\r\n      const isRename = selArr.some(item=>{\r\n        return item.name === e.target.value\r\n      })\r\n      if(isRename){\r\n        message.warning('请不要用重复字段名')\r\n      }else{\r\n        const curArr = _.cloneDeep(this.state.selArr)\r\n        const newArr = _.cloneDeep(this.state.curSnippet)\r\n        curArr.push(newArr)\r\n        //对数组排序\r\n        const haha = _.sortBy(curArr,(item)=>{\r\n          return item.start\r\n        })\r\n        if(this._isMounted){\r\n          this.setState({\r\n            selArr: _.cloneDeep(haha)\r\n          },()=>{\r\n            const wholeArr = this.compileArr(this.state.selArr,this.state.message)\r\n            if(this._isMounted){\r\n              this.setState({\r\n                wholeArr\r\n              },()=>{\r\n                this.handle2Cancel()\r\n                const reg = decodeArr(this.state.wholeArr, this.state.messageForSelectModel)\r\n                if(this._isMounted){\r\n                  this.setState({\r\n                    pattern: reg\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n  handle2Cancel = e => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        modal2visible: false,\r\n        curSnippet:{\r\n          id:'',\r\n          start:'',\r\n          end:'',\r\n          str: '',\r\n          name:''\r\n        }\r\n      })\r\n    }\r\n  }\r\n  curSnippetChange = (e)=>{\r\n    const cur = _.cloneDeep(this.state.curSnippet)\r\n    const compileCur = Object.assign({},this.state.curSnippet,{name: e.target.value})\r\n    if(this._isMounted){\r\n      this.setState({\r\n        curSnippet: _.cloneDeep(compileCur)\r\n      })\r\n    }\r\n  }\r\n  selectWord = (event)=>{\r\n    const e = window.event || event\r\n    e.preventDefault()\r\n    e.stopPropagation()\r\n    const curMessage = this.state.message\r\n    const start = e.target.selectionStart\r\n    const end = e.target.selectionEnd\r\n    //交叉选择判断\r\n    if(this.isIntersect(this.state.selArr,start,end)){\r\n      message.warning('选择无效,请避免交叉选择')\r\n      return\r\n    }\r\n    const selectedText = curMessage.slice(start, end)\r\n    const notrim = _.trim(selectedText)\r\n    const randomCount = Math.random();\r\n    const curTime = new Date().getTime();\r\n    const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n    const id = asId.toString()\r\n    if((selectedText.length>0 && notrim.length === 0) || selectedText.length === 0 || selectedText === ''){\r\n      message.warning('请不要选择空字符')\r\n      return\r\n    }\r\n    if(selectedText === this.state.message){\r\n      return\r\n    }\r\n    if(this._isMounted){\r\n      this.setState({\r\n        curSnippet:{\r\n          id,\r\n          start,\r\n          end,\r\n          str: selectedText,\r\n          name:'',\r\n          selected: true\r\n        },\r\n        modal2visible: true\r\n      })\r\n    }\r\n  }\r\n  isSelectModelChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isSelectModel: e.target.checked,\r\n        messageForSelectModel: e.target.checked?this.state.message:'',\r\n        selArr:[],\r\n        wholeArr:[],\r\n        currule:'',\r\n        pattern:'',\r\n        result:''\r\n      })\r\n    }\r\n  }\r\n  //将选中字符串数组中插入未选中字符串数组\r\n  compileArr = (arr,str)=>{\r\n    const resolveArr = []\r\n    if(arr && arr.length>0){\r\n      arr.map((item,index)=>{\r\n        if(index === arr.length-1){\r\n          if(index===0 && item.start !== 0){\r\n            const noSelect = {}\r\n            // const randomCount = Math.random();\r\n            // const curTime = new Date().getTime();\r\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n            const id = arr[index].id - 1\r\n            noSelect.id = id\r\n            noSelect.selected = false\r\n            noSelect.start = 0\r\n            noSelect.end = arr[index].start\r\n            noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n            resolveArr.push(noSelect)\r\n          }\r\n          resolveArr.push(item)\r\n          const noSelect = {}\r\n          // const randomCount = Math.random();\r\n          // const curTime = new Date().getTime();\r\n          // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n          const id = arr[index].id + 1\r\n          noSelect.id = id\r\n          noSelect.selected = false\r\n          noSelect.start = item.end\r\n          noSelect.end = str.length\r\n          noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n          resolveArr.push(noSelect)\r\n        }else{\r\n          if(index===0 && item.start !== 0){\r\n            const noSelect = {}\r\n            // const randomCount = Math.random();\r\n            // const curTime = new Date().getTime();\r\n            // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n            const id = arr[index].id - 1\r\n            noSelect.id = id\r\n            noSelect.selected = false\r\n            noSelect.start = 0\r\n            noSelect.end = arr[index].start\r\n            noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n            resolveArr.push(noSelect)\r\n          }\r\n          resolveArr.push(item)\r\n          const noSelect = {}\r\n          // const randomCount = Math.random();\r\n          // const curTime = new Date().getTime();\r\n          // const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n          const id = arr[index].id + 1\r\n          noSelect.id = id\r\n          noSelect.selected = false\r\n          noSelect.start = item.end\r\n          noSelect.end = arr[index+1].start\r\n          noSelect.str = str.slice(noSelect.start, noSelect.end)\r\n          resolveArr.push(noSelect)\r\n        }\r\n      })\r\n    }\r\n    return resolveArr\r\n  }\r\n  //交叉选择判断\r\n  isIntersect = (arr,start,end)=>{\r\n    let isIn = false\r\n    if(arr && arr.length>0){\r\n      isIn = arr.some(item=>{\r\n        const istart = item.start\r\n        const iend = item.end\r\n        return ((istart<start || istart == start) && (start<iend)) || ((istart<end) && (end<iend || end == iend))\r\n      })\r\n    }\r\n    return isIn\r\n  }\r\n  componentWillUnmount(){\r\n    this._isMounted = false\r\n  }\r\n  render(){\r\n    const selectedRowKeys = this.state.ids\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: (selectedRowKeys) => {\r\n        if(this._isMounted){\r\n          this.setState({\r\n            ids: selectedRowKeys\r\n          })\r\n        }\r\n      }\r\n    }\r\n    let str = ''\r\n    if(this.state.result){\r\n      str = JSON.stringify(JSON.parse(this.state.result), null, 4)\r\n    }\r\n    return(\r\n      <div>\r\n        <div>\r\n          <Amodule>\r\n              <Row>\r\n                <Col>\r\n                  <Button onClick={this.showDrawer} type=\"primary\"><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i> <span css={{marginLeft:\"5px\"}}>添加</span></Button>\r\n                  <Popconfirm css={{marginLeft:\"10px\"}} placement=\"topLeft\" title={this.state.ids.length>0?'确定要删除所选项？':'请先选择您要删除的项？'} onConfirm={this.state.ids.length>0?this.delRule:()=>{}} okText=\"确定\" cancelText=\"取消\">\r\n                    <Button style={{marginLeft: \"10px\"}}>\r\n                      <i className=\"fa fa-minus-square-o\" aria-hidden=\"true\"></i>\r\n                      <span style={{marginLeft:\"5px\"}}>删除</span>\r\n                    </Button>\r\n                  </Popconfirm>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <div css={{paddingTop:\"10px\"}}>\r\n                    <WySpin isSpining={this.state.isSpining}>\r\n                      <WyTable\r\n                          pageSize={this.state.pageSize}\r\n                          onShowSizeChange={this.pageSizeChange}\r\n                          rowSelection={rowSelection}\r\n                          xData={this.state.xData?this.state.xData:[]}\r\n                          yData={this.state.yData?this.state.yData:[]}\r\n                        />\r\n                    </WySpin>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n          </Amodule>\r\n        </div>\r\n        <Drawer\r\n          title=\"数据源配置\"\r\n          placement=\"right\"\r\n          onClose={this.onClose}\r\n          visible={this.state.visible}\r\n          width={\"80%\"}\r\n        >\r\n        {\r\n          // <div css={{padding: \"20px\"}}>\r\n          //   <span css={{verticalAlign:\"top\"}}>数据实例: </span><TextArea autosize={{ minRows: 2, maxRows: 6 }} value={this.state.message} onChange={this.messageChange} css={{width:\"80%\"}} />\r\n          // </div>\r\n          // <div css={{padding: \"20px\"}}>\r\n          //   <span css={{verticalAlign:\"top\"}}>Grok解析: </span><TextArea autosize={{ minRows: 2, maxRows: 6 }} value={this.state.pattern} onChange={this.patternChange}  css={{width:\"80%\"}} />\r\n          // </div>\r\n          // <div css={{padding: \"20px\"}}>\r\n          //   <Button onClick={this.doAnalysis}>解析</Button>\r\n          // </div>\r\n          // <div css={{padding: \"20px\"}}>\r\n          //   <span css={{verticalAlign:\"top\"}}>解析结果：</span><span css={{overflow:\"auto\",display:\"inline-block\",width: \"80%\",minHeight:\"200px\",border:\"rgba(255,255,255,0.2) solid 1px\"}}>\r\n          //     <pre>{str}</pre>\r\n          //   </span>\r\n          // </div>\r\n          // <Button  type=\"primary\" onClick={this.readySave} >保存Grok解析</Button>\r\n        }\r\n          <div css={{padding: \"20px\"}}>\r\n            <span css={{verticalAlign:\"top\"}}>数据实例: </span>\r\n            {\r\n              this.state.isSelectModel ?\r\n              <div css={{padding:\"5px 0 0 10px\",width:\"80%\",display:\"inline-block\",border:\"#22c960 solid 1px\",position:\"relative\",minHeight:\"50px\",borderRadius:\"5px\"}}>\r\n                <span css={{wordWrap:\"break-word\"}}>\r\n                  {\r\n                    this.state.wholeArr.length>0?\r\n                    this.state.wholeArr.map(item=>{\r\n                        return <span style={{ background:item.selected?'rgba(204,255,0,0.8)':'none'}} key={item.id}>{item.str}</span>\r\n                    })\r\n                    :\r\n                    this.state.messageForSelectModel\r\n                  }\r\n                </span>\r\n                <TextArea\r\n                  autosize={{ minRows: 2, maxRows: 6 }}\r\n                  value={this.state.messageForSelectModel}\r\n                  onSelect={this.selectWord}\r\n                  css={{border: \"none\",position:\"absolute\",left:\"0px\",top:\"0px\",background:\"none\",color:\"rgba(123,111,255,0.5)\"}}\r\n                />\r\n              </div>\r\n\r\n              :\r\n              <TextArea\r\n                autosize={{ minRows: 2, maxRows: 6 }}\r\n                value={this.state.message}\r\n                onChange={this.messageChange}\r\n                css={{width:\"80%\"}}\r\n              />\r\n            }\r\n          </div>\r\n          <div css={{paddingLeft:\"100px\"}}>\r\n            <span><Checkbox onChange={this.isSelectModelChange} checked={this.state.isSelectModel}>划词匹配</Checkbox></span>\r\n            {\r\n              this.state.wholeArr.length>0?\r\n              <span><Button onClick={this.clearData} size=\"small\" type=\"primary\">重新选择</Button></span>\r\n              :\r\n              ''\r\n            }\r\n          </div>\r\n          <div css={{padding: \"20px\"}}>\r\n            <span css={{verticalAlign:\"top\"}}>Grok解析: </span><TextArea autosize={{ minRows: 2, maxRows: 6 }} value={this.state.pattern} onChange={this.patternChange}  css={{width:\"80%\"}} />\r\n          </div>\r\n          <div css={{padding: \"20px\"}}>\r\n            <Button onClick={this.doAnalysis}>解析</Button>\r\n          </div>\r\n          <div css={{padding: \"20px\"}}>\r\n            <span css={{verticalAlign:\"top\"}}>解析结果：</span><span css={{overflow:\"auto\",display:\"inline-block\",width: \"80%\",minHeight:\"200px\",border:\"rgba(255,255,255,0.2) solid 1px\"}}>\r\n              <pre>{\r\n                str\r\n              }</pre>\r\n            </span>\r\n          </div>\r\n          <Button  type=\"primary\" onClick={this.readySave} >保存Grok解析规则</Button>\r\n        </Drawer>\r\n        <Modal\r\n          title=\"字段提取\"\r\n          visible={this.state.modal2visible}\r\n          onOk={this.handle2Ok}\r\n          onCancel={this.handle2Cancel}\r\n        >\r\n          <p>字段名：<Input\r\n            css={{width:\"80%\"}}\r\n            value={this.state.curSnippet.name}\r\n            onChange={this.curSnippetChange}\r\n          /></p>\r\n          <p>匹配对象：{this.state.curSnippet.str}</p>\r\n        </Modal>\r\n        <Modal\r\n          title=\"为规则命名\"\r\n          visible={this.state.modalVisible}\r\n          onOk={this.saveRule}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n            <div css={{flex:\"0 0 100px\"}}>规则名称：</div>\r\n            <div css={{flex:\"1 1 auto\"}}><Input value={this.state.rulename} onChange={this.rulenameChange}/></div>\r\n          </div>\r\n          <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n            <div css={{flex:\"0 0 100px\"}}>规则描述：</div>\r\n            <div css={{flex:\"1 1 auto\"}}><TextArea value={this.state.ruledes} onChange={this.ruledesChange}/></div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Manage\r\n"]},"metadata":{},"sourceType":"module"}