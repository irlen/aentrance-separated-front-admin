{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _component = require('./component');\n\nvar _component2 = _interopRequireDefault(_component);\n\nvar _mapv = require('mapv');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MapvLayer = function (_Component) {\n  _inherits(MapvLayer, _Component);\n\n  function MapvLayer(args) {\n    _classCallCheck(this, MapvLayer);\n\n    var _this = _possibleConstructorReturn(this, (MapvLayer.__proto__ || Object.getPrototypeOf(MapvLayer)).call(this, args));\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(MapvLayer, [{\n    key: 'handleClick',\n    value: function handleClick(id) {\n      this.props.onClick && this.props.onClick(id);\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var preData = JSON.stringify(prevProps.data);\n      var data = JSON.stringify(this.props.data);\n      var preOptions = JSON.stringify(prevProps.options);\n      var options = JSON.stringify(this.props.options);\n\n      if (preData != data || !this.map || preOptions != options) {\n        this.initialize();\n      }\n    }\n  }, {\n    key: 'initialize',\n    value: function initialize() {\n      var _this2 = this;\n\n      var self = this;\n      var map = this.props.map;\n\n      if (!map) {\n        return;\n      }\n\n      this.map = map;\n\n      if (!this._createLayer) {\n        this.createLayers();\n      }\n\n      if (this.props.options.autoViewport) {\n        var getPoint = function getPoint(coordinate) {\n          if (_this2.props.options.coordType === 'bd09mc') {\n            return projection.pointToLngLat(new BMap.Pixel(coordinate[0], coordinate[1]));\n          } else {\n            return new BMap.Point(coordinate[0], coordinate[1]);\n          }\n        };\n\n        var projection = map.getMapType().getProjection();\n        var points = [];\n        this.props.data.map(function (item) {\n          if (item.geometry.type === 'Point') {\n            points.push(getPoint(item.geometry.coordinates));\n          } else if (item.geometry.type === 'Polygon') {\n            item.geometry.coordinates[0].map(function (item) {\n              points.push(getPoint(item));\n            });\n          }\n        });\n        map.setViewport(points, this.props.options.viewportOptions);\n      }\n\n      this.dataSet.set(this.props.data);\n      this.layer.update({\n        options: this.props.options\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.initialize();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.layer.destroy();\n      this.layer = null;\n    }\n  }, {\n    key: 'createLayers',\n    value: function createLayers() {\n      this._createLayer = true;\n      var map = this.map;\n      var self = this;\n      var dataSet = this.dataSet = new _mapv.DataSet([]);\n      this.layer = new _mapv.baiduMapLayer(map, dataSet, {});\n    }\n  }], [{\n    key: 'defaultProps',\n    get: function get() {\n      return {};\n    }\n  }]);\n\n  return MapvLayer;\n}(_component2.default);\n\nexports.default = MapvLayer;","map":null,"metadata":{},"sourceType":"script"}