{"ast":null,"code":"import \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\nimport \"antd/es/row/style\";\nimport _Row from \"antd/es/row\";\nimport \"antd/es/col/style\";\nimport _Col from \"antd/es/col\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/popconfirm/style\";\nimport _Popconfirm from \"antd/es/popconfirm\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\nimport \"antd/es/select/style\";\nimport _Select from \"antd/es/select\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/tabs/style\";\nimport _Tabs from \"antd/es/tabs\";\nimport _styled from \"@emotion/styled-base\";\nvar _jsxFileName = \"/industry/app/src/SystemBase/AutoSet.js\";\n\n/**  @jsx jsx */\nimport React, { Component } from 'react';\nimport { jsx, css } from '@emotion/core';\nimport _ from 'lodash';\nimport WyTable from '../components/WyTable';\nimport LogSet from './LogSet';\nimport { Amodule } from '../components/Amodule';\nimport { wyAxiosPost } from '../components/WyAxios';\nimport WySpin from '../components/WySpin';\nimport { singleIp, singlePort, forName } from '../components/RegExp';\nconst TabPane = _Tabs.TabPane;\nconst TextArea = _Input.TextArea;\nconst Option = _Select.Option;\nconst Password = _Input.Password;\n\nlet AddLogSetDom = _styled(\"div\", {\n  target: \"e1q86gpo0\",\n  label: \"AddLogSetDom\"\n})(process.env.NODE_ENV === \"production\" ? {\n  name: \"11clpqt\",\n  styles: \"line-height:40px;border:rgba(255,255,255,0.2) dashed 1px;border-radius:5px;text-align:center;cursor:pointer;margin-top:10px;&:hover{background:rgba(0,0,0,0.2);}&:active{background:rgba(0,0,0,0.4);}\"\n} : {\n  name: \"11clpqt\",\n  styles: \"line-height:40px;border:rgba(255,255,255,0.2) dashed 1px;border-radius:5px;text-align:center;cursor:pointer;margin-top:10px;&:hover{background:rgba(0,0,0,0.2);}&:active{background:rgba(0,0,0,0.4);}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n\nvar _ref = process.env.NODE_ENV === \"production\" ? {\n  name: \"dwxzp7-AutoSet\",\n  styles: \"margin-left:5px;label:AutoSet;\"\n} : {\n  name: \"dwxzp7-AutoSet\",\n  styles: \"margin-left:5px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref2 = process.env.NODE_ENV === \"production\" ? {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\"\n} : {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref3 = process.env.NODE_ENV === \"production\" ? {\n  name: \"aqxe91-AutoSet\",\n  styles: \"padding-top:10px;label:AutoSet;\"\n} : {\n  name: \"aqxe91-AutoSet\",\n  styles: \"padding-top:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref4 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref5 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref6 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref7 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1hi5xdp-AutoSet\",\n  styles: \"width:420px;label:AutoSet;\"\n} : {\n  name: \"1hi5xdp-AutoSet\",\n  styles: \"width:420px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref8 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref9 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbUJhc2UvQXV0b1NldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwb0J5QiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9TeXN0ZW1CYXNlL0F1dG9TZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogIEBqc3gganN4ICovXHJcbmltcG9ydCBSZWFjdCAseyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgRHJhd2VyLCBCdXR0b24sIFJvdywgQ29sLCBJbnB1dCwgVGFicywgU2VsZWN0LCBQb3Bjb25maXJtLCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0ICBXeVRhYmxlICBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBMb2dTZXQgZnJvbSAnLi9Mb2dTZXQnXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBzaW5nbGVJcCwgc2luZ2xlUG9ydCwgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5jb25zdCBUYWJQYW5lID0gVGFicy5UYWJQYW5lXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgT3B0aW9uID0gU2VsZWN0Lk9wdGlvblxyXG5jb25zdCBQYXNzd29yZCA9IElucHV0LlBhc3N3b3JkXHJcbmxldCBBZGRMb2dTZXREb20gPSBzdHlsZWQuZGl2KHtcclxuICBsaW5lSGVpZ2h0OlwiNDBweFwiLFxyXG4gIGJvcmRlcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgZGFzaGVkIDFweFwiLFxyXG4gIGJvcmRlclJhZGl1czpcIjVweFwiLFxyXG4gIHRleHRBbGlnbjpcImNlbnRlclwiLFxyXG4gIGN1cnNvcjpcInBvaW50ZXJcIixcclxuICBtYXJnaW5Ub3A6XCIxMHB4XCIsXHJcbiAgJyY6aG92ZXInOntcclxuICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjIpXCJcclxuICB9LFxyXG4gICcmOmFjdGl2ZSc6e1xyXG4gICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsMCwwLDAuNClcIlxyXG4gIH1cclxufSlcclxuY2xhc3MgQXV0b1NldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuXHJcbiAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgc291cmNlZGVzOicnLFxyXG4gICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICBob3N0aXA6JycsIC8v5Li75py6SXBcclxuICAgIGhvc3R1c2VyOicnLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgaG9zdHBvcnQ6JycsIC8v5Li75py656uv5Y+jXHJcbiAgICBzeXNwbGF0Zm9ybTonbGludXgnLC8v5Li75py657O757ufXHJcbiAgICBsb2dMaXN0OltdLCAgLy/ml6Xlv5fliJfooahcclxuICAgIHNldHlwZTonaGFuZHNldCcsXHJcblxyXG4gICAgYWN0aXZlS2V5OicxJyxcclxuXHJcblxyXG4gICAgcGFnZVNpemU6NSxcclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcbiAgICBpZHM6W10sXHJcbiAgICB4RGF0YTogW10sXHJcbiAgICB5RGF0YTogW10sXHJcbiAgICBpZDonJyxcclxuICAgIC8v5paw5aKe5YiG57uEXHJcbiAgICBpc05ldzogZmFsc2UsXHJcbiAgICBnX25hbWU6JycsXHJcbiAgICBnX2RlczonJyxcclxuICAgIGdyb3VwTGlzdDpbXSxcclxuICAgIHNlbGdyb3VwOltdLFxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRTb3VyY2UoKVxyXG4gICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgfVxyXG4gIHNlbGdyb3VwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IHZhbHVlXHJcbiAgICBjb25zdCBpZEFyciA9IHRoaXMubmFtZVRvSWQodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2dfbmFtZScsbmFtZUFyciwnaWQnKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZ3JvdXA6IF8uY2xvbmVEZWVwKGlkQXJyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL25hbWXlkoxpZOi9rOaNolxyXG4gIG5hbWVUb0lkID0gKGFycixuYW1lRmllbGQsbmFtZUFycixpZEZpZWxkKT0+e1xyXG4gICAgY29uc3QgaWRBcnIgPSBbXVxyXG4gICAgaWYobmFtZUFyciAmJiBuYW1lQXJyLmxlbmd0aD4wKXtcclxuICAgICAgbmFtZUFyci5tYXAoaXRlbT0+e1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IF8uZmluZChhcnIsKG8pPT57cmV0dXJuIG9bbmFtZUZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgaWRBcnIucHVzaChvYmpbaWRGaWVsZF0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWRBcnJcclxuICB9XHJcbiAgaWRUb05hbWUgPSAoYXJyLGlkRmllbGQsaWRBcnIsbmFtZUZpZWxkKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IFtdXHJcbiAgICBpZihpZEFyciAmJiBpZEFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlkQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3Qgb2JqID0gXy5maW5kKGFyciwobyk9PntyZXR1cm4gb1tpZEZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgbmFtZUFyci5wdXNoKG9ialtuYW1lRmllbGRdKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVBcnJcclxuICB9XHJcbiAgLy/ojrflj5bliIbnu4RcclxuICBnZXRHcm91cCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBMaXN0OiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5paw5aKe5YiG57uEXHJcbiAgYWRkTmV3R3JvdXAgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lj5bmtojmlrDlop5cclxuICBhZGRDYW5jZWwgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICBnX2RlczonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOWIhue7hFxyXG4gIGFkZE9rID0gKCk9PntcclxuICAgIGNvbnN0IHsgZ19uYW1lLGdfZGVzIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihnX25hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfnu4TlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB7Z19uYW1lLGdfZGVzfVxyXG4gICAgICB3eUF4aW9zUG9zdCgnR3JvdXAvc2F2ZUdyb3VwJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICAgICAgICBnX2RlczonJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19uYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBnX2Rlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19kZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pWw5o2u5rqQXHJcbiAgZ2V0U291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRTb3VyY2UnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnZWRpdCcsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PntcclxuICAgICAgICAgIGxldCBkb20gPSAnJ1xyXG4gICAgICAgICAgaWYocmVjb3JkLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5a6J6KOFXCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5kb0luc3RhbGwocmVjb3JkLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS13cmVuY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaCqOehruWumuimgeWNuOi9veWQlz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXsoKT0+dGhpcy5kb1VuaW5zdGFsbChyZWNvcmQuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpPT57IHJldHVybiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5Y246L29XCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hhaW4tYnJva2VuXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIH1lbHNlIGlmKHJlY29yZC5zeXNwbGF0Zm9ybSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZG9tXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBpc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/kuIvovb3lronoo4XljIVcclxuICBkb3duTG9hZEluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2Rvd25sb2FkJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIGEuZG93bmxvYWQgPSBcImludGltYXRlbG9nX2luc3RhbGwuemlwXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5LiL6L296YWN572u5paH5Lu2XHJcbiAgZG93bkxvYWRGaWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS91cGxvYWRZYW1sJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIC8vYS5kb3dubG9hZCA9IFwiXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5a6J6KOFXHJcbiAgZG9JbnN0YWxsID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9pbnN0YWxsJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y246L29XHJcbiAgZG9Vbmluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VuaW5zdGFsbCcse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRTb3VyY2UgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldFNvdXJjZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGxvZ0xpc3QgPSByZXNwb25zZURhdGEubG9nTGlzdFxyXG4gICAgICBpZihsb2dMaXN0ICYmIGxvZ0xpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBsb2dMaXN0KXtcclxuICAgICAgICAgIGl0ZW0ubG9naXNzaW5nbGUgPSBpdGVtLmxvZ2lzc2luZ2xlID09PSd0cnVlJz90cnVlOmZhbHNlXHJcbiAgICAgICAgICBpdGVtLmxvZ2lzcmVyZWFkID0gaXRlbS5sb2dpc3JlcmVhZCA9PT0ndHJ1ZSc/dHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc291cmNlbmFtZSxcclxuICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgc2V0eXBlLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNlbGdyb3VwXHJcbiAgICAgIH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgICAgIHNldHlwZSxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc2VsZ3JvdXBcclxuICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICB0aGlzLnNob3dEcmF3ZXIoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGRhdGFDaGFuZ2UgPSAoZSxhcmcpPT57XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZSkpe1xyXG4gICAgICBpZihpdGVtID09PSBhcmcpe1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2FyZ106IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3BsYXRmb3JtQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgbGV0IHNldHlwZSA9IHRoaXMuc3RhdGUuc2V0eXBlXHJcbiAgICBpZih2YWx1ZSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgc2V0eXBlID0gJ2hhbmRzZXQnXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzeXNwbGF0Zm9ybTogdmFsdWUsXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicnLCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHNldHlwZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZXR5cGVDaGFuZ2UgPSAoc2V0eXBlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2V0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQWRkTG9nID0gKCk9PntcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBjb25zdCBjdXJMb2cgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICBsb2dwYXRoOicnLFxyXG4gICAgICBsb2dpc3JlcmVhZDogZmFsc2UsXHJcbiAgICAgIGxvZ2lzc2luZ2xlOiB0cnVlLFxyXG4gICAgICBsb2d0YWc6JycsXHJcbiAgICAgIGxvZ3J1bGU6W11cclxuICAgIH1cclxuICAgIGNvbnN0IGN1ckxvZ0xpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmxvZ0xpc3QpXHJcbiAgICBjdXJMb2dMaXN0LnB1c2goY3VyTG9nKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbG9nTGlzdDogWy4uLmN1ckxvZ0xpc3RdXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvRGVsZXRlTG9nID0gKGlkKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdC5zcGxpY2UoaSwxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGxvZ0xpc3Q6IFsuLi5jdXJMb2dMaXN0XVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVMb2cgPSAoaWQsYXJnLHZhbHVlKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdFtpXVthcmddID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2dMaXN0OiBbLi4uY3VyTG9nTGlzdF1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgICAgIHNvdXJjZWRlczonJyxcclxuXHJcbiAgICAgICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwOicnLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicyMicsIC8v5Li75py656uv5Y+jXHJcbiAgICAgICAgc3lzcGxhdGZvcm06J2xpbnV4JywvL+S4u+acuuezu+e7n1xyXG4gICAgICAgIGxvZ0xpc3Q6W10sICAvL+aXpeW/l+WIl+ihqFxyXG4gICAgICAgIHNldHlwZTonaGFuZHNldCcsXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgYWN0aXZlS2V5OicxJyxcclxuICAgICAgICBzZWxncm91cDpbXVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOaVsOaNrua6kFxyXG4gIGRvU2F2ZSA9ICgpPT57XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgIHNvdXJjZWRlcyxcclxuICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICBob3N0dXNlciwgLy/kuLvmnLrnlKjmiLflkI1cclxuICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgc3lzcGxhdGZvcm0sLy/kuLvmnLrns7vnu59cclxuICAgICAgbG9nTGlzdCwgIC8v5pel5b+X5YiX6KGoXHJcbiAgICAgIHNldHlwZSxcclxuICAgICAgaWQsXHJcbiAgICAgIHNlbGdyb3VwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgc291cmNlbmFtZSxcclxuICAgICAgc291cmNlZGVzLFxyXG4gICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgIGhvc3R1c2VyLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICBzeXNwbGF0Zm9ybSwvL+S4u+acuuezu+e7n1xyXG4gICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgc2V0eXBlLFxyXG4gICAgICBpZCxcclxuICAgICAgc2VsZ3JvdXBcclxuICAgIH1cclxuICAgIC8v5ZCI5rOV5oCn5qCh6aqMXHJcbiAgICBjb25zdCBlcnJvTGlzdCA9IFtdXHJcblxyXG4gICAgaWYoaW5mby5zb3VyY2VuYW1lID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+aVsOaNrua6kOWQjeensOS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZSBpZighIGZvck5hbWUudGVzdChpbmZvLnNvdXJjZW5hbWUpKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5pWw5o2u5rqQ5ZCN56ew5qC85byP5LiN5q2j56GuJylcclxuICAgIH1cclxuICAgIGlmKGluZm8uc2VsZ3JvdXAubGVuZ3RoID09PSAwKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5omA5bGe5YiG57uE5LiN6IO95Li656m6JylcclxuICAgIH1cclxuICAgIGlmKGluZm8uaG9zdGlwID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+S4u+acumlw5LiN6IO95Li656m6JylcclxuICAgIH1lbHNlIGlmKCEgc2luZ2xlSXAudGVzdChpbmZvLmhvc3RpcCkpe1xyXG4gICAgICBlcnJvTGlzdC5wdXNoKCfkuLvmnLppcOagvOW8j+S4jeato+ehricpXHJcbiAgICB9XHJcbiAgICBpZihpbmZvLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgaWYoaW5mby5ob3N0dXNlciA9PT0gJycpe1xyXG4gICAgICAgIGVycm9MaXN0LnB1c2goJ+eUqOaIt+WQjeS4jeiDveS4uuepuicpXHJcbiAgICAgIH1cclxuICAgICAgaWYoaW5mby5ob3N0cGFzc3dvcmQgPT09ICcnKXtcclxuICAgICAgICBlcnJvTGlzdC5wdXNoKCflr4bnoIHkuI3og73kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGluZm8uaG9zdHBvcnQgIT09ICcnICYmICghc2luZ2xlUG9ydC50ZXN0KGluZm8uaG9zdHBvcnQpKSl7XHJcbiAgICAgICAgZXJyb0xpc3QucHVzaCgnU1NI56uv5Y+j5peg5pWIJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaW5mby5sb2dMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+acqua3u+WKoOaXpeW/l+S/oeaBrycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGxvZ0xpc3Qpe1xyXG4gICAgICAgIGlmKGl0ZW0ubG9ncGF0aCA9PT0gJycgfHwgaXRlbS5sb2d0YWcgPT09ICcnKXtcclxuICAgICAgICAgIGVycm9MaXN0LnB1c2goJ+aXpeW/l+S/oeaBr+acquWhq+WGmeWujOaVtCcpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGVycm9MaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2Uvc2F2ZVNvdXJjZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIHRoaXMub25DbG9zZSgpXHJcbiAgICAgICAgICB0aGlzLmdldFNvdXJjZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGV0IHN0ciA9ICcnXHJcbiAgICAgIGVycm9MaXN0Lm1hcCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBzdHIgKz0gaW5kZXgrMSsnLicraXRlbSsnICAnXHJcbiAgICAgIH0pXHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZyhzdHIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v5Yig6ZmkXHJcbiAgZGVsU291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUuaWRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5JylcclxuICAgIH1lbHNle1xyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL2RlbFNvdXJjZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgdGFic0NoYW5nZSA9IChhY3RpdmVLZXkpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbGFzdFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbGFzdEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgLSAxXHJcbiAgICBsYXN0S2V5ID0gbGFzdEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IGxhc3RLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV4dFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbmV4dEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgKyAxXHJcbiAgICBuZXh0S2V5ID0gbmV4dEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IG5leHRLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGNvbnN0IHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RhdGUuaWRzXHJcbiAgICBjb25zdCByb3dTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHNlbGVjdGVkUm93S2V5cyxcclxuICAgICAgb25DaGFuZ2U6IChzZWxlY3RlZFJvd0tleXMpID0+IHtcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogc2VsZWN0ZWRSb3dLZXlzXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxTb3VyY2U6KCk9Pnt9fSBva1RleHQ9XCLnoa7lrppcIiBjYW5jZWxUZXh0PVwi5Y+W5raIXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17e21hcmdpbkxlZnQ6IFwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51cy1zcXVhcmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5Yig6ZmkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L1BvcGNvbmZpcm0+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3Rpb249e3Jvd1NlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YT90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLmlbDmja7mupDphY3nva5cIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgd2lkdGg9e1wiODAlXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICA8VGFicyBkZWZhdWx0QWN0aXZlS2V5PVwiMVwiIGFjdGl2ZUtleT17dGhpcy5zdGF0ZS5hY3RpdmVLZXl9IG9uQ2hhbmdlPXt0aGlzLnRhYnNDaGFuZ2V9PlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5Z+65pys5L+h5oGvXCIga2V5PVwiMVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5pWw5o2u5rqQ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuc291cmNlbmFtZX0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZW5hbWUnKX0gY3NzPXt7d2lkdGg6XCI0MjBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuaVsOaNrua6kOaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnNvdXJjZWRlc30gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZWRlcycpfSBjc3M9e3t3aWR0aDpcIjQyMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5omA5bGe5YiG57uE77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJtdWx0aXBsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsZWFzZSBzZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICczMjBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGdyb3VwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuaWRUb05hbWUodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2lkJyx0aGlzLnN0YXRlLnNlbGdyb3VwLCdnX25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ncm91cExpc3QgJiYgdGhpcy5zdGF0ZS5ncm91cExpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmdyb3VwTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0uaWR9IHZhbHVlPXtpdGVtLmdfbmFtZX0gdGl0bGU9e2l0ZW0uZ19uYW1lfT57aXRlbS5nX25hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc05ldz9cclxuICAgICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkTmV3R3JvdXB9IHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj4gPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5paw5aKe5YiG57uEPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzTmV3P1xyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luTGVmdDpcIjEwMHB4XCIsd2lkdGg6XCI0MjBweFwiLHBhZGRpbmc6XCIyMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbWFyZ2luVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCA4MHB4XCJ9fT7nu4TlkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5nX25hbWV9IG9uQ2hhbmdlPXt0aGlzLmdfbmFtZUNoYW5nZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLG1hcmdpblRvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgODBweFwifX0+5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuZ19kZXN9IG9uQ2hhbmdlPXt0aGlzLmdfZGVzQ2hhbmdlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e21hcmdpblRvcDpcIjIwcHhcIix0ZXh0QWxpZ246XCJyaWdodFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRDYW5jZWx9IHNpemU9XCJzbWFsbFwiIGNzcz17e21hcmdpblJpZ2h0OlwiMjBweFwifX0+5Y+W5raIPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRPa30gIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+56Gu5a6aPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuS4u+aculwiIGtleT1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuS4u+acuuWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RuYW1lfSBvbkNoYW5nZT17KGUpPT50aGlzLmRhdGFDaGFuZ2UoZSwnaG9zdG5hbWUnKX0gY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Puezu+e7n+W5s+WPsO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zeXNwbGF0Zm9ybUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J3dpbmRvd3MnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXdpbmRvd3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IFdpbmRvd3MgPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdsaW51eCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGludXhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IExpbnV4IDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7kuLvmnLppcO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RpcH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RpcCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybSA9PT0gJ2xpbnV4Jz9cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7nlKjmiLflkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHVzZXJ9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0dXNlcicpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5a+G56CB77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPFBhc3N3b3JkIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RwYXNzd29yZH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RwYXNzd29yZCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+U1NI56uv5Y+j77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHBsYWNlaG9sZGVyPSfpu5jorqTkuLoyMicgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHBvcnR9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0cG9ydCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5pel5b+XXCIga2V5PVwiM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Um93IGNzcz17e3RleHRBbGlnbjpcImNlbnRlclwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezh9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMilcIn19PuaWh+S7tui3r+W+hDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4xKVwifX0+5bqU55So5qCH6K+GPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXszfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjIpXCJ9fT7mmK/lkKbku47lpLTor7votbc8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezN9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMSlcIn19PuaYr+WQpuWNleihjOaXpeW/lzwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4yKVwifX0+6Kej5p6Q6KeE5YiZPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXsyfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjEpXCJ9fT7mk43kvZw8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dMaXN0ICYmIHRoaXMuc3RhdGUubG9nTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvZ0xpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2dTZXQgZG9EZWxldGVMb2c9e3RoaXMuZG9EZWxldGVMb2d9IHVwZGF0ZUxvZz17dGhpcy51cGRhdGVMb2d9IGtleT17aXRlbS5pZH0gZGF0YT17aXRlbX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDxBZGRMb2dTZXREb20+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmRvQWRkTG9nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0FkZExvZ1NldERvbT5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuWuieijheaWueW8j1wiIGtleT1cIjRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuWuieijheaWueW8j++8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3lzcGxhdGZvcm0gPT09ICd3aW5kb3dzJz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J2hhbmRzZXQnPjxpIGNsYXNzTmFtZT1cImZhIGZhLWhhbmQtcG9pbnRlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiDmiYvliqg8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdoYW5kc2V0Jz48aSBjbGFzc05hbWU9XCJmYSBmYS1oYW5kLXBvaW50ZXItb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4g5omL5YqoPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT0nYXV0b3NldCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFza3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IOiHquWKqDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgIDwvVGFicz5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5vbkNsb3NlfT7lj5bmtog8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVLZXkgPT09ICcxJz9cclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmxhc3RTdGVwfSA+5LiK5LiA5q2lPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlS2V5ID09PSAnNCc/XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMTBweFwifX0gb25DbGljaz17dGhpcy5uZXh0U3RlcH0gPuS4i+S4gOatpTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gJzQnP1xyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmRvU2F2ZX0gdHlwZT1cInByaW1hcnlcIiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwifX0+5L+d5a2YPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0b1NldFxyXG4iXX0= */\"\n};\n\nvar _ref10 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref11 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1hi5xdp-AutoSet\",\n  styles: \"width:420px;label:AutoSet;\"\n} : {\n  name: \"1hi5xdp-AutoSet\",\n  styles: \"width:420px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref12 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbUJhc2UvQXV0b1NldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2b0J1QiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9TeXN0ZW1CYXNlL0F1dG9TZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogIEBqc3gganN4ICovXHJcbmltcG9ydCBSZWFjdCAseyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgRHJhd2VyLCBCdXR0b24sIFJvdywgQ29sLCBJbnB1dCwgVGFicywgU2VsZWN0LCBQb3Bjb25maXJtLCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0ICBXeVRhYmxlICBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBMb2dTZXQgZnJvbSAnLi9Mb2dTZXQnXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBzaW5nbGVJcCwgc2luZ2xlUG9ydCwgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5jb25zdCBUYWJQYW5lID0gVGFicy5UYWJQYW5lXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgT3B0aW9uID0gU2VsZWN0Lk9wdGlvblxyXG5jb25zdCBQYXNzd29yZCA9IElucHV0LlBhc3N3b3JkXHJcbmxldCBBZGRMb2dTZXREb20gPSBzdHlsZWQuZGl2KHtcclxuICBsaW5lSGVpZ2h0OlwiNDBweFwiLFxyXG4gIGJvcmRlcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgZGFzaGVkIDFweFwiLFxyXG4gIGJvcmRlclJhZGl1czpcIjVweFwiLFxyXG4gIHRleHRBbGlnbjpcImNlbnRlclwiLFxyXG4gIGN1cnNvcjpcInBvaW50ZXJcIixcclxuICBtYXJnaW5Ub3A6XCIxMHB4XCIsXHJcbiAgJyY6aG92ZXInOntcclxuICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjIpXCJcclxuICB9LFxyXG4gICcmOmFjdGl2ZSc6e1xyXG4gICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsMCwwLDAuNClcIlxyXG4gIH1cclxufSlcclxuY2xhc3MgQXV0b1NldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuXHJcbiAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgc291cmNlZGVzOicnLFxyXG4gICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICBob3N0aXA6JycsIC8v5Li75py6SXBcclxuICAgIGhvc3R1c2VyOicnLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgaG9zdHBvcnQ6JycsIC8v5Li75py656uv5Y+jXHJcbiAgICBzeXNwbGF0Zm9ybTonbGludXgnLC8v5Li75py657O757ufXHJcbiAgICBsb2dMaXN0OltdLCAgLy/ml6Xlv5fliJfooahcclxuICAgIHNldHlwZTonaGFuZHNldCcsXHJcblxyXG4gICAgYWN0aXZlS2V5OicxJyxcclxuXHJcblxyXG4gICAgcGFnZVNpemU6NSxcclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcbiAgICBpZHM6W10sXHJcbiAgICB4RGF0YTogW10sXHJcbiAgICB5RGF0YTogW10sXHJcbiAgICBpZDonJyxcclxuICAgIC8v5paw5aKe5YiG57uEXHJcbiAgICBpc05ldzogZmFsc2UsXHJcbiAgICBnX25hbWU6JycsXHJcbiAgICBnX2RlczonJyxcclxuICAgIGdyb3VwTGlzdDpbXSxcclxuICAgIHNlbGdyb3VwOltdLFxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRTb3VyY2UoKVxyXG4gICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgfVxyXG4gIHNlbGdyb3VwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IHZhbHVlXHJcbiAgICBjb25zdCBpZEFyciA9IHRoaXMubmFtZVRvSWQodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2dfbmFtZScsbmFtZUFyciwnaWQnKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZ3JvdXA6IF8uY2xvbmVEZWVwKGlkQXJyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL25hbWXlkoxpZOi9rOaNolxyXG4gIG5hbWVUb0lkID0gKGFycixuYW1lRmllbGQsbmFtZUFycixpZEZpZWxkKT0+e1xyXG4gICAgY29uc3QgaWRBcnIgPSBbXVxyXG4gICAgaWYobmFtZUFyciAmJiBuYW1lQXJyLmxlbmd0aD4wKXtcclxuICAgICAgbmFtZUFyci5tYXAoaXRlbT0+e1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IF8uZmluZChhcnIsKG8pPT57cmV0dXJuIG9bbmFtZUZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgaWRBcnIucHVzaChvYmpbaWRGaWVsZF0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWRBcnJcclxuICB9XHJcbiAgaWRUb05hbWUgPSAoYXJyLGlkRmllbGQsaWRBcnIsbmFtZUZpZWxkKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IFtdXHJcbiAgICBpZihpZEFyciAmJiBpZEFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlkQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3Qgb2JqID0gXy5maW5kKGFyciwobyk9PntyZXR1cm4gb1tpZEZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgbmFtZUFyci5wdXNoKG9ialtuYW1lRmllbGRdKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVBcnJcclxuICB9XHJcbiAgLy/ojrflj5bliIbnu4RcclxuICBnZXRHcm91cCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBMaXN0OiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5paw5aKe5YiG57uEXHJcbiAgYWRkTmV3R3JvdXAgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lj5bmtojmlrDlop5cclxuICBhZGRDYW5jZWwgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICBnX2RlczonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOWIhue7hFxyXG4gIGFkZE9rID0gKCk9PntcclxuICAgIGNvbnN0IHsgZ19uYW1lLGdfZGVzIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihnX25hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfnu4TlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB7Z19uYW1lLGdfZGVzfVxyXG4gICAgICB3eUF4aW9zUG9zdCgnR3JvdXAvc2F2ZUdyb3VwJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICAgICAgICBnX2RlczonJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19uYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBnX2Rlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19kZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pWw5o2u5rqQXHJcbiAgZ2V0U291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRTb3VyY2UnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnZWRpdCcsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PntcclxuICAgICAgICAgIGxldCBkb20gPSAnJ1xyXG4gICAgICAgICAgaWYocmVjb3JkLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5a6J6KOFXCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5kb0luc3RhbGwocmVjb3JkLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS13cmVuY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaCqOehruWumuimgeWNuOi9veWQlz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXsoKT0+dGhpcy5kb1VuaW5zdGFsbChyZWNvcmQuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpPT57IHJldHVybiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5Y246L29XCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hhaW4tYnJva2VuXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIH1lbHNlIGlmKHJlY29yZC5zeXNwbGF0Zm9ybSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZG9tXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBpc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/kuIvovb3lronoo4XljIVcclxuICBkb3duTG9hZEluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2Rvd25sb2FkJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIGEuZG93bmxvYWQgPSBcImludGltYXRlbG9nX2luc3RhbGwuemlwXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5LiL6L296YWN572u5paH5Lu2XHJcbiAgZG93bkxvYWRGaWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS91cGxvYWRZYW1sJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIC8vYS5kb3dubG9hZCA9IFwiXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5a6J6KOFXHJcbiAgZG9JbnN0YWxsID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9pbnN0YWxsJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y246L29XHJcbiAgZG9Vbmluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VuaW5zdGFsbCcse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRTb3VyY2UgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldFNvdXJjZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGxvZ0xpc3QgPSByZXNwb25zZURhdGEubG9nTGlzdFxyXG4gICAgICBpZihsb2dMaXN0ICYmIGxvZ0xpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBsb2dMaXN0KXtcclxuICAgICAgICAgIGl0ZW0ubG9naXNzaW5nbGUgPSBpdGVtLmxvZ2lzc2luZ2xlID09PSd0cnVlJz90cnVlOmZhbHNlXHJcbiAgICAgICAgICBpdGVtLmxvZ2lzcmVyZWFkID0gaXRlbS5sb2dpc3JlcmVhZCA9PT0ndHJ1ZSc/dHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc291cmNlbmFtZSxcclxuICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgc2V0eXBlLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNlbGdyb3VwXHJcbiAgICAgIH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgICAgIHNldHlwZSxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc2VsZ3JvdXBcclxuICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICB0aGlzLnNob3dEcmF3ZXIoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGRhdGFDaGFuZ2UgPSAoZSxhcmcpPT57XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZSkpe1xyXG4gICAgICBpZihpdGVtID09PSBhcmcpe1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2FyZ106IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3BsYXRmb3JtQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgbGV0IHNldHlwZSA9IHRoaXMuc3RhdGUuc2V0eXBlXHJcbiAgICBpZih2YWx1ZSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgc2V0eXBlID0gJ2hhbmRzZXQnXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzeXNwbGF0Zm9ybTogdmFsdWUsXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicnLCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHNldHlwZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZXR5cGVDaGFuZ2UgPSAoc2V0eXBlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2V0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQWRkTG9nID0gKCk9PntcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBjb25zdCBjdXJMb2cgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICBsb2dwYXRoOicnLFxyXG4gICAgICBsb2dpc3JlcmVhZDogZmFsc2UsXHJcbiAgICAgIGxvZ2lzc2luZ2xlOiB0cnVlLFxyXG4gICAgICBsb2d0YWc6JycsXHJcbiAgICAgIGxvZ3J1bGU6W11cclxuICAgIH1cclxuICAgIGNvbnN0IGN1ckxvZ0xpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmxvZ0xpc3QpXHJcbiAgICBjdXJMb2dMaXN0LnB1c2goY3VyTG9nKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbG9nTGlzdDogWy4uLmN1ckxvZ0xpc3RdXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvRGVsZXRlTG9nID0gKGlkKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdC5zcGxpY2UoaSwxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGxvZ0xpc3Q6IFsuLi5jdXJMb2dMaXN0XVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVMb2cgPSAoaWQsYXJnLHZhbHVlKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdFtpXVthcmddID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2dMaXN0OiBbLi4uY3VyTG9nTGlzdF1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgICAgIHNvdXJjZWRlczonJyxcclxuXHJcbiAgICAgICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwOicnLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicyMicsIC8v5Li75py656uv5Y+jXHJcbiAgICAgICAgc3lzcGxhdGZvcm06J2xpbnV4JywvL+S4u+acuuezu+e7n1xyXG4gICAgICAgIGxvZ0xpc3Q6W10sICAvL+aXpeW/l+WIl+ihqFxyXG4gICAgICAgIHNldHlwZTonaGFuZHNldCcsXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgYWN0aXZlS2V5OicxJyxcclxuICAgICAgICBzZWxncm91cDpbXVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOaVsOaNrua6kFxyXG4gIGRvU2F2ZSA9ICgpPT57XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgIHNvdXJjZWRlcyxcclxuICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICBob3N0dXNlciwgLy/kuLvmnLrnlKjmiLflkI1cclxuICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgc3lzcGxhdGZvcm0sLy/kuLvmnLrns7vnu59cclxuICAgICAgbG9nTGlzdCwgIC8v5pel5b+X5YiX6KGoXHJcbiAgICAgIHNldHlwZSxcclxuICAgICAgaWQsXHJcbiAgICAgIHNlbGdyb3VwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgc291cmNlbmFtZSxcclxuICAgICAgc291cmNlZGVzLFxyXG4gICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgIGhvc3R1c2VyLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICBzeXNwbGF0Zm9ybSwvL+S4u+acuuezu+e7n1xyXG4gICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgc2V0eXBlLFxyXG4gICAgICBpZCxcclxuICAgICAgc2VsZ3JvdXBcclxuICAgIH1cclxuICAgIC8v5ZCI5rOV5oCn5qCh6aqMXHJcbiAgICBjb25zdCBlcnJvTGlzdCA9IFtdXHJcblxyXG4gICAgaWYoaW5mby5zb3VyY2VuYW1lID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+aVsOaNrua6kOWQjeensOS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZSBpZighIGZvck5hbWUudGVzdChpbmZvLnNvdXJjZW5hbWUpKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5pWw5o2u5rqQ5ZCN56ew5qC85byP5LiN5q2j56GuJylcclxuICAgIH1cclxuICAgIGlmKGluZm8uc2VsZ3JvdXAubGVuZ3RoID09PSAwKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5omA5bGe5YiG57uE5LiN6IO95Li656m6JylcclxuICAgIH1cclxuICAgIGlmKGluZm8uaG9zdGlwID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+S4u+acumlw5LiN6IO95Li656m6JylcclxuICAgIH1lbHNlIGlmKCEgc2luZ2xlSXAudGVzdChpbmZvLmhvc3RpcCkpe1xyXG4gICAgICBlcnJvTGlzdC5wdXNoKCfkuLvmnLppcOagvOW8j+S4jeato+ehricpXHJcbiAgICB9XHJcbiAgICBpZihpbmZvLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgaWYoaW5mby5ob3N0dXNlciA9PT0gJycpe1xyXG4gICAgICAgIGVycm9MaXN0LnB1c2goJ+eUqOaIt+WQjeS4jeiDveS4uuepuicpXHJcbiAgICAgIH1cclxuICAgICAgaWYoaW5mby5ob3N0cGFzc3dvcmQgPT09ICcnKXtcclxuICAgICAgICBlcnJvTGlzdC5wdXNoKCflr4bnoIHkuI3og73kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGluZm8uaG9zdHBvcnQgIT09ICcnICYmICghc2luZ2xlUG9ydC50ZXN0KGluZm8uaG9zdHBvcnQpKSl7XHJcbiAgICAgICAgZXJyb0xpc3QucHVzaCgnU1NI56uv5Y+j5peg5pWIJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaW5mby5sb2dMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+acqua3u+WKoOaXpeW/l+S/oeaBrycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGxvZ0xpc3Qpe1xyXG4gICAgICAgIGlmKGl0ZW0ubG9ncGF0aCA9PT0gJycgfHwgaXRlbS5sb2d0YWcgPT09ICcnKXtcclxuICAgICAgICAgIGVycm9MaXN0LnB1c2goJ+aXpeW/l+S/oeaBr+acquWhq+WGmeWujOaVtCcpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGVycm9MaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2Uvc2F2ZVNvdXJjZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIHRoaXMub25DbG9zZSgpXHJcbiAgICAgICAgICB0aGlzLmdldFNvdXJjZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGV0IHN0ciA9ICcnXHJcbiAgICAgIGVycm9MaXN0Lm1hcCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBzdHIgKz0gaW5kZXgrMSsnLicraXRlbSsnICAnXHJcbiAgICAgIH0pXHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZyhzdHIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v5Yig6ZmkXHJcbiAgZGVsU291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUuaWRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5JylcclxuICAgIH1lbHNle1xyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL2RlbFNvdXJjZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgdGFic0NoYW5nZSA9IChhY3RpdmVLZXkpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbGFzdFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbGFzdEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgLSAxXHJcbiAgICBsYXN0S2V5ID0gbGFzdEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IGxhc3RLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV4dFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbmV4dEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgKyAxXHJcbiAgICBuZXh0S2V5ID0gbmV4dEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IG5leHRLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGNvbnN0IHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RhdGUuaWRzXHJcbiAgICBjb25zdCByb3dTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHNlbGVjdGVkUm93S2V5cyxcclxuICAgICAgb25DaGFuZ2U6IChzZWxlY3RlZFJvd0tleXMpID0+IHtcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogc2VsZWN0ZWRSb3dLZXlzXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxTb3VyY2U6KCk9Pnt9fSBva1RleHQ9XCLnoa7lrppcIiBjYW5jZWxUZXh0PVwi5Y+W5raIXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17e21hcmdpbkxlZnQ6IFwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51cy1zcXVhcmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5Yig6ZmkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L1BvcGNvbmZpcm0+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3Rpb249e3Jvd1NlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YT90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLmlbDmja7mupDphY3nva5cIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgd2lkdGg9e1wiODAlXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICA8VGFicyBkZWZhdWx0QWN0aXZlS2V5PVwiMVwiIGFjdGl2ZUtleT17dGhpcy5zdGF0ZS5hY3RpdmVLZXl9IG9uQ2hhbmdlPXt0aGlzLnRhYnNDaGFuZ2V9PlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5Z+65pys5L+h5oGvXCIga2V5PVwiMVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5pWw5o2u5rqQ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuc291cmNlbmFtZX0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZW5hbWUnKX0gY3NzPXt7d2lkdGg6XCI0MjBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuaVsOaNrua6kOaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnNvdXJjZWRlc30gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZWRlcycpfSBjc3M9e3t3aWR0aDpcIjQyMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5omA5bGe5YiG57uE77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJtdWx0aXBsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsZWFzZSBzZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICczMjBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGdyb3VwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuaWRUb05hbWUodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2lkJyx0aGlzLnN0YXRlLnNlbGdyb3VwLCdnX25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ncm91cExpc3QgJiYgdGhpcy5zdGF0ZS5ncm91cExpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmdyb3VwTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0uaWR9IHZhbHVlPXtpdGVtLmdfbmFtZX0gdGl0bGU9e2l0ZW0uZ19uYW1lfT57aXRlbS5nX25hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc05ldz9cclxuICAgICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkTmV3R3JvdXB9IHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj4gPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5paw5aKe5YiG57uEPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzTmV3P1xyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luTGVmdDpcIjEwMHB4XCIsd2lkdGg6XCI0MjBweFwiLHBhZGRpbmc6XCIyMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbWFyZ2luVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCA4MHB4XCJ9fT7nu4TlkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5nX25hbWV9IG9uQ2hhbmdlPXt0aGlzLmdfbmFtZUNoYW5nZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLG1hcmdpblRvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgODBweFwifX0+5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuZ19kZXN9IG9uQ2hhbmdlPXt0aGlzLmdfZGVzQ2hhbmdlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e21hcmdpblRvcDpcIjIwcHhcIix0ZXh0QWxpZ246XCJyaWdodFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRDYW5jZWx9IHNpemU9XCJzbWFsbFwiIGNzcz17e21hcmdpblJpZ2h0OlwiMjBweFwifX0+5Y+W5raIPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRPa30gIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+56Gu5a6aPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuS4u+aculwiIGtleT1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuS4u+acuuWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RuYW1lfSBvbkNoYW5nZT17KGUpPT50aGlzLmRhdGFDaGFuZ2UoZSwnaG9zdG5hbWUnKX0gY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Puezu+e7n+W5s+WPsO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zeXNwbGF0Zm9ybUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J3dpbmRvd3MnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXdpbmRvd3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IFdpbmRvd3MgPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdsaW51eCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGludXhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IExpbnV4IDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7kuLvmnLppcO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RpcH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RpcCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybSA9PT0gJ2xpbnV4Jz9cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7nlKjmiLflkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHVzZXJ9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0dXNlcicpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5a+G56CB77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPFBhc3N3b3JkIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RwYXNzd29yZH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RwYXNzd29yZCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+U1NI56uv5Y+j77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHBsYWNlaG9sZGVyPSfpu5jorqTkuLoyMicgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHBvcnR9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0cG9ydCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5pel5b+XXCIga2V5PVwiM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Um93IGNzcz17e3RleHRBbGlnbjpcImNlbnRlclwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezh9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMilcIn19PuaWh+S7tui3r+W+hDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4xKVwifX0+5bqU55So5qCH6K+GPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXszfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjIpXCJ9fT7mmK/lkKbku47lpLTor7votbc8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezN9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMSlcIn19PuaYr+WQpuWNleihjOaXpeW/lzwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4yKVwifX0+6Kej5p6Q6KeE5YiZPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXsyfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjEpXCJ9fT7mk43kvZw8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dMaXN0ICYmIHRoaXMuc3RhdGUubG9nTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvZ0xpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2dTZXQgZG9EZWxldGVMb2c9e3RoaXMuZG9EZWxldGVMb2d9IHVwZGF0ZUxvZz17dGhpcy51cGRhdGVMb2d9IGtleT17aXRlbS5pZH0gZGF0YT17aXRlbX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDxBZGRMb2dTZXREb20+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmRvQWRkTG9nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0FkZExvZ1NldERvbT5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuWuieijheaWueW8j1wiIGtleT1cIjRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuWuieijheaWueW8j++8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3lzcGxhdGZvcm0gPT09ICd3aW5kb3dzJz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J2hhbmRzZXQnPjxpIGNsYXNzTmFtZT1cImZhIGZhLWhhbmQtcG9pbnRlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiDmiYvliqg8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdoYW5kc2V0Jz48aSBjbGFzc05hbWU9XCJmYSBmYS1oYW5kLXBvaW50ZXItb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4g5omL5YqoPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT0nYXV0b3NldCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFza3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IOiHquWKqDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgIDwvVGFicz5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5vbkNsb3NlfT7lj5bmtog8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVLZXkgPT09ICcxJz9cclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmxhc3RTdGVwfSA+5LiK5LiA5q2lPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlS2V5ID09PSAnNCc/XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMTBweFwifX0gb25DbGljaz17dGhpcy5uZXh0U3RlcH0gPuS4i+S4gOatpTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gJzQnP1xyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmRvU2F2ZX0gdHlwZT1cInByaW1hcnlcIiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwifX0+5L+d5a2YPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0b1NldFxyXG4iXX0= */\"\n};\n\nvar _ref13 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbUJhc2UvQXV0b1NldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4b0J5QiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9TeXN0ZW1CYXNlL0F1dG9TZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogIEBqc3gganN4ICovXHJcbmltcG9ydCBSZWFjdCAseyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgRHJhd2VyLCBCdXR0b24sIFJvdywgQ29sLCBJbnB1dCwgVGFicywgU2VsZWN0LCBQb3Bjb25maXJtLCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0ICBXeVRhYmxlICBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBMb2dTZXQgZnJvbSAnLi9Mb2dTZXQnXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBzaW5nbGVJcCwgc2luZ2xlUG9ydCwgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5jb25zdCBUYWJQYW5lID0gVGFicy5UYWJQYW5lXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgT3B0aW9uID0gU2VsZWN0Lk9wdGlvblxyXG5jb25zdCBQYXNzd29yZCA9IElucHV0LlBhc3N3b3JkXHJcbmxldCBBZGRMb2dTZXREb20gPSBzdHlsZWQuZGl2KHtcclxuICBsaW5lSGVpZ2h0OlwiNDBweFwiLFxyXG4gIGJvcmRlcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgZGFzaGVkIDFweFwiLFxyXG4gIGJvcmRlclJhZGl1czpcIjVweFwiLFxyXG4gIHRleHRBbGlnbjpcImNlbnRlclwiLFxyXG4gIGN1cnNvcjpcInBvaW50ZXJcIixcclxuICBtYXJnaW5Ub3A6XCIxMHB4XCIsXHJcbiAgJyY6aG92ZXInOntcclxuICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjIpXCJcclxuICB9LFxyXG4gICcmOmFjdGl2ZSc6e1xyXG4gICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsMCwwLDAuNClcIlxyXG4gIH1cclxufSlcclxuY2xhc3MgQXV0b1NldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuXHJcbiAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgc291cmNlZGVzOicnLFxyXG4gICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICBob3N0aXA6JycsIC8v5Li75py6SXBcclxuICAgIGhvc3R1c2VyOicnLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgaG9zdHBvcnQ6JycsIC8v5Li75py656uv5Y+jXHJcbiAgICBzeXNwbGF0Zm9ybTonbGludXgnLC8v5Li75py657O757ufXHJcbiAgICBsb2dMaXN0OltdLCAgLy/ml6Xlv5fliJfooahcclxuICAgIHNldHlwZTonaGFuZHNldCcsXHJcblxyXG4gICAgYWN0aXZlS2V5OicxJyxcclxuXHJcblxyXG4gICAgcGFnZVNpemU6NSxcclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcbiAgICBpZHM6W10sXHJcbiAgICB4RGF0YTogW10sXHJcbiAgICB5RGF0YTogW10sXHJcbiAgICBpZDonJyxcclxuICAgIC8v5paw5aKe5YiG57uEXHJcbiAgICBpc05ldzogZmFsc2UsXHJcbiAgICBnX25hbWU6JycsXHJcbiAgICBnX2RlczonJyxcclxuICAgIGdyb3VwTGlzdDpbXSxcclxuICAgIHNlbGdyb3VwOltdLFxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRTb3VyY2UoKVxyXG4gICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgfVxyXG4gIHNlbGdyb3VwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IHZhbHVlXHJcbiAgICBjb25zdCBpZEFyciA9IHRoaXMubmFtZVRvSWQodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2dfbmFtZScsbmFtZUFyciwnaWQnKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZ3JvdXA6IF8uY2xvbmVEZWVwKGlkQXJyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL25hbWXlkoxpZOi9rOaNolxyXG4gIG5hbWVUb0lkID0gKGFycixuYW1lRmllbGQsbmFtZUFycixpZEZpZWxkKT0+e1xyXG4gICAgY29uc3QgaWRBcnIgPSBbXVxyXG4gICAgaWYobmFtZUFyciAmJiBuYW1lQXJyLmxlbmd0aD4wKXtcclxuICAgICAgbmFtZUFyci5tYXAoaXRlbT0+e1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IF8uZmluZChhcnIsKG8pPT57cmV0dXJuIG9bbmFtZUZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgaWRBcnIucHVzaChvYmpbaWRGaWVsZF0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWRBcnJcclxuICB9XHJcbiAgaWRUb05hbWUgPSAoYXJyLGlkRmllbGQsaWRBcnIsbmFtZUZpZWxkKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IFtdXHJcbiAgICBpZihpZEFyciAmJiBpZEFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlkQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3Qgb2JqID0gXy5maW5kKGFyciwobyk9PntyZXR1cm4gb1tpZEZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgbmFtZUFyci5wdXNoKG9ialtuYW1lRmllbGRdKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVBcnJcclxuICB9XHJcbiAgLy/ojrflj5bliIbnu4RcclxuICBnZXRHcm91cCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBMaXN0OiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5paw5aKe5YiG57uEXHJcbiAgYWRkTmV3R3JvdXAgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lj5bmtojmlrDlop5cclxuICBhZGRDYW5jZWwgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICBnX2RlczonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOWIhue7hFxyXG4gIGFkZE9rID0gKCk9PntcclxuICAgIGNvbnN0IHsgZ19uYW1lLGdfZGVzIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihnX25hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfnu4TlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB7Z19uYW1lLGdfZGVzfVxyXG4gICAgICB3eUF4aW9zUG9zdCgnR3JvdXAvc2F2ZUdyb3VwJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICAgICAgICBnX2RlczonJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19uYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBnX2Rlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19kZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pWw5o2u5rqQXHJcbiAgZ2V0U291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRTb3VyY2UnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnZWRpdCcsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PntcclxuICAgICAgICAgIGxldCBkb20gPSAnJ1xyXG4gICAgICAgICAgaWYocmVjb3JkLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5a6J6KOFXCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5kb0luc3RhbGwocmVjb3JkLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS13cmVuY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaCqOehruWumuimgeWNuOi9veWQlz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXsoKT0+dGhpcy5kb1VuaW5zdGFsbChyZWNvcmQuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpPT57IHJldHVybiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5Y246L29XCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hhaW4tYnJva2VuXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIH1lbHNlIGlmKHJlY29yZC5zeXNwbGF0Zm9ybSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZG9tXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBpc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/kuIvovb3lronoo4XljIVcclxuICBkb3duTG9hZEluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2Rvd25sb2FkJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIGEuZG93bmxvYWQgPSBcImludGltYXRlbG9nX2luc3RhbGwuemlwXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5LiL6L296YWN572u5paH5Lu2XHJcbiAgZG93bkxvYWRGaWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS91cGxvYWRZYW1sJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIC8vYS5kb3dubG9hZCA9IFwiXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5a6J6KOFXHJcbiAgZG9JbnN0YWxsID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9pbnN0YWxsJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y246L29XHJcbiAgZG9Vbmluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VuaW5zdGFsbCcse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRTb3VyY2UgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldFNvdXJjZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGxvZ0xpc3QgPSByZXNwb25zZURhdGEubG9nTGlzdFxyXG4gICAgICBpZihsb2dMaXN0ICYmIGxvZ0xpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBsb2dMaXN0KXtcclxuICAgICAgICAgIGl0ZW0ubG9naXNzaW5nbGUgPSBpdGVtLmxvZ2lzc2luZ2xlID09PSd0cnVlJz90cnVlOmZhbHNlXHJcbiAgICAgICAgICBpdGVtLmxvZ2lzcmVyZWFkID0gaXRlbS5sb2dpc3JlcmVhZCA9PT0ndHJ1ZSc/dHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc291cmNlbmFtZSxcclxuICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgc2V0eXBlLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNlbGdyb3VwXHJcbiAgICAgIH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgICAgIHNldHlwZSxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc2VsZ3JvdXBcclxuICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICB0aGlzLnNob3dEcmF3ZXIoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGRhdGFDaGFuZ2UgPSAoZSxhcmcpPT57XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZSkpe1xyXG4gICAgICBpZihpdGVtID09PSBhcmcpe1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2FyZ106IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3BsYXRmb3JtQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgbGV0IHNldHlwZSA9IHRoaXMuc3RhdGUuc2V0eXBlXHJcbiAgICBpZih2YWx1ZSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgc2V0eXBlID0gJ2hhbmRzZXQnXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzeXNwbGF0Zm9ybTogdmFsdWUsXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicnLCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHNldHlwZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZXR5cGVDaGFuZ2UgPSAoc2V0eXBlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2V0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQWRkTG9nID0gKCk9PntcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBjb25zdCBjdXJMb2cgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICBsb2dwYXRoOicnLFxyXG4gICAgICBsb2dpc3JlcmVhZDogZmFsc2UsXHJcbiAgICAgIGxvZ2lzc2luZ2xlOiB0cnVlLFxyXG4gICAgICBsb2d0YWc6JycsXHJcbiAgICAgIGxvZ3J1bGU6W11cclxuICAgIH1cclxuICAgIGNvbnN0IGN1ckxvZ0xpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmxvZ0xpc3QpXHJcbiAgICBjdXJMb2dMaXN0LnB1c2goY3VyTG9nKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbG9nTGlzdDogWy4uLmN1ckxvZ0xpc3RdXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvRGVsZXRlTG9nID0gKGlkKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdC5zcGxpY2UoaSwxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGxvZ0xpc3Q6IFsuLi5jdXJMb2dMaXN0XVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVMb2cgPSAoaWQsYXJnLHZhbHVlKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdFtpXVthcmddID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2dMaXN0OiBbLi4uY3VyTG9nTGlzdF1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgICAgIHNvdXJjZWRlczonJyxcclxuXHJcbiAgICAgICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwOicnLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicyMicsIC8v5Li75py656uv5Y+jXHJcbiAgICAgICAgc3lzcGxhdGZvcm06J2xpbnV4JywvL+S4u+acuuezu+e7n1xyXG4gICAgICAgIGxvZ0xpc3Q6W10sICAvL+aXpeW/l+WIl+ihqFxyXG4gICAgICAgIHNldHlwZTonaGFuZHNldCcsXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgYWN0aXZlS2V5OicxJyxcclxuICAgICAgICBzZWxncm91cDpbXVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOaVsOaNrua6kFxyXG4gIGRvU2F2ZSA9ICgpPT57XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgIHNvdXJjZWRlcyxcclxuICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICBob3N0dXNlciwgLy/kuLvmnLrnlKjmiLflkI1cclxuICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgc3lzcGxhdGZvcm0sLy/kuLvmnLrns7vnu59cclxuICAgICAgbG9nTGlzdCwgIC8v5pel5b+X5YiX6KGoXHJcbiAgICAgIHNldHlwZSxcclxuICAgICAgaWQsXHJcbiAgICAgIHNlbGdyb3VwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgc291cmNlbmFtZSxcclxuICAgICAgc291cmNlZGVzLFxyXG4gICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgIGhvc3R1c2VyLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICBzeXNwbGF0Zm9ybSwvL+S4u+acuuezu+e7n1xyXG4gICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgc2V0eXBlLFxyXG4gICAgICBpZCxcclxuICAgICAgc2VsZ3JvdXBcclxuICAgIH1cclxuICAgIC8v5ZCI5rOV5oCn5qCh6aqMXHJcbiAgICBjb25zdCBlcnJvTGlzdCA9IFtdXHJcblxyXG4gICAgaWYoaW5mby5zb3VyY2VuYW1lID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+aVsOaNrua6kOWQjeensOS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZSBpZighIGZvck5hbWUudGVzdChpbmZvLnNvdXJjZW5hbWUpKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5pWw5o2u5rqQ5ZCN56ew5qC85byP5LiN5q2j56GuJylcclxuICAgIH1cclxuICAgIGlmKGluZm8uc2VsZ3JvdXAubGVuZ3RoID09PSAwKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5omA5bGe5YiG57uE5LiN6IO95Li656m6JylcclxuICAgIH1cclxuICAgIGlmKGluZm8uaG9zdGlwID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+S4u+acumlw5LiN6IO95Li656m6JylcclxuICAgIH1lbHNlIGlmKCEgc2luZ2xlSXAudGVzdChpbmZvLmhvc3RpcCkpe1xyXG4gICAgICBlcnJvTGlzdC5wdXNoKCfkuLvmnLppcOagvOW8j+S4jeato+ehricpXHJcbiAgICB9XHJcbiAgICBpZihpbmZvLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgaWYoaW5mby5ob3N0dXNlciA9PT0gJycpe1xyXG4gICAgICAgIGVycm9MaXN0LnB1c2goJ+eUqOaIt+WQjeS4jeiDveS4uuepuicpXHJcbiAgICAgIH1cclxuICAgICAgaWYoaW5mby5ob3N0cGFzc3dvcmQgPT09ICcnKXtcclxuICAgICAgICBlcnJvTGlzdC5wdXNoKCflr4bnoIHkuI3og73kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGluZm8uaG9zdHBvcnQgIT09ICcnICYmICghc2luZ2xlUG9ydC50ZXN0KGluZm8uaG9zdHBvcnQpKSl7XHJcbiAgICAgICAgZXJyb0xpc3QucHVzaCgnU1NI56uv5Y+j5peg5pWIJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaW5mby5sb2dMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+acqua3u+WKoOaXpeW/l+S/oeaBrycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGxvZ0xpc3Qpe1xyXG4gICAgICAgIGlmKGl0ZW0ubG9ncGF0aCA9PT0gJycgfHwgaXRlbS5sb2d0YWcgPT09ICcnKXtcclxuICAgICAgICAgIGVycm9MaXN0LnB1c2goJ+aXpeW/l+S/oeaBr+acquWhq+WGmeWujOaVtCcpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGVycm9MaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2Uvc2F2ZVNvdXJjZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIHRoaXMub25DbG9zZSgpXHJcbiAgICAgICAgICB0aGlzLmdldFNvdXJjZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGV0IHN0ciA9ICcnXHJcbiAgICAgIGVycm9MaXN0Lm1hcCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBzdHIgKz0gaW5kZXgrMSsnLicraXRlbSsnICAnXHJcbiAgICAgIH0pXHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZyhzdHIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v5Yig6ZmkXHJcbiAgZGVsU291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUuaWRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5JylcclxuICAgIH1lbHNle1xyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL2RlbFNvdXJjZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgdGFic0NoYW5nZSA9IChhY3RpdmVLZXkpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbGFzdFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbGFzdEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgLSAxXHJcbiAgICBsYXN0S2V5ID0gbGFzdEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IGxhc3RLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV4dFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbmV4dEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgKyAxXHJcbiAgICBuZXh0S2V5ID0gbmV4dEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IG5leHRLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGNvbnN0IHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RhdGUuaWRzXHJcbiAgICBjb25zdCByb3dTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHNlbGVjdGVkUm93S2V5cyxcclxuICAgICAgb25DaGFuZ2U6IChzZWxlY3RlZFJvd0tleXMpID0+IHtcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogc2VsZWN0ZWRSb3dLZXlzXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxTb3VyY2U6KCk9Pnt9fSBva1RleHQ9XCLnoa7lrppcIiBjYW5jZWxUZXh0PVwi5Y+W5raIXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17e21hcmdpbkxlZnQ6IFwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51cy1zcXVhcmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5Yig6ZmkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L1BvcGNvbmZpcm0+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3Rpb249e3Jvd1NlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YT90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLmlbDmja7mupDphY3nva5cIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgd2lkdGg9e1wiODAlXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICA8VGFicyBkZWZhdWx0QWN0aXZlS2V5PVwiMVwiIGFjdGl2ZUtleT17dGhpcy5zdGF0ZS5hY3RpdmVLZXl9IG9uQ2hhbmdlPXt0aGlzLnRhYnNDaGFuZ2V9PlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5Z+65pys5L+h5oGvXCIga2V5PVwiMVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5pWw5o2u5rqQ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuc291cmNlbmFtZX0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZW5hbWUnKX0gY3NzPXt7d2lkdGg6XCI0MjBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuaVsOaNrua6kOaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnNvdXJjZWRlc30gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZWRlcycpfSBjc3M9e3t3aWR0aDpcIjQyMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5omA5bGe5YiG57uE77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJtdWx0aXBsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsZWFzZSBzZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICczMjBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGdyb3VwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuaWRUb05hbWUodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2lkJyx0aGlzLnN0YXRlLnNlbGdyb3VwLCdnX25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ncm91cExpc3QgJiYgdGhpcy5zdGF0ZS5ncm91cExpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmdyb3VwTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0uaWR9IHZhbHVlPXtpdGVtLmdfbmFtZX0gdGl0bGU9e2l0ZW0uZ19uYW1lfT57aXRlbS5nX25hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc05ldz9cclxuICAgICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkTmV3R3JvdXB9IHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj4gPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5paw5aKe5YiG57uEPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzTmV3P1xyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luTGVmdDpcIjEwMHB4XCIsd2lkdGg6XCI0MjBweFwiLHBhZGRpbmc6XCIyMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbWFyZ2luVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCA4MHB4XCJ9fT7nu4TlkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5nX25hbWV9IG9uQ2hhbmdlPXt0aGlzLmdfbmFtZUNoYW5nZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLG1hcmdpblRvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgODBweFwifX0+5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuZ19kZXN9IG9uQ2hhbmdlPXt0aGlzLmdfZGVzQ2hhbmdlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e21hcmdpblRvcDpcIjIwcHhcIix0ZXh0QWxpZ246XCJyaWdodFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRDYW5jZWx9IHNpemU9XCJzbWFsbFwiIGNzcz17e21hcmdpblJpZ2h0OlwiMjBweFwifX0+5Y+W5raIPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRPa30gIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+56Gu5a6aPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuS4u+aculwiIGtleT1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuS4u+acuuWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RuYW1lfSBvbkNoYW5nZT17KGUpPT50aGlzLmRhdGFDaGFuZ2UoZSwnaG9zdG5hbWUnKX0gY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Puezu+e7n+W5s+WPsO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zeXNwbGF0Zm9ybUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J3dpbmRvd3MnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXdpbmRvd3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IFdpbmRvd3MgPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdsaW51eCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGludXhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IExpbnV4IDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7kuLvmnLppcO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RpcH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RpcCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybSA9PT0gJ2xpbnV4Jz9cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7nlKjmiLflkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHVzZXJ9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0dXNlcicpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5a+G56CB77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPFBhc3N3b3JkIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RwYXNzd29yZH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RwYXNzd29yZCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+U1NI56uv5Y+j77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHBsYWNlaG9sZGVyPSfpu5jorqTkuLoyMicgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHBvcnR9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0cG9ydCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5pel5b+XXCIga2V5PVwiM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Um93IGNzcz17e3RleHRBbGlnbjpcImNlbnRlclwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezh9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMilcIn19PuaWh+S7tui3r+W+hDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4xKVwifX0+5bqU55So5qCH6K+GPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXszfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjIpXCJ9fT7mmK/lkKbku47lpLTor7votbc8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezN9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMSlcIn19PuaYr+WQpuWNleihjOaXpeW/lzwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4yKVwifX0+6Kej5p6Q6KeE5YiZPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXsyfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjEpXCJ9fT7mk43kvZw8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dMaXN0ICYmIHRoaXMuc3RhdGUubG9nTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvZ0xpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2dTZXQgZG9EZWxldGVMb2c9e3RoaXMuZG9EZWxldGVMb2d9IHVwZGF0ZUxvZz17dGhpcy51cGRhdGVMb2d9IGtleT17aXRlbS5pZH0gZGF0YT17aXRlbX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDxBZGRMb2dTZXREb20+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmRvQWRkTG9nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0FkZExvZ1NldERvbT5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuWuieijheaWueW8j1wiIGtleT1cIjRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuWuieijheaWueW8j++8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3lzcGxhdGZvcm0gPT09ICd3aW5kb3dzJz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J2hhbmRzZXQnPjxpIGNsYXNzTmFtZT1cImZhIGZhLWhhbmQtcG9pbnRlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiDmiYvliqg8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdoYW5kc2V0Jz48aSBjbGFzc05hbWU9XCJmYSBmYS1oYW5kLXBvaW50ZXItb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4g5omL5YqoPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT0nYXV0b3NldCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFza3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IOiHquWKqDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgIDwvVGFicz5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5vbkNsb3NlfT7lj5bmtog8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVLZXkgPT09ICcxJz9cclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmxhc3RTdGVwfSA+5LiK5LiA5q2lPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlS2V5ID09PSAnNCc/XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMTBweFwifX0gb25DbGljaz17dGhpcy5uZXh0U3RlcH0gPuS4i+S4gOatpTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gJzQnP1xyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmRvU2F2ZX0gdHlwZT1cInByaW1hcnlcIiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwifX0+5L+d5a2YPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0b1NldFxyXG4iXX0= */\"\n};\n\nvar _ref14 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref15 = process.env.NODE_ENV === \"production\" ? {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\"\n} : {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref16 = process.env.NODE_ENV === \"production\" ? {\n  name: \"dwxzp7-AutoSet\",\n  styles: \"margin-left:5px;label:AutoSet;\"\n} : {\n  name: \"dwxzp7-AutoSet\",\n  styles: \"margin-left:5px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref17 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1au18su-AutoSet\",\n  styles: \"margin-left:100px;width:420px;padding:20px;border:rgba(255,255,255,0.2) solid 1px;border-radius:5px;label:AutoSet;\"\n} : {\n  name: \"1au18su-AutoSet\",\n  styles: \"margin-left:100px;width:420px;padding:20px;border:rgba(255,255,255,0.2) solid 1px;border-radius:5px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref18 = process.env.NODE_ENV === \"production\" ? {\n  name: \"15e1dax-AutoSet\",\n  styles: \"display:flex;margin-top:10px;label:AutoSet;\"\n} : {\n  name: \"15e1dax-AutoSet\",\n  styles: \"display:flex;margin-top:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref19 = process.env.NODE_ENV === \"production\" ? {\n  name: \"ztnbwr-AutoSet\",\n  styles: \"flex:0 0 80px;label:AutoSet;\"\n} : {\n  name: \"ztnbwr-AutoSet\",\n  styles: \"flex:0 0 80px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref20 = process.env.NODE_ENV === \"production\" ? {\n  name: \"11meik4-AutoSet\",\n  styles: \"flex:1 1 auto;label:AutoSet;\"\n} : {\n  name: \"11meik4-AutoSet\",\n  styles: \"flex:1 1 auto;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref21 = process.env.NODE_ENV === \"production\" ? {\n  name: \"15e1dax-AutoSet\",\n  styles: \"display:flex;margin-top:10px;label:AutoSet;\"\n} : {\n  name: \"15e1dax-AutoSet\",\n  styles: \"display:flex;margin-top:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref22 = process.env.NODE_ENV === \"production\" ? {\n  name: \"ztnbwr-AutoSet\",\n  styles: \"flex:0 0 80px;label:AutoSet;\"\n} : {\n  name: \"ztnbwr-AutoSet\",\n  styles: \"flex:0 0 80px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref23 = process.env.NODE_ENV === \"production\" ? {\n  name: \"11meik4-AutoSet\",\n  styles: \"flex:1 1 auto;label:AutoSet;\"\n} : {\n  name: \"11meik4-AutoSet\",\n  styles: \"flex:1 1 auto;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref24 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1npt1yt-AutoSet\",\n  styles: \"margin-top:20px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"1npt1yt-AutoSet\",\n  styles: \"margin-top:20px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref25 = process.env.NODE_ENV === \"production\" ? {\n  name: \"cl0k2n-AutoSet\",\n  styles: \"margin-right:20px;label:AutoSet;\"\n} : {\n  name: \"cl0k2n-AutoSet\",\n  styles: \"margin-right:20px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref26 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref27 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref28 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref29 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\"\n} : {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref30 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref31 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbUJhc2UvQXV0b1NldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwc0J5QiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9TeXN0ZW1CYXNlL0F1dG9TZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogIEBqc3gganN4ICovXHJcbmltcG9ydCBSZWFjdCAseyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgRHJhd2VyLCBCdXR0b24sIFJvdywgQ29sLCBJbnB1dCwgVGFicywgU2VsZWN0LCBQb3Bjb25maXJtLCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0ICBXeVRhYmxlICBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBMb2dTZXQgZnJvbSAnLi9Mb2dTZXQnXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBzaW5nbGVJcCwgc2luZ2xlUG9ydCwgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5jb25zdCBUYWJQYW5lID0gVGFicy5UYWJQYW5lXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgT3B0aW9uID0gU2VsZWN0Lk9wdGlvblxyXG5jb25zdCBQYXNzd29yZCA9IElucHV0LlBhc3N3b3JkXHJcbmxldCBBZGRMb2dTZXREb20gPSBzdHlsZWQuZGl2KHtcclxuICBsaW5lSGVpZ2h0OlwiNDBweFwiLFxyXG4gIGJvcmRlcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgZGFzaGVkIDFweFwiLFxyXG4gIGJvcmRlclJhZGl1czpcIjVweFwiLFxyXG4gIHRleHRBbGlnbjpcImNlbnRlclwiLFxyXG4gIGN1cnNvcjpcInBvaW50ZXJcIixcclxuICBtYXJnaW5Ub3A6XCIxMHB4XCIsXHJcbiAgJyY6aG92ZXInOntcclxuICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjIpXCJcclxuICB9LFxyXG4gICcmOmFjdGl2ZSc6e1xyXG4gICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsMCwwLDAuNClcIlxyXG4gIH1cclxufSlcclxuY2xhc3MgQXV0b1NldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuXHJcbiAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgc291cmNlZGVzOicnLFxyXG4gICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICBob3N0aXA6JycsIC8v5Li75py6SXBcclxuICAgIGhvc3R1c2VyOicnLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgaG9zdHBvcnQ6JycsIC8v5Li75py656uv5Y+jXHJcbiAgICBzeXNwbGF0Zm9ybTonbGludXgnLC8v5Li75py657O757ufXHJcbiAgICBsb2dMaXN0OltdLCAgLy/ml6Xlv5fliJfooahcclxuICAgIHNldHlwZTonaGFuZHNldCcsXHJcblxyXG4gICAgYWN0aXZlS2V5OicxJyxcclxuXHJcblxyXG4gICAgcGFnZVNpemU6NSxcclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcbiAgICBpZHM6W10sXHJcbiAgICB4RGF0YTogW10sXHJcbiAgICB5RGF0YTogW10sXHJcbiAgICBpZDonJyxcclxuICAgIC8v5paw5aKe5YiG57uEXHJcbiAgICBpc05ldzogZmFsc2UsXHJcbiAgICBnX25hbWU6JycsXHJcbiAgICBnX2RlczonJyxcclxuICAgIGdyb3VwTGlzdDpbXSxcclxuICAgIHNlbGdyb3VwOltdLFxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRTb3VyY2UoKVxyXG4gICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgfVxyXG4gIHNlbGdyb3VwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IHZhbHVlXHJcbiAgICBjb25zdCBpZEFyciA9IHRoaXMubmFtZVRvSWQodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2dfbmFtZScsbmFtZUFyciwnaWQnKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZ3JvdXA6IF8uY2xvbmVEZWVwKGlkQXJyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL25hbWXlkoxpZOi9rOaNolxyXG4gIG5hbWVUb0lkID0gKGFycixuYW1lRmllbGQsbmFtZUFycixpZEZpZWxkKT0+e1xyXG4gICAgY29uc3QgaWRBcnIgPSBbXVxyXG4gICAgaWYobmFtZUFyciAmJiBuYW1lQXJyLmxlbmd0aD4wKXtcclxuICAgICAgbmFtZUFyci5tYXAoaXRlbT0+e1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IF8uZmluZChhcnIsKG8pPT57cmV0dXJuIG9bbmFtZUZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgaWRBcnIucHVzaChvYmpbaWRGaWVsZF0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWRBcnJcclxuICB9XHJcbiAgaWRUb05hbWUgPSAoYXJyLGlkRmllbGQsaWRBcnIsbmFtZUZpZWxkKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IFtdXHJcbiAgICBpZihpZEFyciAmJiBpZEFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlkQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3Qgb2JqID0gXy5maW5kKGFyciwobyk9PntyZXR1cm4gb1tpZEZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgbmFtZUFyci5wdXNoKG9ialtuYW1lRmllbGRdKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVBcnJcclxuICB9XHJcbiAgLy/ojrflj5bliIbnu4RcclxuICBnZXRHcm91cCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBMaXN0OiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5paw5aKe5YiG57uEXHJcbiAgYWRkTmV3R3JvdXAgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lj5bmtojmlrDlop5cclxuICBhZGRDYW5jZWwgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICBnX2RlczonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOWIhue7hFxyXG4gIGFkZE9rID0gKCk9PntcclxuICAgIGNvbnN0IHsgZ19uYW1lLGdfZGVzIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihnX25hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfnu4TlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB7Z19uYW1lLGdfZGVzfVxyXG4gICAgICB3eUF4aW9zUG9zdCgnR3JvdXAvc2F2ZUdyb3VwJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICAgICAgICBnX2RlczonJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19uYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBnX2Rlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19kZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pWw5o2u5rqQXHJcbiAgZ2V0U291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRTb3VyY2UnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnZWRpdCcsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PntcclxuICAgICAgICAgIGxldCBkb20gPSAnJ1xyXG4gICAgICAgICAgaWYocmVjb3JkLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5a6J6KOFXCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5kb0luc3RhbGwocmVjb3JkLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS13cmVuY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaCqOehruWumuimgeWNuOi9veWQlz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXsoKT0+dGhpcy5kb1VuaW5zdGFsbChyZWNvcmQuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpPT57IHJldHVybiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5Y246L29XCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hhaW4tYnJva2VuXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIH1lbHNlIGlmKHJlY29yZC5zeXNwbGF0Zm9ybSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZG9tXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBpc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/kuIvovb3lronoo4XljIVcclxuICBkb3duTG9hZEluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2Rvd25sb2FkJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIGEuZG93bmxvYWQgPSBcImludGltYXRlbG9nX2luc3RhbGwuemlwXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5LiL6L296YWN572u5paH5Lu2XHJcbiAgZG93bkxvYWRGaWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS91cGxvYWRZYW1sJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIC8vYS5kb3dubG9hZCA9IFwiXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5a6J6KOFXHJcbiAgZG9JbnN0YWxsID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9pbnN0YWxsJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y246L29XHJcbiAgZG9Vbmluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VuaW5zdGFsbCcse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRTb3VyY2UgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldFNvdXJjZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGxvZ0xpc3QgPSByZXNwb25zZURhdGEubG9nTGlzdFxyXG4gICAgICBpZihsb2dMaXN0ICYmIGxvZ0xpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBsb2dMaXN0KXtcclxuICAgICAgICAgIGl0ZW0ubG9naXNzaW5nbGUgPSBpdGVtLmxvZ2lzc2luZ2xlID09PSd0cnVlJz90cnVlOmZhbHNlXHJcbiAgICAgICAgICBpdGVtLmxvZ2lzcmVyZWFkID0gaXRlbS5sb2dpc3JlcmVhZCA9PT0ndHJ1ZSc/dHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc291cmNlbmFtZSxcclxuICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgc2V0eXBlLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNlbGdyb3VwXHJcbiAgICAgIH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgICAgIHNldHlwZSxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc2VsZ3JvdXBcclxuICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICB0aGlzLnNob3dEcmF3ZXIoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGRhdGFDaGFuZ2UgPSAoZSxhcmcpPT57XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZSkpe1xyXG4gICAgICBpZihpdGVtID09PSBhcmcpe1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2FyZ106IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3BsYXRmb3JtQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgbGV0IHNldHlwZSA9IHRoaXMuc3RhdGUuc2V0eXBlXHJcbiAgICBpZih2YWx1ZSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgc2V0eXBlID0gJ2hhbmRzZXQnXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzeXNwbGF0Zm9ybTogdmFsdWUsXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicnLCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHNldHlwZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZXR5cGVDaGFuZ2UgPSAoc2V0eXBlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2V0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQWRkTG9nID0gKCk9PntcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBjb25zdCBjdXJMb2cgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICBsb2dwYXRoOicnLFxyXG4gICAgICBsb2dpc3JlcmVhZDogZmFsc2UsXHJcbiAgICAgIGxvZ2lzc2luZ2xlOiB0cnVlLFxyXG4gICAgICBsb2d0YWc6JycsXHJcbiAgICAgIGxvZ3J1bGU6W11cclxuICAgIH1cclxuICAgIGNvbnN0IGN1ckxvZ0xpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmxvZ0xpc3QpXHJcbiAgICBjdXJMb2dMaXN0LnB1c2goY3VyTG9nKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbG9nTGlzdDogWy4uLmN1ckxvZ0xpc3RdXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvRGVsZXRlTG9nID0gKGlkKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdC5zcGxpY2UoaSwxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGxvZ0xpc3Q6IFsuLi5jdXJMb2dMaXN0XVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVMb2cgPSAoaWQsYXJnLHZhbHVlKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdFtpXVthcmddID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2dMaXN0OiBbLi4uY3VyTG9nTGlzdF1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgICAgIHNvdXJjZWRlczonJyxcclxuXHJcbiAgICAgICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwOicnLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicyMicsIC8v5Li75py656uv5Y+jXHJcbiAgICAgICAgc3lzcGxhdGZvcm06J2xpbnV4JywvL+S4u+acuuezu+e7n1xyXG4gICAgICAgIGxvZ0xpc3Q6W10sICAvL+aXpeW/l+WIl+ihqFxyXG4gICAgICAgIHNldHlwZTonaGFuZHNldCcsXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgYWN0aXZlS2V5OicxJyxcclxuICAgICAgICBzZWxncm91cDpbXVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOaVsOaNrua6kFxyXG4gIGRvU2F2ZSA9ICgpPT57XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgIHNvdXJjZWRlcyxcclxuICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICBob3N0dXNlciwgLy/kuLvmnLrnlKjmiLflkI1cclxuICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgc3lzcGxhdGZvcm0sLy/kuLvmnLrns7vnu59cclxuICAgICAgbG9nTGlzdCwgIC8v5pel5b+X5YiX6KGoXHJcbiAgICAgIHNldHlwZSxcclxuICAgICAgaWQsXHJcbiAgICAgIHNlbGdyb3VwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgc291cmNlbmFtZSxcclxuICAgICAgc291cmNlZGVzLFxyXG4gICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgIGhvc3R1c2VyLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICBzeXNwbGF0Zm9ybSwvL+S4u+acuuezu+e7n1xyXG4gICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgc2V0eXBlLFxyXG4gICAgICBpZCxcclxuICAgICAgc2VsZ3JvdXBcclxuICAgIH1cclxuICAgIC8v5ZCI5rOV5oCn5qCh6aqMXHJcbiAgICBjb25zdCBlcnJvTGlzdCA9IFtdXHJcblxyXG4gICAgaWYoaW5mby5zb3VyY2VuYW1lID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+aVsOaNrua6kOWQjeensOS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZSBpZighIGZvck5hbWUudGVzdChpbmZvLnNvdXJjZW5hbWUpKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5pWw5o2u5rqQ5ZCN56ew5qC85byP5LiN5q2j56GuJylcclxuICAgIH1cclxuICAgIGlmKGluZm8uc2VsZ3JvdXAubGVuZ3RoID09PSAwKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5omA5bGe5YiG57uE5LiN6IO95Li656m6JylcclxuICAgIH1cclxuICAgIGlmKGluZm8uaG9zdGlwID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+S4u+acumlw5LiN6IO95Li656m6JylcclxuICAgIH1lbHNlIGlmKCEgc2luZ2xlSXAudGVzdChpbmZvLmhvc3RpcCkpe1xyXG4gICAgICBlcnJvTGlzdC5wdXNoKCfkuLvmnLppcOagvOW8j+S4jeato+ehricpXHJcbiAgICB9XHJcbiAgICBpZihpbmZvLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgaWYoaW5mby5ob3N0dXNlciA9PT0gJycpe1xyXG4gICAgICAgIGVycm9MaXN0LnB1c2goJ+eUqOaIt+WQjeS4jeiDveS4uuepuicpXHJcbiAgICAgIH1cclxuICAgICAgaWYoaW5mby5ob3N0cGFzc3dvcmQgPT09ICcnKXtcclxuICAgICAgICBlcnJvTGlzdC5wdXNoKCflr4bnoIHkuI3og73kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGluZm8uaG9zdHBvcnQgIT09ICcnICYmICghc2luZ2xlUG9ydC50ZXN0KGluZm8uaG9zdHBvcnQpKSl7XHJcbiAgICAgICAgZXJyb0xpc3QucHVzaCgnU1NI56uv5Y+j5peg5pWIJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaW5mby5sb2dMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+acqua3u+WKoOaXpeW/l+S/oeaBrycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGxvZ0xpc3Qpe1xyXG4gICAgICAgIGlmKGl0ZW0ubG9ncGF0aCA9PT0gJycgfHwgaXRlbS5sb2d0YWcgPT09ICcnKXtcclxuICAgICAgICAgIGVycm9MaXN0LnB1c2goJ+aXpeW/l+S/oeaBr+acquWhq+WGmeWujOaVtCcpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGVycm9MaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2Uvc2F2ZVNvdXJjZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIHRoaXMub25DbG9zZSgpXHJcbiAgICAgICAgICB0aGlzLmdldFNvdXJjZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGV0IHN0ciA9ICcnXHJcbiAgICAgIGVycm9MaXN0Lm1hcCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBzdHIgKz0gaW5kZXgrMSsnLicraXRlbSsnICAnXHJcbiAgICAgIH0pXHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZyhzdHIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v5Yig6ZmkXHJcbiAgZGVsU291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUuaWRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5JylcclxuICAgIH1lbHNle1xyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL2RlbFNvdXJjZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgdGFic0NoYW5nZSA9IChhY3RpdmVLZXkpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbGFzdFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbGFzdEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgLSAxXHJcbiAgICBsYXN0S2V5ID0gbGFzdEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IGxhc3RLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV4dFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbmV4dEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgKyAxXHJcbiAgICBuZXh0S2V5ID0gbmV4dEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IG5leHRLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGNvbnN0IHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RhdGUuaWRzXHJcbiAgICBjb25zdCByb3dTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHNlbGVjdGVkUm93S2V5cyxcclxuICAgICAgb25DaGFuZ2U6IChzZWxlY3RlZFJvd0tleXMpID0+IHtcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogc2VsZWN0ZWRSb3dLZXlzXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxTb3VyY2U6KCk9Pnt9fSBva1RleHQ9XCLnoa7lrppcIiBjYW5jZWxUZXh0PVwi5Y+W5raIXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17e21hcmdpbkxlZnQ6IFwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51cy1zcXVhcmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5Yig6ZmkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L1BvcGNvbmZpcm0+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3Rpb249e3Jvd1NlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YT90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLmlbDmja7mupDphY3nva5cIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgd2lkdGg9e1wiODAlXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICA8VGFicyBkZWZhdWx0QWN0aXZlS2V5PVwiMVwiIGFjdGl2ZUtleT17dGhpcy5zdGF0ZS5hY3RpdmVLZXl9IG9uQ2hhbmdlPXt0aGlzLnRhYnNDaGFuZ2V9PlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5Z+65pys5L+h5oGvXCIga2V5PVwiMVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5pWw5o2u5rqQ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuc291cmNlbmFtZX0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZW5hbWUnKX0gY3NzPXt7d2lkdGg6XCI0MjBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuaVsOaNrua6kOaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnNvdXJjZWRlc30gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZWRlcycpfSBjc3M9e3t3aWR0aDpcIjQyMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5omA5bGe5YiG57uE77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJtdWx0aXBsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsZWFzZSBzZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICczMjBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGdyb3VwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuaWRUb05hbWUodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2lkJyx0aGlzLnN0YXRlLnNlbGdyb3VwLCdnX25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ncm91cExpc3QgJiYgdGhpcy5zdGF0ZS5ncm91cExpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmdyb3VwTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0uaWR9IHZhbHVlPXtpdGVtLmdfbmFtZX0gdGl0bGU9e2l0ZW0uZ19uYW1lfT57aXRlbS5nX25hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc05ldz9cclxuICAgICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkTmV3R3JvdXB9IHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj4gPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5paw5aKe5YiG57uEPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzTmV3P1xyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luTGVmdDpcIjEwMHB4XCIsd2lkdGg6XCI0MjBweFwiLHBhZGRpbmc6XCIyMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbWFyZ2luVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCA4MHB4XCJ9fT7nu4TlkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5nX25hbWV9IG9uQ2hhbmdlPXt0aGlzLmdfbmFtZUNoYW5nZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLG1hcmdpblRvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgODBweFwifX0+5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuZ19kZXN9IG9uQ2hhbmdlPXt0aGlzLmdfZGVzQ2hhbmdlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e21hcmdpblRvcDpcIjIwcHhcIix0ZXh0QWxpZ246XCJyaWdodFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRDYW5jZWx9IHNpemU9XCJzbWFsbFwiIGNzcz17e21hcmdpblJpZ2h0OlwiMjBweFwifX0+5Y+W5raIPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRPa30gIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+56Gu5a6aPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuS4u+aculwiIGtleT1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuS4u+acuuWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RuYW1lfSBvbkNoYW5nZT17KGUpPT50aGlzLmRhdGFDaGFuZ2UoZSwnaG9zdG5hbWUnKX0gY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Puezu+e7n+W5s+WPsO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zeXNwbGF0Zm9ybUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J3dpbmRvd3MnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXdpbmRvd3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IFdpbmRvd3MgPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdsaW51eCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGludXhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IExpbnV4IDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7kuLvmnLppcO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RpcH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RpcCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybSA9PT0gJ2xpbnV4Jz9cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7nlKjmiLflkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHVzZXJ9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0dXNlcicpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5a+G56CB77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPFBhc3N3b3JkIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RwYXNzd29yZH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RwYXNzd29yZCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+U1NI56uv5Y+j77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHBsYWNlaG9sZGVyPSfpu5jorqTkuLoyMicgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHBvcnR9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0cG9ydCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5pel5b+XXCIga2V5PVwiM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Um93IGNzcz17e3RleHRBbGlnbjpcImNlbnRlclwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezh9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMilcIn19PuaWh+S7tui3r+W+hDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4xKVwifX0+5bqU55So5qCH6K+GPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXszfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjIpXCJ9fT7mmK/lkKbku47lpLTor7votbc8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezN9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMSlcIn19PuaYr+WQpuWNleihjOaXpeW/lzwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4yKVwifX0+6Kej5p6Q6KeE5YiZPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXsyfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjEpXCJ9fT7mk43kvZw8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dMaXN0ICYmIHRoaXMuc3RhdGUubG9nTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvZ0xpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2dTZXQgZG9EZWxldGVMb2c9e3RoaXMuZG9EZWxldGVMb2d9IHVwZGF0ZUxvZz17dGhpcy51cGRhdGVMb2d9IGtleT17aXRlbS5pZH0gZGF0YT17aXRlbX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDxBZGRMb2dTZXREb20+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmRvQWRkTG9nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0FkZExvZ1NldERvbT5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuWuieijheaWueW8j1wiIGtleT1cIjRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuWuieijheaWueW8j++8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3lzcGxhdGZvcm0gPT09ICd3aW5kb3dzJz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J2hhbmRzZXQnPjxpIGNsYXNzTmFtZT1cImZhIGZhLWhhbmQtcG9pbnRlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiDmiYvliqg8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdoYW5kc2V0Jz48aSBjbGFzc05hbWU9XCJmYSBmYS1oYW5kLXBvaW50ZXItb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4g5omL5YqoPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT0nYXV0b3NldCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFza3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IOiHquWKqDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgIDwvVGFicz5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5vbkNsb3NlfT7lj5bmtog8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVLZXkgPT09ICcxJz9cclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmxhc3RTdGVwfSA+5LiK5LiA5q2lPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlS2V5ID09PSAnNCc/XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMTBweFwifX0gb25DbGljaz17dGhpcy5uZXh0U3RlcH0gPuS4i+S4gOatpTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gJzQnP1xyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmRvU2F2ZX0gdHlwZT1cInByaW1hcnlcIiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwifX0+5L+d5a2YPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0b1NldFxyXG4iXX0= */\"\n};\n\nvar _ref32 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref33 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbUJhc2UvQXV0b1NldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3dEJ1QiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9TeXN0ZW1CYXNlL0F1dG9TZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogIEBqc3gganN4ICovXHJcbmltcG9ydCBSZWFjdCAseyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgRHJhd2VyLCBCdXR0b24sIFJvdywgQ29sLCBJbnB1dCwgVGFicywgU2VsZWN0LCBQb3Bjb25maXJtLCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0ICBXeVRhYmxlICBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBMb2dTZXQgZnJvbSAnLi9Mb2dTZXQnXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBzaW5nbGVJcCwgc2luZ2xlUG9ydCwgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5jb25zdCBUYWJQYW5lID0gVGFicy5UYWJQYW5lXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgT3B0aW9uID0gU2VsZWN0Lk9wdGlvblxyXG5jb25zdCBQYXNzd29yZCA9IElucHV0LlBhc3N3b3JkXHJcbmxldCBBZGRMb2dTZXREb20gPSBzdHlsZWQuZGl2KHtcclxuICBsaW5lSGVpZ2h0OlwiNDBweFwiLFxyXG4gIGJvcmRlcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgZGFzaGVkIDFweFwiLFxyXG4gIGJvcmRlclJhZGl1czpcIjVweFwiLFxyXG4gIHRleHRBbGlnbjpcImNlbnRlclwiLFxyXG4gIGN1cnNvcjpcInBvaW50ZXJcIixcclxuICBtYXJnaW5Ub3A6XCIxMHB4XCIsXHJcbiAgJyY6aG92ZXInOntcclxuICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjIpXCJcclxuICB9LFxyXG4gICcmOmFjdGl2ZSc6e1xyXG4gICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsMCwwLDAuNClcIlxyXG4gIH1cclxufSlcclxuY2xhc3MgQXV0b1NldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuXHJcbiAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgc291cmNlZGVzOicnLFxyXG4gICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICBob3N0aXA6JycsIC8v5Li75py6SXBcclxuICAgIGhvc3R1c2VyOicnLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgaG9zdHBvcnQ6JycsIC8v5Li75py656uv5Y+jXHJcbiAgICBzeXNwbGF0Zm9ybTonbGludXgnLC8v5Li75py657O757ufXHJcbiAgICBsb2dMaXN0OltdLCAgLy/ml6Xlv5fliJfooahcclxuICAgIHNldHlwZTonaGFuZHNldCcsXHJcblxyXG4gICAgYWN0aXZlS2V5OicxJyxcclxuXHJcblxyXG4gICAgcGFnZVNpemU6NSxcclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcbiAgICBpZHM6W10sXHJcbiAgICB4RGF0YTogW10sXHJcbiAgICB5RGF0YTogW10sXHJcbiAgICBpZDonJyxcclxuICAgIC8v5paw5aKe5YiG57uEXHJcbiAgICBpc05ldzogZmFsc2UsXHJcbiAgICBnX25hbWU6JycsXHJcbiAgICBnX2RlczonJyxcclxuICAgIGdyb3VwTGlzdDpbXSxcclxuICAgIHNlbGdyb3VwOltdLFxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRTb3VyY2UoKVxyXG4gICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgfVxyXG4gIHNlbGdyb3VwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IHZhbHVlXHJcbiAgICBjb25zdCBpZEFyciA9IHRoaXMubmFtZVRvSWQodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2dfbmFtZScsbmFtZUFyciwnaWQnKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZ3JvdXA6IF8uY2xvbmVEZWVwKGlkQXJyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL25hbWXlkoxpZOi9rOaNolxyXG4gIG5hbWVUb0lkID0gKGFycixuYW1lRmllbGQsbmFtZUFycixpZEZpZWxkKT0+e1xyXG4gICAgY29uc3QgaWRBcnIgPSBbXVxyXG4gICAgaWYobmFtZUFyciAmJiBuYW1lQXJyLmxlbmd0aD4wKXtcclxuICAgICAgbmFtZUFyci5tYXAoaXRlbT0+e1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IF8uZmluZChhcnIsKG8pPT57cmV0dXJuIG9bbmFtZUZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgaWRBcnIucHVzaChvYmpbaWRGaWVsZF0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWRBcnJcclxuICB9XHJcbiAgaWRUb05hbWUgPSAoYXJyLGlkRmllbGQsaWRBcnIsbmFtZUZpZWxkKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IFtdXHJcbiAgICBpZihpZEFyciAmJiBpZEFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlkQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3Qgb2JqID0gXy5maW5kKGFyciwobyk9PntyZXR1cm4gb1tpZEZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgbmFtZUFyci5wdXNoKG9ialtuYW1lRmllbGRdKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVBcnJcclxuICB9XHJcbiAgLy/ojrflj5bliIbnu4RcclxuICBnZXRHcm91cCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBMaXN0OiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5paw5aKe5YiG57uEXHJcbiAgYWRkTmV3R3JvdXAgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lj5bmtojmlrDlop5cclxuICBhZGRDYW5jZWwgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICBnX2RlczonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOWIhue7hFxyXG4gIGFkZE9rID0gKCk9PntcclxuICAgIGNvbnN0IHsgZ19uYW1lLGdfZGVzIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihnX25hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfnu4TlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB7Z19uYW1lLGdfZGVzfVxyXG4gICAgICB3eUF4aW9zUG9zdCgnR3JvdXAvc2F2ZUdyb3VwJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICAgICAgICBnX2RlczonJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19uYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBnX2Rlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19kZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pWw5o2u5rqQXHJcbiAgZ2V0U291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRTb3VyY2UnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnZWRpdCcsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PntcclxuICAgICAgICAgIGxldCBkb20gPSAnJ1xyXG4gICAgICAgICAgaWYocmVjb3JkLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5a6J6KOFXCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5kb0luc3RhbGwocmVjb3JkLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS13cmVuY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaCqOehruWumuimgeWNuOi9veWQlz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXsoKT0+dGhpcy5kb1VuaW5zdGFsbChyZWNvcmQuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpPT57IHJldHVybiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5Y246L29XCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hhaW4tYnJva2VuXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIH1lbHNlIGlmKHJlY29yZC5zeXNwbGF0Zm9ybSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZG9tXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBpc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/kuIvovb3lronoo4XljIVcclxuICBkb3duTG9hZEluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2Rvd25sb2FkJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIGEuZG93bmxvYWQgPSBcImludGltYXRlbG9nX2luc3RhbGwuemlwXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5LiL6L296YWN572u5paH5Lu2XHJcbiAgZG93bkxvYWRGaWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS91cGxvYWRZYW1sJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIC8vYS5kb3dubG9hZCA9IFwiXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5a6J6KOFXHJcbiAgZG9JbnN0YWxsID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9pbnN0YWxsJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y246L29XHJcbiAgZG9Vbmluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VuaW5zdGFsbCcse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRTb3VyY2UgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldFNvdXJjZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGxvZ0xpc3QgPSByZXNwb25zZURhdGEubG9nTGlzdFxyXG4gICAgICBpZihsb2dMaXN0ICYmIGxvZ0xpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBsb2dMaXN0KXtcclxuICAgICAgICAgIGl0ZW0ubG9naXNzaW5nbGUgPSBpdGVtLmxvZ2lzc2luZ2xlID09PSd0cnVlJz90cnVlOmZhbHNlXHJcbiAgICAgICAgICBpdGVtLmxvZ2lzcmVyZWFkID0gaXRlbS5sb2dpc3JlcmVhZCA9PT0ndHJ1ZSc/dHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc291cmNlbmFtZSxcclxuICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgc2V0eXBlLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNlbGdyb3VwXHJcbiAgICAgIH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgICAgIHNldHlwZSxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc2VsZ3JvdXBcclxuICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICB0aGlzLnNob3dEcmF3ZXIoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGRhdGFDaGFuZ2UgPSAoZSxhcmcpPT57XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZSkpe1xyXG4gICAgICBpZihpdGVtID09PSBhcmcpe1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2FyZ106IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3BsYXRmb3JtQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgbGV0IHNldHlwZSA9IHRoaXMuc3RhdGUuc2V0eXBlXHJcbiAgICBpZih2YWx1ZSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgc2V0eXBlID0gJ2hhbmRzZXQnXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzeXNwbGF0Zm9ybTogdmFsdWUsXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicnLCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHNldHlwZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZXR5cGVDaGFuZ2UgPSAoc2V0eXBlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2V0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQWRkTG9nID0gKCk9PntcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBjb25zdCBjdXJMb2cgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICBsb2dwYXRoOicnLFxyXG4gICAgICBsb2dpc3JlcmVhZDogZmFsc2UsXHJcbiAgICAgIGxvZ2lzc2luZ2xlOiB0cnVlLFxyXG4gICAgICBsb2d0YWc6JycsXHJcbiAgICAgIGxvZ3J1bGU6W11cclxuICAgIH1cclxuICAgIGNvbnN0IGN1ckxvZ0xpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmxvZ0xpc3QpXHJcbiAgICBjdXJMb2dMaXN0LnB1c2goY3VyTG9nKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbG9nTGlzdDogWy4uLmN1ckxvZ0xpc3RdXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvRGVsZXRlTG9nID0gKGlkKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdC5zcGxpY2UoaSwxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGxvZ0xpc3Q6IFsuLi5jdXJMb2dMaXN0XVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVMb2cgPSAoaWQsYXJnLHZhbHVlKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdFtpXVthcmddID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2dMaXN0OiBbLi4uY3VyTG9nTGlzdF1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgICAgIHNvdXJjZWRlczonJyxcclxuXHJcbiAgICAgICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwOicnLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicyMicsIC8v5Li75py656uv5Y+jXHJcbiAgICAgICAgc3lzcGxhdGZvcm06J2xpbnV4JywvL+S4u+acuuezu+e7n1xyXG4gICAgICAgIGxvZ0xpc3Q6W10sICAvL+aXpeW/l+WIl+ihqFxyXG4gICAgICAgIHNldHlwZTonaGFuZHNldCcsXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgYWN0aXZlS2V5OicxJyxcclxuICAgICAgICBzZWxncm91cDpbXVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOaVsOaNrua6kFxyXG4gIGRvU2F2ZSA9ICgpPT57XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgIHNvdXJjZWRlcyxcclxuICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICBob3N0dXNlciwgLy/kuLvmnLrnlKjmiLflkI1cclxuICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgc3lzcGxhdGZvcm0sLy/kuLvmnLrns7vnu59cclxuICAgICAgbG9nTGlzdCwgIC8v5pel5b+X5YiX6KGoXHJcbiAgICAgIHNldHlwZSxcclxuICAgICAgaWQsXHJcbiAgICAgIHNlbGdyb3VwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgc291cmNlbmFtZSxcclxuICAgICAgc291cmNlZGVzLFxyXG4gICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgIGhvc3R1c2VyLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICBzeXNwbGF0Zm9ybSwvL+S4u+acuuezu+e7n1xyXG4gICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgc2V0eXBlLFxyXG4gICAgICBpZCxcclxuICAgICAgc2VsZ3JvdXBcclxuICAgIH1cclxuICAgIC8v5ZCI5rOV5oCn5qCh6aqMXHJcbiAgICBjb25zdCBlcnJvTGlzdCA9IFtdXHJcblxyXG4gICAgaWYoaW5mby5zb3VyY2VuYW1lID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+aVsOaNrua6kOWQjeensOS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZSBpZighIGZvck5hbWUudGVzdChpbmZvLnNvdXJjZW5hbWUpKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5pWw5o2u5rqQ5ZCN56ew5qC85byP5LiN5q2j56GuJylcclxuICAgIH1cclxuICAgIGlmKGluZm8uc2VsZ3JvdXAubGVuZ3RoID09PSAwKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5omA5bGe5YiG57uE5LiN6IO95Li656m6JylcclxuICAgIH1cclxuICAgIGlmKGluZm8uaG9zdGlwID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+S4u+acumlw5LiN6IO95Li656m6JylcclxuICAgIH1lbHNlIGlmKCEgc2luZ2xlSXAudGVzdChpbmZvLmhvc3RpcCkpe1xyXG4gICAgICBlcnJvTGlzdC5wdXNoKCfkuLvmnLppcOagvOW8j+S4jeato+ehricpXHJcbiAgICB9XHJcbiAgICBpZihpbmZvLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgaWYoaW5mby5ob3N0dXNlciA9PT0gJycpe1xyXG4gICAgICAgIGVycm9MaXN0LnB1c2goJ+eUqOaIt+WQjeS4jeiDveS4uuepuicpXHJcbiAgICAgIH1cclxuICAgICAgaWYoaW5mby5ob3N0cGFzc3dvcmQgPT09ICcnKXtcclxuICAgICAgICBlcnJvTGlzdC5wdXNoKCflr4bnoIHkuI3og73kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGluZm8uaG9zdHBvcnQgIT09ICcnICYmICghc2luZ2xlUG9ydC50ZXN0KGluZm8uaG9zdHBvcnQpKSl7XHJcbiAgICAgICAgZXJyb0xpc3QucHVzaCgnU1NI56uv5Y+j5peg5pWIJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaW5mby5sb2dMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+acqua3u+WKoOaXpeW/l+S/oeaBrycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGxvZ0xpc3Qpe1xyXG4gICAgICAgIGlmKGl0ZW0ubG9ncGF0aCA9PT0gJycgfHwgaXRlbS5sb2d0YWcgPT09ICcnKXtcclxuICAgICAgICAgIGVycm9MaXN0LnB1c2goJ+aXpeW/l+S/oeaBr+acquWhq+WGmeWujOaVtCcpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGVycm9MaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2Uvc2F2ZVNvdXJjZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIHRoaXMub25DbG9zZSgpXHJcbiAgICAgICAgICB0aGlzLmdldFNvdXJjZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGV0IHN0ciA9ICcnXHJcbiAgICAgIGVycm9MaXN0Lm1hcCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBzdHIgKz0gaW5kZXgrMSsnLicraXRlbSsnICAnXHJcbiAgICAgIH0pXHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZyhzdHIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v5Yig6ZmkXHJcbiAgZGVsU291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUuaWRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5JylcclxuICAgIH1lbHNle1xyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL2RlbFNvdXJjZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgdGFic0NoYW5nZSA9IChhY3RpdmVLZXkpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbGFzdFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbGFzdEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgLSAxXHJcbiAgICBsYXN0S2V5ID0gbGFzdEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IGxhc3RLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV4dFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbmV4dEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgKyAxXHJcbiAgICBuZXh0S2V5ID0gbmV4dEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IG5leHRLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGNvbnN0IHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RhdGUuaWRzXHJcbiAgICBjb25zdCByb3dTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHNlbGVjdGVkUm93S2V5cyxcclxuICAgICAgb25DaGFuZ2U6IChzZWxlY3RlZFJvd0tleXMpID0+IHtcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogc2VsZWN0ZWRSb3dLZXlzXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxTb3VyY2U6KCk9Pnt9fSBva1RleHQ9XCLnoa7lrppcIiBjYW5jZWxUZXh0PVwi5Y+W5raIXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17e21hcmdpbkxlZnQ6IFwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51cy1zcXVhcmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5Yig6ZmkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L1BvcGNvbmZpcm0+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3Rpb249e3Jvd1NlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YT90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLmlbDmja7mupDphY3nva5cIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgd2lkdGg9e1wiODAlXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICA8VGFicyBkZWZhdWx0QWN0aXZlS2V5PVwiMVwiIGFjdGl2ZUtleT17dGhpcy5zdGF0ZS5hY3RpdmVLZXl9IG9uQ2hhbmdlPXt0aGlzLnRhYnNDaGFuZ2V9PlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5Z+65pys5L+h5oGvXCIga2V5PVwiMVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5pWw5o2u5rqQ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuc291cmNlbmFtZX0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZW5hbWUnKX0gY3NzPXt7d2lkdGg6XCI0MjBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuaVsOaNrua6kOaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnNvdXJjZWRlc30gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZWRlcycpfSBjc3M9e3t3aWR0aDpcIjQyMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5omA5bGe5YiG57uE77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJtdWx0aXBsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsZWFzZSBzZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICczMjBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGdyb3VwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuaWRUb05hbWUodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2lkJyx0aGlzLnN0YXRlLnNlbGdyb3VwLCdnX25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ncm91cExpc3QgJiYgdGhpcy5zdGF0ZS5ncm91cExpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmdyb3VwTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0uaWR9IHZhbHVlPXtpdGVtLmdfbmFtZX0gdGl0bGU9e2l0ZW0uZ19uYW1lfT57aXRlbS5nX25hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc05ldz9cclxuICAgICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkTmV3R3JvdXB9IHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj4gPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5paw5aKe5YiG57uEPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzTmV3P1xyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luTGVmdDpcIjEwMHB4XCIsd2lkdGg6XCI0MjBweFwiLHBhZGRpbmc6XCIyMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbWFyZ2luVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCA4MHB4XCJ9fT7nu4TlkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5nX25hbWV9IG9uQ2hhbmdlPXt0aGlzLmdfbmFtZUNoYW5nZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLG1hcmdpblRvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgODBweFwifX0+5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuZ19kZXN9IG9uQ2hhbmdlPXt0aGlzLmdfZGVzQ2hhbmdlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e21hcmdpblRvcDpcIjIwcHhcIix0ZXh0QWxpZ246XCJyaWdodFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRDYW5jZWx9IHNpemU9XCJzbWFsbFwiIGNzcz17e21hcmdpblJpZ2h0OlwiMjBweFwifX0+5Y+W5raIPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRPa30gIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+56Gu5a6aPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuS4u+aculwiIGtleT1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuS4u+acuuWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RuYW1lfSBvbkNoYW5nZT17KGUpPT50aGlzLmRhdGFDaGFuZ2UoZSwnaG9zdG5hbWUnKX0gY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Puezu+e7n+W5s+WPsO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zeXNwbGF0Zm9ybUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J3dpbmRvd3MnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXdpbmRvd3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IFdpbmRvd3MgPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdsaW51eCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGludXhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IExpbnV4IDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7kuLvmnLppcO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RpcH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RpcCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybSA9PT0gJ2xpbnV4Jz9cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7nlKjmiLflkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHVzZXJ9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0dXNlcicpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5a+G56CB77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPFBhc3N3b3JkIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RwYXNzd29yZH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RwYXNzd29yZCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+U1NI56uv5Y+j77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHBsYWNlaG9sZGVyPSfpu5jorqTkuLoyMicgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHBvcnR9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0cG9ydCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5pel5b+XXCIga2V5PVwiM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Um93IGNzcz17e3RleHRBbGlnbjpcImNlbnRlclwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezh9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMilcIn19PuaWh+S7tui3r+W+hDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4xKVwifX0+5bqU55So5qCH6K+GPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXszfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjIpXCJ9fT7mmK/lkKbku47lpLTor7votbc8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezN9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMSlcIn19PuaYr+WQpuWNleihjOaXpeW/lzwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4yKVwifX0+6Kej5p6Q6KeE5YiZPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXsyfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjEpXCJ9fT7mk43kvZw8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dMaXN0ICYmIHRoaXMuc3RhdGUubG9nTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvZ0xpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2dTZXQgZG9EZWxldGVMb2c9e3RoaXMuZG9EZWxldGVMb2d9IHVwZGF0ZUxvZz17dGhpcy51cGRhdGVMb2d9IGtleT17aXRlbS5pZH0gZGF0YT17aXRlbX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDxBZGRMb2dTZXREb20+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmRvQWRkTG9nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0FkZExvZ1NldERvbT5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuWuieijheaWueW8j1wiIGtleT1cIjRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuWuieijheaWueW8j++8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3lzcGxhdGZvcm0gPT09ICd3aW5kb3dzJz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J2hhbmRzZXQnPjxpIGNsYXNzTmFtZT1cImZhIGZhLWhhbmQtcG9pbnRlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiDmiYvliqg8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdoYW5kc2V0Jz48aSBjbGFzc05hbWU9XCJmYSBmYS1oYW5kLXBvaW50ZXItb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4g5omL5YqoPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT0nYXV0b3NldCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFza3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IOiHquWKqDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgIDwvVGFicz5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5vbkNsb3NlfT7lj5bmtog8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVLZXkgPT09ICcxJz9cclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmxhc3RTdGVwfSA+5LiK5LiA5q2lPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlS2V5ID09PSAnNCc/XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMTBweFwifX0gb25DbGljaz17dGhpcy5uZXh0U3RlcH0gPuS4i+S4gOatpTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gJzQnP1xyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmRvU2F2ZX0gdHlwZT1cInByaW1hcnlcIiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwifX0+5L+d5a2YPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0b1NldFxyXG4iXX0= */\"\n};\n\nvar _ref34 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref35 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref36 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\"\n} : {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref37 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref38 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref39 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9pbmR1c3RyeS9hcHAvc3JjL1N5c3RlbUJhc2UvQXV0b1NldC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpdUI2QiIsImZpbGUiOiIvaW5kdXN0cnkvYXBwL3NyYy9TeXN0ZW1CYXNlL0F1dG9TZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogIEBqc3gganN4ICovXHJcbmltcG9ydCBSZWFjdCAseyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgRHJhd2VyLCBCdXR0b24sIFJvdywgQ29sLCBJbnB1dCwgVGFicywgU2VsZWN0LCBQb3Bjb25maXJtLCBtZXNzYWdlIH0gZnJvbSAnYW50ZCdcclxuaW1wb3J0IHsganN4LCBjc3MgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xyXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xyXG5cclxuaW1wb3J0ICBXeVRhYmxlICBmcm9tICcuLi9jb21wb25lbnRzL1d5VGFibGUnXHJcbmltcG9ydCBMb2dTZXQgZnJvbSAnLi9Mb2dTZXQnXHJcbmltcG9ydCB7IEFtb2R1bGUgfSBmcm9tICcuLi9jb21wb25lbnRzL0Ftb2R1bGUnXHJcbmltcG9ydCB7IHd5QXhpb3NQb3N0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9XeUF4aW9zJ1xyXG5pbXBvcnQgV3lTcGluIGZyb20gJy4uL2NvbXBvbmVudHMvV3lTcGluJ1xyXG5pbXBvcnQgeyBzaW5nbGVJcCwgc2luZ2xlUG9ydCwgZm9yTmFtZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVnRXhwJ1xyXG5jb25zdCBUYWJQYW5lID0gVGFicy5UYWJQYW5lXHJcbmNvbnN0IFRleHRBcmVhID0gSW5wdXQuVGV4dEFyZWFcclxuY29uc3QgT3B0aW9uID0gU2VsZWN0Lk9wdGlvblxyXG5jb25zdCBQYXNzd29yZCA9IElucHV0LlBhc3N3b3JkXHJcbmxldCBBZGRMb2dTZXREb20gPSBzdHlsZWQuZGl2KHtcclxuICBsaW5lSGVpZ2h0OlwiNDBweFwiLFxyXG4gIGJvcmRlcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuMikgZGFzaGVkIDFweFwiLFxyXG4gIGJvcmRlclJhZGl1czpcIjVweFwiLFxyXG4gIHRleHRBbGlnbjpcImNlbnRlclwiLFxyXG4gIGN1cnNvcjpcInBvaW50ZXJcIixcclxuICBtYXJnaW5Ub3A6XCIxMHB4XCIsXHJcbiAgJyY6aG92ZXInOntcclxuICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjIpXCJcclxuICB9LFxyXG4gICcmOmFjdGl2ZSc6e1xyXG4gICAgYmFja2dyb3VuZDogXCJyZ2JhKDAsMCwwLDAuNClcIlxyXG4gIH1cclxufSlcclxuY2xhc3MgQXV0b1NldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGUgPSB7XHJcbiAgICB2aXNpYmxlOiBmYWxzZSxcclxuXHJcbiAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgc291cmNlZGVzOicnLFxyXG4gICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICBob3N0aXA6JycsIC8v5Li75py6SXBcclxuICAgIGhvc3R1c2VyOicnLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgaG9zdHBvcnQ6JycsIC8v5Li75py656uv5Y+jXHJcbiAgICBzeXNwbGF0Zm9ybTonbGludXgnLC8v5Li75py657O757ufXHJcbiAgICBsb2dMaXN0OltdLCAgLy/ml6Xlv5fliJfooahcclxuICAgIHNldHlwZTonaGFuZHNldCcsXHJcblxyXG4gICAgYWN0aXZlS2V5OicxJyxcclxuXHJcblxyXG4gICAgcGFnZVNpemU6NSxcclxuICAgIGlzU3BpbmluZzogZmFsc2UsXHJcbiAgICBpZHM6W10sXHJcbiAgICB4RGF0YTogW10sXHJcbiAgICB5RGF0YTogW10sXHJcbiAgICBpZDonJyxcclxuICAgIC8v5paw5aKe5YiG57uEXHJcbiAgICBpc05ldzogZmFsc2UsXHJcbiAgICBnX25hbWU6JycsXHJcbiAgICBnX2RlczonJyxcclxuICAgIGdyb3VwTGlzdDpbXSxcclxuICAgIHNlbGdyb3VwOltdLFxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpe1xyXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5nZXRTb3VyY2UoKVxyXG4gICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgfVxyXG4gIHNlbGdyb3VwQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IHZhbHVlXHJcbiAgICBjb25zdCBpZEFyciA9IHRoaXMubmFtZVRvSWQodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2dfbmFtZScsbmFtZUFyciwnaWQnKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2VsZ3JvdXA6IF8uY2xvbmVEZWVwKGlkQXJyKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL25hbWXlkoxpZOi9rOaNolxyXG4gIG5hbWVUb0lkID0gKGFycixuYW1lRmllbGQsbmFtZUFycixpZEZpZWxkKT0+e1xyXG4gICAgY29uc3QgaWRBcnIgPSBbXVxyXG4gICAgaWYobmFtZUFyciAmJiBuYW1lQXJyLmxlbmd0aD4wKXtcclxuICAgICAgbmFtZUFyci5tYXAoaXRlbT0+e1xyXG4gICAgICAgIGNvbnN0IG9iaiA9IF8uZmluZChhcnIsKG8pPT57cmV0dXJuIG9bbmFtZUZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgaWRBcnIucHVzaChvYmpbaWRGaWVsZF0pXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWRBcnJcclxuICB9XHJcbiAgaWRUb05hbWUgPSAoYXJyLGlkRmllbGQsaWRBcnIsbmFtZUZpZWxkKT0+e1xyXG4gICAgY29uc3QgbmFtZUFyciA9IFtdXHJcbiAgICBpZihpZEFyciAmJiBpZEFyci5sZW5ndGg+MCl7XHJcbiAgICAgIGlkQXJyLm1hcChpdGVtPT57XHJcbiAgICAgICAgY29uc3Qgb2JqID0gXy5maW5kKGFyciwobyk9PntyZXR1cm4gb1tpZEZpZWxkXSA9PT0gaXRlbX0pXHJcbiAgICAgICAgbmFtZUFyci5wdXNoKG9ialtuYW1lRmllbGRdKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWVBcnJcclxuICB9XHJcbiAgLy/ojrflj5bliIbnu4RcclxuICBnZXRHcm91cCA9ICgpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnR3JvdXAvZ2V0R3JvdXAnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZ3JvdXBMaXN0OiByZXNwb25zZURhdGEueXl5LFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5paw5aKe5YiG57uEXHJcbiAgYWRkTmV3R3JvdXAgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IHRydWVcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgLy/lj5bmtojmlrDlop5cclxuICBhZGRDYW5jZWwgPSAoKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICBnX2RlczonJ1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOWIhue7hFxyXG4gIGFkZE9rID0gKCk9PntcclxuICAgIGNvbnN0IHsgZ19uYW1lLGdfZGVzIH0gPSB0aGlzLnN0YXRlXHJcbiAgICBpZihnX25hbWUgPT09ICcnKXtcclxuICAgICAgbWVzc2FnZS53YXJuaW5nKCfnu4TlkI3kuI3og73kuLrnqbonKVxyXG4gICAgfWVsc2V7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB7Z19uYW1lLGdfZGVzfVxyXG4gICAgICB3eUF4aW9zUG9zdCgnR3JvdXAvc2F2ZUdyb3VwJyx7aW5mb30sKHJlc3VsdCk9PntcclxuICAgICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICAgIG1lc3NhZ2Uuc3VjY2VzcyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgaXNOZXc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGdfbmFtZTonJyxcclxuICAgICAgICAgICAgICBnX2RlczonJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy5nZXRHcm91cCgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGdfbmFtZUNoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19uYW1lOiBlLnRhcmdldC52YWx1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBnX2Rlc0NoYW5nZSA9IChlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZ19kZXM6IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v6I635Y+W5pWw5o2u5rqQXHJcbiAgZ2V0U291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlzU3BpbmluZzogdHJ1ZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9nZXRTb3VyY2UnLHt9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBsZXQgY3VyeERhdGEgPSBfLmNsb25lRGVlcChyZXNwb25zZURhdGEueHh4KVxyXG4gICAgICBjdXJ4RGF0YS5wdXNoKHtcclxuICAgICAgICB0aXRsZTogJ+aTjeS9nCcsXHJcbiAgICAgICAgZGF0YUluZGV4OiAnZWRpdCcsXHJcbiAgICAgICAgcmVuZGVyOiAodGV4dCwgcmVjb3JkLCBpbmRleCk9PntcclxuICAgICAgICAgIGxldCBkb20gPSAnJ1xyXG4gICAgICAgICAgaWYocmVjb3JkLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5a6J6KOFXCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5kb0luc3RhbGwocmVjb3JkLmlkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS13cmVuY2hcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxQb3Bjb25maXJtXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIuaCqOehruWumuimgeWNuOi9veWQlz9cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgb25Db25maXJtPXsoKT0+dGhpcy5kb1VuaW5zdGFsbChyZWNvcmQuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw9eygpPT57IHJldHVybiB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgb2tUZXh0PVwi56Gu5a6aXCJcclxuICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHQ9XCLlj5bmtohcIlxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHRpdGxlPVwi5Y246L29XCIgc3R5bGU9e3tjdXJzb3I6XCJwb2ludGVyXCIsY29sb3I6IFwiIzAwQ0M2NlwiLG1hcmdpbkxlZnQ6XCIyMHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2hhaW4tYnJva2VuXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUG9wY29uZmlybT5cclxuXHJcbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIH1lbHNlIGlmKHJlY29yZC5zeXNwbGF0Zm9ybSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgICAgICAgZG9tID0gPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLnvJbovpFcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCJ9fSBvbkNsaWNrPXsoKT0+dGhpcy5lZGl0U291cmNlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGVuY2lsLXNxdWFyZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9XCLkuIvovb3lronoo4XljIVcIiBzdHlsZT17e2N1cnNvcjpcInBvaW50ZXJcIixjb2xvcjogXCIjMDBDQzY2XCIsbWFyZ2luTGVmdDpcIjIwcHhcIn19IG9uQ2xpY2s9eygpPT50aGlzLmRvd25Mb2FkSW5zdGFsbChyZWNvcmQuaWQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb3VkLWRvd25sb2FkXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT1cIuS4i+i9vemFjee9ruaWh+S7tlwiIHN0eWxlPXt7Y3Vyc29yOlwicG9pbnRlclwiLGNvbG9yOiBcIiMwMENDNjZcIixtYXJnaW5MZWZ0OlwiMjBweFwifX0gb25DbGljaz17KCk9PnRoaXMuZG93bkxvYWRGaWxlKHJlY29yZC5pZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZG9tXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgeERhdGE6IGN1cnhEYXRhLFxyXG4gICAgICAgICAgeURhdGE6IHJlc3BvbnNlRGF0YS55eXksXHJcbiAgICAgICAgICBpc1NwaW5pbmc6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbiAgLy/kuIvovb3lronoo4XljIVcclxuICBkb3duTG9hZEluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2Rvd25sb2FkJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIGEuZG93bmxvYWQgPSBcImludGltYXRlbG9nX2luc3RhbGwuemlwXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5LiL6L296YWN572u5paH5Lu2XHJcbiAgZG93bkxvYWRGaWxlID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS91cGxvYWRZYW1sJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAwKXtcclxuICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOyAvL+WIm+W7uuS4gOS4qjxhPjwvYT7moIfnrb5cclxuICAgICAgYS5ocmVmID0gcmVzcG9uc2VEYXRhLm1zZzsgLy8gcmVzcG9uc2UgaXMgYSBibG9iXHJcbiAgICAgIC8vYS5kb3dubG9hZCA9IFwiXCI7ICAvL+aWh+S7tuWQjeensFxyXG4gICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgIGEuY2xpY2soKTtcclxuICAgICAgYS5yZW1vdmUoKTtcclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5a6J6KOFXHJcbiAgZG9JbnN0YWxsID0gKGlkKT0+e1xyXG4gICAgd3lBeGlvc1Bvc3QoJ1NvdXJjZS9pbnN0YWxsJyx7aWR9LChyZXN1bHQpPT57XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IHJlc3VsdC5kYXRhLm1zZ1xyXG4gICAgICBpZihyZXNwb25zZURhdGEuc3RhdHVzID09PSAxKXtcclxuICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgbWVzc2FnZS53YXJuaW5nKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIC8v5Y246L29XHJcbiAgZG9Vbmluc3RhbGwgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL3VuaW5zdGFsbCcse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgbWVzc2FnZS5zdWNjZXNzKHJlc3BvbnNlRGF0YS5tc2cpXHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICAvL+e8lui+kVxyXG4gIGVkaXRTb3VyY2UgPSAoaWQpPT57XHJcbiAgICB3eUF4aW9zUG9zdCgnU291cmNlL2dldFNvdXJjZScse2lkfSwocmVzdWx0KT0+e1xyXG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSByZXN1bHQuZGF0YS5tc2dcclxuICAgICAgbGV0IGxvZ0xpc3QgPSByZXNwb25zZURhdGEubG9nTGlzdFxyXG4gICAgICBpZihsb2dMaXN0ICYmIGxvZ0xpc3QubGVuZ3RoPjApe1xyXG4gICAgICAgIGZvcihsZXQgaXRlbSBvZiBsb2dMaXN0KXtcclxuICAgICAgICAgIGl0ZW0ubG9naXNzaW5nbGUgPSBpdGVtLmxvZ2lzc2luZ2xlID09PSd0cnVlJz90cnVlOmZhbHNlXHJcbiAgICAgICAgICBpdGVtLmxvZ2lzcmVyZWFkID0gaXRlbS5sb2dpc3JlcmVhZCA9PT0ndHJ1ZSc/dHJ1ZTpmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCB7XHJcbiAgICAgICAgc291cmNlbmFtZSxcclxuICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgc2V0eXBlLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNlbGdyb3VwXHJcbiAgICAgIH0gPSByZXNwb25zZURhdGFcclxuICAgICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgICAgICBzb3VyY2VkZXMsXHJcbiAgICAgICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICAgICAgaG9zdHVzZXIsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgICAgIHN5c3BsYXRmb3JtLC8v5Li75py657O757ufXHJcbiAgICAgICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgICAgIHNldHlwZSxcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgc2VsZ3JvdXBcclxuICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICB0aGlzLnNob3dEcmF3ZXIoKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG4gIGRhdGFDaGFuZ2UgPSAoZSxhcmcpPT57XHJcbiAgICBmb3IobGV0IGl0ZW0gb2YgT2JqZWN0LmtleXModGhpcy5zdGF0ZSkpe1xyXG4gICAgICBpZihpdGVtID09PSBhcmcpe1xyXG4gICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgW2FyZ106IGUudGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN5c3BsYXRmb3JtQ2hhbmdlID0gKHZhbHVlKT0+e1xyXG4gICAgbGV0IHNldHlwZSA9IHRoaXMuc3RhdGUuc2V0eXBlXHJcbiAgICBpZih2YWx1ZSA9PT0gJ3dpbmRvd3MnKXtcclxuICAgICAgc2V0eXBlID0gJ2hhbmRzZXQnXHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBzeXNwbGF0Zm9ybTogdmFsdWUsXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicnLCAvL+S4u+acuuerr+WPo1xyXG4gICAgICAgIHNldHlwZVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICBzZXR5cGVDaGFuZ2UgPSAoc2V0eXBlKT0+e1xyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgc2V0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvQWRkTG9nID0gKCk9PntcclxuICAgIGNvbnN0IHJhbmRvbUNvdW50ID0gTWF0aC5yYW5kb20oKTtcclxuICAgIGNvbnN0IGN1clRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGFzSWQgPSBwYXJzZUludChyYW5kb21Db3VudCwxMCkgKyBwYXJzZUludChjdXJUaW1lLDEwKSoxMDBcclxuICAgIGNvbnN0IGlkID0gYXNJZC50b1N0cmluZygpXHJcbiAgICBjb25zdCBjdXJMb2cgPSB7XHJcbiAgICAgIGlkLFxyXG4gICAgICBsb2dwYXRoOicnLFxyXG4gICAgICBsb2dpc3JlcmVhZDogZmFsc2UsXHJcbiAgICAgIGxvZ2lzc2luZ2xlOiB0cnVlLFxyXG4gICAgICBsb2d0YWc6JycsXHJcbiAgICAgIGxvZ3J1bGU6W11cclxuICAgIH1cclxuICAgIGNvbnN0IGN1ckxvZ0xpc3QgPSBfLmNsb25lRGVlcCh0aGlzLnN0YXRlLmxvZ0xpc3QpXHJcbiAgICBjdXJMb2dMaXN0LnB1c2goY3VyTG9nKVxyXG4gICAgaWYodGhpcy5faXNNb3VudGVkKXtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgbG9nTGlzdDogWy4uLmN1ckxvZ0xpc3RdXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGRvRGVsZXRlTG9nID0gKGlkKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdC5zcGxpY2UoaSwxKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGxvZ0xpc3Q6IFsuLi5jdXJMb2dMaXN0XVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVMb2cgPSAoaWQsYXJnLHZhbHVlKT0+e1xyXG4gICAgY29uc3QgY3VyTG9nTGlzdCA9IF8uY2xvbmVEZWVwKHRoaXMuc3RhdGUubG9nTGlzdClcclxuICAgIGZvcihsZXQgaT0wOyBpPGN1ckxvZ0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICBpZihjdXJMb2dMaXN0W2ldLmlkID09PSBpZCl7XHJcbiAgICAgICAgY3VyTG9nTGlzdFtpXVthcmddID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2dMaXN0OiBbLi4uY3VyTG9nTGlzdF1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgc2hvd0RyYXdlciA9ICgpID0+IHtcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICBzb3VyY2VuYW1lOicnLFxyXG4gICAgICAgIHNvdXJjZWRlczonJyxcclxuXHJcbiAgICAgICAgaG9zdG5hbWU6JycsIC8v5Li75py65ZCN56ewXHJcbiAgICAgICAgaG9zdGlwOicnLCAvL+S4u+acuklwXHJcbiAgICAgICAgaG9zdHVzZXI6JycsIC8v5Li75py655So5oi35ZCNXHJcbiAgICAgICAgaG9zdHBhc3N3b3JkOicnLCAvL+S4u+acuuWvhueggVxyXG4gICAgICAgIGhvc3Rwb3J0OicyMicsIC8v5Li75py656uv5Y+jXHJcbiAgICAgICAgc3lzcGxhdGZvcm06J2xpbnV4JywvL+S4u+acuuezu+e7n1xyXG4gICAgICAgIGxvZ0xpc3Q6W10sICAvL+aXpeW/l+WIl+ihqFxyXG4gICAgICAgIHNldHlwZTonaGFuZHNldCcsXHJcbiAgICAgICAgaWQ6JycsXHJcbiAgICAgICAgYWN0aXZlS2V5OicxJyxcclxuICAgICAgICBzZWxncm91cDpbXVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuICAvL+S/neWtmOaVsOaNrua6kFxyXG4gIGRvU2F2ZSA9ICgpPT57XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHNvdXJjZW5hbWUsXHJcbiAgICAgIHNvdXJjZWRlcyxcclxuICAgICAgaG9zdG5hbWUsIC8v5Li75py65ZCN56ewXHJcbiAgICAgIGhvc3RpcCwgLy/kuLvmnLpJcFxyXG4gICAgICBob3N0dXNlciwgLy/kuLvmnLrnlKjmiLflkI1cclxuICAgICAgaG9zdHBhc3N3b3JkLCAvL+S4u+acuuWvhueggVxyXG4gICAgICBob3N0cG9ydCwgLy/kuLvmnLrnq6/lj6NcclxuICAgICAgc3lzcGxhdGZvcm0sLy/kuLvmnLrns7vnu59cclxuICAgICAgbG9nTGlzdCwgIC8v5pel5b+X5YiX6KGoXHJcbiAgICAgIHNldHlwZSxcclxuICAgICAgaWQsXHJcbiAgICAgIHNlbGdyb3VwXHJcbiAgICB9ID0gdGhpcy5zdGF0ZVxyXG4gICAgY29uc3QgaW5mbyA9IHtcclxuICAgICAgc291cmNlbmFtZSxcclxuICAgICAgc291cmNlZGVzLFxyXG4gICAgICBob3N0bmFtZSwgLy/kuLvmnLrlkI3np7BcclxuICAgICAgaG9zdGlwLCAvL+S4u+acuklwXHJcbiAgICAgIGhvc3R1c2VyLCAvL+S4u+acuueUqOaIt+WQjVxyXG4gICAgICBob3N0cGFzc3dvcmQsIC8v5Li75py65a+G56CBXHJcbiAgICAgIGhvc3Rwb3J0LCAvL+S4u+acuuerr+WPo1xyXG4gICAgICBzeXNwbGF0Zm9ybSwvL+S4u+acuuezu+e7n1xyXG4gICAgICBsb2dMaXN0LCAgLy/ml6Xlv5fliJfooahcclxuICAgICAgc2V0eXBlLFxyXG4gICAgICBpZCxcclxuICAgICAgc2VsZ3JvdXBcclxuICAgIH1cclxuICAgIC8v5ZCI5rOV5oCn5qCh6aqMXHJcbiAgICBjb25zdCBlcnJvTGlzdCA9IFtdXHJcblxyXG4gICAgaWYoaW5mby5zb3VyY2VuYW1lID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+aVsOaNrua6kOWQjeensOS4jeiDveS4uuepuicpXHJcbiAgICB9ZWxzZSBpZighIGZvck5hbWUudGVzdChpbmZvLnNvdXJjZW5hbWUpKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5pWw5o2u5rqQ5ZCN56ew5qC85byP5LiN5q2j56GuJylcclxuICAgIH1cclxuICAgIGlmKGluZm8uc2VsZ3JvdXAubGVuZ3RoID09PSAwKXtcclxuICAgICAgZXJyb0xpc3QucHVzaCgn5omA5bGe5YiG57uE5LiN6IO95Li656m6JylcclxuICAgIH1cclxuICAgIGlmKGluZm8uaG9zdGlwID09PSAnJyl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+S4u+acumlw5LiN6IO95Li656m6JylcclxuICAgIH1lbHNlIGlmKCEgc2luZ2xlSXAudGVzdChpbmZvLmhvc3RpcCkpe1xyXG4gICAgICBlcnJvTGlzdC5wdXNoKCfkuLvmnLppcOagvOW8j+S4jeato+ehricpXHJcbiAgICB9XHJcbiAgICBpZihpbmZvLnN5c3BsYXRmb3JtID09PSAnbGludXgnKXtcclxuICAgICAgaWYoaW5mby5ob3N0dXNlciA9PT0gJycpe1xyXG4gICAgICAgIGVycm9MaXN0LnB1c2goJ+eUqOaIt+WQjeS4jeiDveS4uuepuicpXHJcbiAgICAgIH1cclxuICAgICAgaWYoaW5mby5ob3N0cGFzc3dvcmQgPT09ICcnKXtcclxuICAgICAgICBlcnJvTGlzdC5wdXNoKCflr4bnoIHkuI3og73kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGluZm8uaG9zdHBvcnQgIT09ICcnICYmICghc2luZ2xlUG9ydC50ZXN0KGluZm8uaG9zdHBvcnQpKSl7XHJcbiAgICAgICAgZXJyb0xpc3QucHVzaCgnU1NI56uv5Y+j5peg5pWIJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaW5mby5sb2dMaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIGVycm9MaXN0LnB1c2goJ+acqua3u+WKoOaXpeW/l+S/oeaBrycpXHJcbiAgICB9ZWxzZXtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGxvZ0xpc3Qpe1xyXG4gICAgICAgIGlmKGl0ZW0ubG9ncGF0aCA9PT0gJycgfHwgaXRlbS5sb2d0YWcgPT09ICcnKXtcclxuICAgICAgICAgIGVycm9MaXN0LnB1c2goJ+aXpeW/l+S/oeaBr+acquWhq+WGmeWujOaVtCcpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGVycm9MaXN0Lmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIHd5QXhpb3NQb3N0KCdTb3VyY2Uvc2F2ZVNvdXJjZScse2luZm99LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIHRoaXMub25DbG9zZSgpXHJcbiAgICAgICAgICB0aGlzLmdldFNvdXJjZSgpXHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICBtZXNzYWdlLndhcm5pbmcocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9ZWxzZXtcclxuICAgICAgbGV0IHN0ciA9ICcnXHJcbiAgICAgIGVycm9MaXN0Lm1hcCgoaXRlbSxpbmRleCk9PntcclxuICAgICAgICBzdHIgKz0gaW5kZXgrMSsnLicraXRlbSsnICAnXHJcbiAgICAgIH0pXHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZyhzdHIpXHJcbiAgICB9XHJcbiAgfVxyXG4gIC8v5Yig6ZmkXHJcbiAgZGVsU291cmNlID0gKCk9PntcclxuICAgIGlmKHRoaXMuc3RhdGUuaWRzLmxlbmd0aCA9PT0gMCl7XHJcbiAgICAgIG1lc3NhZ2Uud2FybmluZygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5JylcclxuICAgIH1lbHNle1xyXG4gICAgICB3eUF4aW9zUG9zdCgnU291cmNlL2RlbFNvdXJjZScse2lkczogdGhpcy5zdGF0ZS5pZHN9LChyZXN1bHQpPT57XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gcmVzdWx0LmRhdGEubXNnXHJcbiAgICAgICAgaWYocmVzcG9uc2VEYXRhLnN0YXR1cyA9PT0gMSl7XHJcbiAgICAgICAgICBtZXNzYWdlLnN1Y2Nlc3MocmVzcG9uc2VEYXRhLm1zZylcclxuICAgICAgICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIGlkczogW11cclxuICAgICAgICAgICAgfSwoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2V0U291cmNlKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgIG1lc3NhZ2Uud2FybmluZyhyZXNwb25zZURhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgdGFic0NoYW5nZSA9IChhY3RpdmVLZXkpPT57XHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbGFzdFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbGFzdEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgLSAxXHJcbiAgICBsYXN0S2V5ID0gbGFzdEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IGxhc3RLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgbmV4dFN0ZXAgPSAoKT0+e1xyXG4gICAgbGV0IGFjdGl2ZUtleSA9IHRoaXMuc3RhdGUuYWN0aXZlS2V5XHJcbiAgICBsZXQgbmV4dEtleSA9IHBhcnNlSW50KGFjdGl2ZUtleSkgKyAxXHJcbiAgICBuZXh0S2V5ID0gbmV4dEtleS50b1N0cmluZygpXHJcbiAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBhY3RpdmVLZXk6IG5leHRLZXlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbiAgcGFnZVNpemVDaGFuZ2UgPSAoY3VycmVudCwgc2l6ZSk9PntcclxuICAgIGlmKHRoaXMuX2lzTW91bnRlZCl7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHBhZ2VTaXplOiBzaXplXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCl7XHJcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZVxyXG4gIH1cclxuICByZW5kZXIoKXtcclxuICAgIGNvbnN0IHNlbGVjdGVkUm93S2V5cyA9IHRoaXMuc3RhdGUuaWRzXHJcbiAgICBjb25zdCByb3dTZWxlY3Rpb24gPSB7XHJcbiAgICAgIHNlbGVjdGVkUm93S2V5cyxcclxuICAgICAgb25DaGFuZ2U6IChzZWxlY3RlZFJvd0tleXMpID0+IHtcclxuICAgICAgICBpZih0aGlzLl9pc01vdW50ZWQpe1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGlkczogc2VsZWN0ZWRSb3dLZXlzXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybihcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPEFtb2R1bGU+XHJcbiAgICAgICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgICAgIDxDb2w+XHJcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5zaG93RHJhd2VyfSB0eXBlPVwicHJpbWFyeVwiPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtc3F1YXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxzcGFuIGNzcz17e21hcmdpbkxlZnQ6XCI1cHhcIn19Pua3u+WKoDwvc3Bhbj48L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPFBvcGNvbmZpcm0gY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19IHBsYWNlbWVudD1cInRvcExlZnRcIiB0aXRsZT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/J+ehruWumuimgeWIoOmZpOaJgOmAiemhue+8nyc6J+ivt+WFiOmAieaLqeaCqOimgeWIoOmZpOeahOmhue+8nyd9IG9uQ29uZmlybT17dGhpcy5zdGF0ZS5pZHMubGVuZ3RoPjA/dGhpcy5kZWxTb3VyY2U6KCk9Pnt9fSBva1RleHQ9XCLnoa7lrppcIiBjYW5jZWxUZXh0PVwi5Y+W5raIXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBzdHlsZT17e21hcmdpbkxlZnQ6IFwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1taW51cy1zcXVhcmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5Yig6ZmkPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8L1BvcGNvbmZpcm0+XHJcbiAgICAgICAgICAgICAgICA8L0NvbD5cclxuICAgICAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICAgICAgICA8Um93PlxyXG4gICAgICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3twYWRkaW5nVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFd5U3BpbiBpc1NwaW5pbmc9e3RoaXMuc3RhdGUuaXNTcGluaW5nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxXeVRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVNpemU9e3RoaXMuc3RhdGUucGFnZVNpemV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25TaG93U2l6ZUNoYW5nZT17dGhpcy5wYWdlU2l6ZUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3dTZWxlY3Rpb249e3Jvd1NlbGVjdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB4RGF0YT17dGhpcy5zdGF0ZS54RGF0YT90aGlzLnN0YXRlLnhEYXRhOltdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHlEYXRhPXt0aGlzLnN0YXRlLnlEYXRhP3RoaXMuc3RhdGUueURhdGE6W119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9XeVNwaW4+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICAgICAgPC9Sb3c+XHJcbiAgICAgICAgICA8L0Ftb2R1bGU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPERyYXdlclxyXG4gICAgICAgICAgdGl0bGU9XCLmlbDmja7mupDphY3nva5cIlxyXG4gICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxyXG4gICAgICAgICAgb25DbG9zZT17dGhpcy5vbkNsb3NlfVxyXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxyXG4gICAgICAgICAgd2lkdGg9e1wiODAlXCJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPFJvdz5cclxuICAgICAgICAgICAgPENvbD5cclxuICAgICAgICAgICAgICA8VGFicyBkZWZhdWx0QWN0aXZlS2V5PVwiMVwiIGFjdGl2ZUtleT17dGhpcy5zdGF0ZS5hY3RpdmVLZXl9IG9uQ2hhbmdlPXt0aGlzLnRhYnNDaGFuZ2V9PlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5Z+65pys5L+h5oGvXCIga2V5PVwiMVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5pWw5o2u5rqQ5ZCN56ew77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuc291cmNlbmFtZX0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZW5hbWUnKX0gY3NzPXt7d2lkdGg6XCI0MjBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuaVsOaNrua6kOaPj+i/sO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLnNvdXJjZWRlc30gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ3NvdXJjZWRlcycpfSBjc3M9e3t3aWR0aDpcIjQyMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbGluZUhlaWdodDpcIjQwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5omA5bGe5YiG57uE77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgIG1vZGU9XCJtdWx0aXBsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBsZWFzZSBzZWxlY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICczMjBweCcgfX1cclxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGdyb3VwQ2hhbmdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuaWRUb05hbWUodGhpcy5zdGF0ZS5ncm91cExpc3QsJ2lkJyx0aGlzLnN0YXRlLnNlbGdyb3VwLCdnX25hbWUnKX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5ncm91cExpc3QgJiYgdGhpcy5zdGF0ZS5ncm91cExpc3QubGVuZ3RoPjA/XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmdyb3VwTGlzdC5tYXAoaXRlbT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE9wdGlvbiBrZXk9e2l0ZW0uaWR9IHZhbHVlPXtpdGVtLmdfbmFtZX0gdGl0bGU9e2l0ZW0uZ19uYW1lfT57aXRlbS5nX25hbWV9PC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5pc05ldz9cclxuICAgICAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkTmV3R3JvdXB9IHR5cGU9XCJwcmltYXJ5XCIgc2l6ZT1cInNtYWxsXCIgY3NzPXt7bWFyZ2luTGVmdDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjwvc3Bhbj4gPHNwYW4gY3NzPXt7bWFyZ2luTGVmdDpcIjVweFwifX0+5paw5aKe5YiG57uEPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmlzTmV3P1xyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7bWFyZ2luTGVmdDpcIjEwMHB4XCIsd2lkdGg6XCI0MjBweFwiLHBhZGRpbmc6XCIyMHB4XCIsYm9yZGVyOlwicmdiYSgyNTUsMjU1LDI1NSwwLjIpIHNvbGlkIDFweFwiLGJvcmRlclJhZGl1czpcIjVweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2Rpc3BsYXk6XCJmbGV4XCIsbWFyZ2luVG9wOlwiMTBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCA4MHB4XCJ9fT7nu4TlkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5nX25hbWV9IG9uQ2hhbmdlPXt0aGlzLmdfbmFtZUNoYW5nZX0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLG1hcmdpblRvcDpcIjEwcHhcIn19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgODBweFwifX0+5o+P6L+w77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuZ19kZXN9IG9uQ2hhbmdlPXt0aGlzLmdfZGVzQ2hhbmdlfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e21hcmdpblRvcDpcIjIwcHhcIix0ZXh0QWxpZ246XCJyaWdodFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRDYW5jZWx9IHNpemU9XCJzbWFsbFwiIGNzcz17e21hcmdpblJpZ2h0OlwiMjBweFwifX0+5Y+W5raIPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5hZGRPa30gIHNpemU9XCJzbWFsbFwiIHR5cGU9XCJwcmltYXJ5XCI+56Gu5a6aPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuS4u+aculwiIGtleT1cIjJcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuS4u+acuuWQjeensO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RuYW1lfSBvbkNoYW5nZT17KGUpPT50aGlzLmRhdGFDaGFuZ2UoZSwnaG9zdG5hbWUnKX0gY3NzPXt7d2lkdGg6XCIyMDBweFwifX0vPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19Puezu+e7n+W5s+WPsO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybX1cclxuICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zeXNwbGF0Zm9ybUNoYW5nZX1cclxuICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOlwiMjAwcHhcIn19XHJcbiAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J3dpbmRvd3MnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXdpbmRvd3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IFdpbmRvd3MgPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdsaW51eCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtbGludXhcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IExpbnV4IDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7kuLvmnLppcO+8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RpcH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RpcCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zeXNwbGF0Zm9ybSA9PT0gJ2xpbnV4Jz9cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMCAwIDEwMHB4XCIsIHRleHRBbGlnbjpcInJpZ2h0XCJ9fT7nlKjmiLflkI3vvJo8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tmbGV4OlwiMSAxIGF1dG9cIiwgdGV4dEFsaWduOiBcImxlZnRcIn19PiA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHVzZXJ9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0dXNlcicpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+5a+G56CB77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPFBhc3N3b3JkIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPXt0aGlzLnN0YXRlLmhvc3RwYXNzd29yZH0gb25DaGFuZ2U9eyhlKT0+dGhpcy5kYXRhQ2hhbmdlKGUsJ2hvc3RwYXNzd29yZCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZGlzcGxheTpcImZsZXhcIixsaW5lSGVpZ2h0OlwiNDBweFwifX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjAgMCAxMDBweFwiLCB0ZXh0QWxpZ246XCJyaWdodFwifX0+U1NI56uv5Y+j77yaPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT4gPElucHV0IHBsYWNlaG9sZGVyPSfpu5jorqTkuLoyMicgdmFsdWU9e3RoaXMuc3RhdGUuaG9zdHBvcnR9IG9uQ2hhbmdlPXsoZSk9PnRoaXMuZGF0YUNoYW5nZShlLCdob3N0cG9ydCcpfSBjc3M9e3t3aWR0aDpcIjIwMHB4XCJ9fS8+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYlBhbmUgdGFiPVwi5pel5b+XXCIga2V5PVwiM1wiPlxyXG4gICAgICAgICAgICAgICAgICA8Um93IGNzcz17e3RleHRBbGlnbjpcImNlbnRlclwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezh9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMilcIn19PuaWh+S7tui3r+W+hDwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4xKVwifX0+5bqU55So5qCH6K+GPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXszfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjIpXCJ9fT7mmK/lkKbku47lpLTor7votbc8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgICA8Q29sIHNwYW49ezN9IGNzcz17e2JhY2tncm91bmQ6XCJyZ2JhKDAsMCwwLDAuMSlcIn19PuaYr+WQpuWNleihjOaXpeW/lzwvQ29sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb2wgc3Bhbj17NH0gY3NzPXt7YmFja2dyb3VuZDpcInJnYmEoMCwwLDAsMC4yKVwifX0+6Kej5p6Q6KeE5YiZPC9Db2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPENvbCBzcGFuPXsyfSBjc3M9e3tiYWNrZ3JvdW5kOlwicmdiYSgwLDAsMCwwLjEpXCJ9fT7mk43kvZw8L0NvbD5cclxuICAgICAgICAgICAgICAgICAgPC9Sb3c+XHJcblxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5sb2dMaXN0ICYmIHRoaXMuc3RhdGUubG9nTGlzdC5sZW5ndGg+MD9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmxvZ0xpc3QubWFwKGl0ZW09PntcclxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMb2dTZXQgZG9EZWxldGVMb2c9e3RoaXMuZG9EZWxldGVMb2d9IHVwZGF0ZUxvZz17dGhpcy51cGRhdGVMb2d9IGtleT17aXRlbS5pZH0gZGF0YT17aXRlbX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAnJ1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDxBZGRMb2dTZXREb20+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmRvQWRkTG9nfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L0FkZExvZ1NldERvbT5cclxuICAgICAgICAgICAgICAgIDwvVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWJQYW5lIHRhYj1cIuWuieijheaWueW8j1wiIGtleT1cIjRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjc3M9e3tkaXNwbGF5OlwiZmxleFwiLGxpbmVIZWlnaHQ6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNzcz17e2ZsZXg6XCIwIDAgMTAwcHhcIiwgdGV4dEFsaWduOlwicmlnaHRcIn19PuWuieijheaWueW8j++8mjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY3NzPXt7ZmxleDpcIjEgMSBhdXRvXCIsIHRleHRBbGlnbjogXCJsZWZ0XCJ9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc3lzcGxhdGZvcm0gPT09ICd3aW5kb3dzJz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9J2hhbmRzZXQnPjxpIGNsYXNzTmFtZT1cImZhIGZhLWhhbmQtcG9pbnRlci1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiDmiYvliqg8L09wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi5LiN6ZmQXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2V0eXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZXR5cGVDaGFuZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6XCIyMDBweFwifX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPSdoYW5kc2V0Jz48aSBjbGFzc05hbWU9XCJmYSBmYS1oYW5kLXBvaW50ZXItb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4g5omL5YqoPC9PcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT0nYXV0b3NldCc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtdGFza3NcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IOiHquWKqDwvT3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9UYWJQYW5lPlxyXG4gICAgICAgICAgICAgIDwvVGFicz5cclxuICAgICAgICAgICAgICA8ZGl2IGNzcz17e3BhZGRpbmdUb3A6XCI0MHB4XCJ9fT5cclxuICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5vbkNsb3NlfT7lj5bmtog8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVLZXkgPT09ICcxJz9cclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgICAgOlxyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmxhc3RTdGVwfSA+5LiK5LiA5q2lPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlS2V5ID09PSAnNCc/XHJcbiAgICAgICAgICAgICAgICAgICcnXHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjc3M9e3ttYXJnaW5MZWZ0OlwiMTBweFwifX0gb25DbGljaz17dGhpcy5uZXh0U3RlcH0gPuS4i+S4gOatpTwvQnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjdGl2ZUtleSA9PT0gJzQnP1xyXG4gICAgICAgICAgICAgICAgICA8QnV0dG9uIGNzcz17e21hcmdpbkxlZnQ6XCIxMHB4XCJ9fSBvbkNsaWNrPXt0aGlzLmRvU2F2ZX0gdHlwZT1cInByaW1hcnlcIiBjc3M9e3ttYXJnaW5MZWZ0OlwiMjBweFwifX0+5L+d5a2YPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9Db2w+XHJcbiAgICAgICAgICA8L1Jvdz5cclxuICAgICAgICA8L0RyYXdlcj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXV0b1NldFxyXG4iXX0= */\"\n};\n\nvar _ref40 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\"\n} : {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref41 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref42 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref43 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref44 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\"\n} : {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref45 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref46 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref47 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref48 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\"\n} : {\n  name: \"1m7qg58-AutoSet\",\n  styles: \"width:200px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref49 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1notry0-AutoSet\",\n  styles: \"text-align:center;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"1notry0-AutoSet\",\n  styles: \"text-align:center;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref50 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1pxg4cq-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.2);label:AutoSet;\"\n} : {\n  name: \"1pxg4cq-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.2);label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref51 = process.env.NODE_ENV === \"production\" ? {\n  name: \"ud0bsy-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.1);label:AutoSet;\"\n} : {\n  name: \"ud0bsy-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.1);label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref52 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1pxg4cq-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.2);label:AutoSet;\"\n} : {\n  name: \"1pxg4cq-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.2);label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref53 = process.env.NODE_ENV === \"production\" ? {\n  name: \"ud0bsy-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.1);label:AutoSet;\"\n} : {\n  name: \"ud0bsy-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.1);label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref54 = process.env.NODE_ENV === \"production\" ? {\n  name: \"1pxg4cq-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.2);label:AutoSet;\"\n} : {\n  name: \"1pxg4cq-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.2);label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref55 = process.env.NODE_ENV === \"production\" ? {\n  name: \"ud0bsy-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.1);label:AutoSet;\"\n} : {\n  name: \"ud0bsy-AutoSet\",\n  styles: \"background:rgba(0,0,0,0.1);label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref56 = process.env.NODE_ENV === \"production\" ? {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\"\n} : {\n  name: \"m9kisb-AutoSet\",\n  styles: \"display:flex;line-height:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref57 = process.env.NODE_ENV === \"production\" ? {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\"\n} : {\n  name: \"bb91xc-AutoSet\",\n  styles: \"flex:0 0 100px;text-align:right;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref58 = process.env.NODE_ENV === \"production\" ? {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\"\n} : {\n  name: \"o9gn31-AutoSet\",\n  styles: \"flex:1 1 auto;text-align:left;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref59 = process.env.NODE_ENV === \"production\" ? {\n  name: \"8at04l-AutoSet\",\n  styles: \"padding-top:40px;label:AutoSet;\"\n} : {\n  name: \"8at04l-AutoSet\",\n  styles: \"padding-top:40px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref60 = process.env.NODE_ENV === \"production\" ? {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\"\n} : {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref61 = process.env.NODE_ENV === \"production\" ? {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\"\n} : {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref62 = process.env.NODE_ENV === \"production\" ? {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\"\n} : {\n  name: \"6ubth0-AutoSet\",\n  styles: \"margin-left:10px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nvar _ref63 = process.env.NODE_ENV === \"production\" ? {\n  name: \"9wxtun-AutoSet\",\n  styles: \"margin-left:20px;label:AutoSet;\"\n} : {\n  name: \"9wxtun-AutoSet\",\n  styles: \"margin-left:20px;label:AutoSet;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n};\n\nclass AutoSet extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false,\n      sourcename: '',\n      sourcedes: '',\n      hostname: '',\n      //主机名称\n      hostip: '',\n      //主机Ip\n      hostuser: '',\n      //主机用户名\n      hostpassword: '',\n      //主机密码\n      hostport: '',\n      //主机端口\n      sysplatform: 'linux',\n      //主机系统\n      logList: [],\n      //日志列表\n      setype: 'handset',\n      activeKey: '1',\n      pageSize: 5,\n      isSpining: false,\n      ids: [],\n      xData: [],\n      yData: [],\n      id: '',\n      //新增分组\n      isNew: false,\n      g_name: '',\n      g_des: '',\n      groupList: [],\n      selgroup: []\n    };\n\n    this.selgroupChange = value => {\n      const nameArr = value;\n      const idArr = this.nameToId(this.state.groupList, 'g_name', nameArr, 'id');\n\n      if (this._isMounted) {\n        this.setState({\n          selgroup: _.cloneDeep(idArr)\n        });\n      }\n    };\n\n    this.nameToId = (arr, nameField, nameArr, idField) => {\n      const idArr = [];\n\n      if (nameArr && nameArr.length > 0) {\n        nameArr.map(item => {\n          const obj = _.find(arr, o => {\n            return o[nameField] === item;\n          });\n\n          idArr.push(obj[idField]);\n        });\n      }\n\n      return idArr;\n    };\n\n    this.idToName = (arr, idField, idArr, nameField) => {\n      const nameArr = [];\n\n      if (idArr && idArr.length > 0) {\n        idArr.map(item => {\n          const obj = _.find(arr, o => {\n            return o[idField] === item;\n          });\n\n          nameArr.push(obj[nameField]);\n        });\n      }\n\n      return nameArr;\n    };\n\n    this.getGroup = () => {\n      wyAxiosPost('Group/getGroup', {}, result => {\n        const responseData = result.data.msg;\n\n        if (this._isMounted) {\n          this.setState({\n            groupList: responseData.yyy\n          });\n        }\n      });\n    };\n\n    this.addNewGroup = () => {\n      if (this._isMounted) {\n        this.setState({\n          isNew: true\n        });\n      }\n    };\n\n    this.addCancel = () => {\n      if (this._isMounted) {\n        this.setState({\n          isNew: false,\n          g_name: '',\n          g_des: ''\n        });\n      }\n    };\n\n    this.addOk = () => {\n      const _this$state = this.state,\n            g_name = _this$state.g_name,\n            g_des = _this$state.g_des;\n\n      if (g_name === '') {\n        _message.warning('组名不能为空');\n      } else {\n        const info = {\n          g_name,\n          g_des\n        };\n        wyAxiosPost('Group/saveGroup', {\n          info\n        }, result => {\n          const responseData = result.data.msg;\n\n          if (responseData.status === 1) {\n            _message.success(responseData.msg);\n\n            if (this._isMounted) {\n              this.setState({\n                isNew: false,\n                g_name: '',\n                g_des: ''\n              });\n            }\n\n            this.getGroup();\n          } else {\n            _message.warning(responseData.msg);\n          }\n        });\n      }\n    };\n\n    this.g_nameChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          g_name: e.target.value\n        });\n      }\n    };\n\n    this.g_desChange = e => {\n      if (this._isMounted) {\n        this.setState({\n          g_des: e.target.value\n        });\n      }\n    };\n\n    this.getSource = () => {\n      if (this._isMounted) {\n        this.setState({\n          isSpining: true\n        });\n      }\n\n      wyAxiosPost('Source/getSource', {}, result => {\n        const responseData = result.data.msg;\n\n        let curxData = _.cloneDeep(responseData.xxx);\n\n        curxData.push({\n          title: '操作',\n          dataIndex: 'edit',\n          render: (text, record, index) => {\n            let dom = '';\n\n            if (record.sysplatform === 'linux') {\n              dom = jsx(\"span\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 182\n                },\n                __self: this\n              }, jsx(\"span\", {\n                title: \"\\u7F16\\u8F91\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\"\n                },\n                onClick: () => this.editSource(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 183\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-pencil-square\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 184\n                },\n                __self: this\n              })), jsx(\"span\", {\n                title: \"\\u4E0B\\u8F7D\\u5B89\\u88C5\\u5305\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\",\n                  marginLeft: \"20px\"\n                },\n                onClick: () => this.downLoadInstall(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 186\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-cloud-download\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 187\n                },\n                __self: this\n              })), jsx(\"span\", {\n                title: \"\\u4E0B\\u8F7D\\u914D\\u7F6E\\u6587\\u4EF6\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\",\n                  marginLeft: \"20px\"\n                },\n                onClick: () => this.downLoadFile(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 189\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-download\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 190\n                },\n                __self: this\n              })), jsx(\"span\", {\n                title: \"\\u5B89\\u88C5\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\",\n                  marginLeft: \"20px\"\n                },\n                onClick: () => this.doInstall(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 192\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-wrench\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 193\n                },\n                __self: this\n              })), jsx(_Popconfirm, {\n                title: \"\\u60A8\\u786E\\u5B9A\\u8981\\u5378\\u8F7D\\u5417?\",\n                onConfirm: () => this.doUninstall(record.id),\n                onCancel: () => {\n                  return;\n                },\n                okText: \"\\u786E\\u5B9A\",\n                cancelText: \"\\u53D6\\u6D88\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 195\n                },\n                __self: this\n              }, jsx(\"span\", {\n                title: \"\\u5378\\u8F7D\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\",\n                  marginLeft: \"20px\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 202\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-chain-broken\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 203\n                },\n                __self: this\n              }))));\n            } else if (record.sysplatform === 'windows') {\n              dom = jsx(\"span\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 209\n                },\n                __self: this\n              }, jsx(\"span\", {\n                title: \"\\u7F16\\u8F91\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\"\n                },\n                onClick: () => this.editSource(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 210\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-pencil-square\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 211\n                },\n                __self: this\n              })), jsx(\"span\", {\n                title: \"\\u4E0B\\u8F7D\\u5B89\\u88C5\\u5305\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\",\n                  marginLeft: \"20px\"\n                },\n                onClick: () => this.downLoadInstall(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 213\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-cloud-download\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 214\n                },\n                __self: this\n              })), jsx(\"span\", {\n                title: \"\\u4E0B\\u8F7D\\u914D\\u7F6E\\u6587\\u4EF6\",\n                style: {\n                  cursor: \"pointer\",\n                  color: \"#00CC66\",\n                  marginLeft: \"20px\"\n                },\n                onClick: () => this.downLoadFile(record.id),\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 216\n                },\n                __self: this\n              }, jsx(\"i\", {\n                className: \"fa fa-download\",\n                \"aria-hidden\": \"true\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 217\n                },\n                __self: this\n              })));\n            }\n\n            return dom;\n          }\n        });\n\n        if (this._isMounted) {\n          this.setState({\n            xData: curxData,\n            yData: responseData.yyy,\n            isSpining: false\n          });\n        }\n      });\n    };\n\n    this.downLoadInstall = id => {\n      wyAxiosPost('Source/download', {\n        id\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData.status === 0) {\n          _message.warning(responseData.msg);\n\n          return;\n        }\n\n        const a = document.createElement('a'); //创建一个<a></a>标签\n\n        a.href = responseData.msg; // response is a blob\n\n        a.download = \"intimatelog_install.zip\"; //文件名称\n\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n      });\n    };\n\n    this.downLoadFile = id => {\n      wyAxiosPost('Source/uploadYaml', {\n        id\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData.status === 0) {\n          _message.warning(responseData.msg);\n\n          return;\n        }\n\n        const a = document.createElement('a'); //创建一个<a></a>标签\n\n        a.href = responseData.msg; // response is a blob\n        //a.download = \"\";  //文件名称\n\n        a.style.display = 'none';\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n      });\n    };\n\n    this.doInstall = id => {\n      wyAxiosPost('Source/install', {\n        id\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData.status === 1) {\n          _message.success(responseData.msg);\n        } else {\n          _message.warning(responseData.msg);\n        }\n      });\n    };\n\n    this.doUninstall = id => {\n      wyAxiosPost('Source/uninstall', {\n        id\n      }, result => {\n        const responseData = result.data.msg;\n\n        if (responseData.status === 1) {\n          _message.success(responseData.msg);\n        } else {\n          _message.warning(responseData.msg);\n        }\n      });\n    };\n\n    this.editSource = id => {\n      wyAxiosPost('Source/getSource', {\n        id\n      }, result => {\n        const responseData = result.data.msg;\n        let logList = responseData.logList;\n\n        if (logList && logList.length > 0) {\n          for (let item of logList) {\n            item.logissingle = item.logissingle === 'true' ? true : false;\n            item.logisreread = item.logisreread === 'true' ? true : false;\n          }\n        }\n\n        const sourcename = responseData.sourcename,\n              sourcedes = responseData.sourcedes,\n              hostname = responseData.hostname,\n              hostip = responseData.hostip,\n              hostuser = responseData.hostuser,\n              hostpassword = responseData.hostpassword,\n              hostport = responseData.hostport,\n              sysplatform = responseData.sysplatform,\n              setype = responseData.setype,\n              id = responseData.id,\n              selgroup = responseData.selgroup;\n\n        if (this._isMounted) {\n          this.setState({\n            sourcename,\n            sourcedes,\n            hostname,\n            //主机名称\n            hostip,\n            //主机Ip\n            hostuser,\n            //主机用户名\n            hostpassword,\n            //主机密码\n            hostport,\n            //主机端口\n            sysplatform,\n            //主机系统\n            logList,\n            //日志列表\n            setype,\n            id,\n            selgroup\n          }, () => {\n            this.showDrawer();\n          });\n        }\n      });\n    };\n\n    this.dataChange = (e, arg) => {\n      for (let item of Object.keys(this.state)) {\n        if (item === arg) {\n          if (this._isMounted) {\n            this.setState({\n              [arg]: e.target.value\n            });\n          }\n\n          break;\n        }\n      }\n    };\n\n    this.sysplatformChange = value => {\n      let setype = this.state.setype;\n\n      if (value === 'windows') {\n        setype = 'handset';\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          sysplatform: value,\n          hostuser: '',\n          //主机用户名\n          hostpassword: '',\n          //主机密码\n          hostport: '',\n          //主机端口\n          setype\n        });\n      }\n    };\n\n    this.setypeChange = setype => {\n      if (this._isMounted) {\n        this.setState({\n          setype\n        });\n      }\n    };\n\n    this.doAddLog = () => {\n      const randomCount = Math.random();\n      const curTime = new Date().getTime();\n      const asId = parseInt(randomCount, 10) + parseInt(curTime, 10) * 100;\n      const id = asId.toString();\n      const curLog = {\n        id,\n        logpath: '',\n        logisreread: false,\n        logissingle: true,\n        logtag: '',\n        logrule: []\n      };\n\n      const curLogList = _.cloneDeep(this.state.logList);\n\n      curLogList.push(curLog);\n\n      if (this._isMounted) {\n        this.setState({\n          logList: [...curLogList]\n        });\n      }\n    };\n\n    this.doDeleteLog = id => {\n      const curLogList = _.cloneDeep(this.state.logList);\n\n      for (let i = 0; i < curLogList.length; i++) {\n        if (curLogList[i].id === id) {\n          curLogList.splice(i, 1);\n          break;\n        }\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          logList: [...curLogList]\n        });\n      }\n    };\n\n    this.updateLog = (id, arg, value) => {\n      const curLogList = _.cloneDeep(this.state.logList);\n\n      for (let i = 0; i < curLogList.length; i++) {\n        if (curLogList[i].id === id) {\n          curLogList[i][arg] = value;\n          break;\n        }\n      }\n\n      if (this._isMounted) {\n        this.setState({\n          logList: [...curLogList]\n        });\n      }\n    };\n\n    this.showDrawer = () => {\n      if (this._isMounted) {\n        this.setState({\n          visible: true\n        });\n      }\n    };\n\n    this.onClose = () => {\n      if (this._isMounted) {\n        this.setState({\n          visible: false,\n          sourcename: '',\n          sourcedes: '',\n          hostname: '',\n          //主机名称\n          hostip: '',\n          //主机Ip\n          hostuser: '',\n          //主机用户名\n          hostpassword: '',\n          //主机密码\n          hostport: '22',\n          //主机端口\n          sysplatform: 'linux',\n          //主机系统\n          logList: [],\n          //日志列表\n          setype: 'handset',\n          id: '',\n          activeKey: '1',\n          selgroup: []\n        });\n      }\n    };\n\n    this.doSave = () => {\n      const _this$state2 = this.state,\n            sourcename = _this$state2.sourcename,\n            sourcedes = _this$state2.sourcedes,\n            hostname = _this$state2.hostname,\n            hostip = _this$state2.hostip,\n            hostuser = _this$state2.hostuser,\n            hostpassword = _this$state2.hostpassword,\n            hostport = _this$state2.hostport,\n            sysplatform = _this$state2.sysplatform,\n            logList = _this$state2.logList,\n            setype = _this$state2.setype,\n            id = _this$state2.id,\n            selgroup = _this$state2.selgroup;\n      const info = {\n        sourcename,\n        sourcedes,\n        hostname,\n        //主机名称\n        hostip,\n        //主机Ip\n        hostuser,\n        //主机用户名\n        hostpassword,\n        //主机密码\n        hostport,\n        //主机端口\n        sysplatform,\n        //主机系统\n        logList,\n        //日志列表\n        setype,\n        id,\n        selgroup //合法性校验\n\n      };\n      const erroList = [];\n\n      if (info.sourcename === '') {\n        erroList.push('数据源名称不能为空');\n      } else if (!forName.test(info.sourcename)) {\n        erroList.push('数据源名称格式不正确');\n      }\n\n      if (info.selgroup.length === 0) {\n        erroList.push('所属分组不能为空');\n      }\n\n      if (info.hostip === '') {\n        erroList.push('主机ip不能为空');\n      } else if (!singleIp.test(info.hostip)) {\n        erroList.push('主机ip格式不正确');\n      }\n\n      if (info.sysplatform === 'linux') {\n        if (info.hostuser === '') {\n          erroList.push('用户名不能为空');\n        }\n\n        if (info.hostpassword === '') {\n          erroList.push('密码不能为空');\n        }\n\n        if (info.hostport !== '' && !singlePort.test(info.hostport)) {\n          erroList.push('SSH端口无效');\n        }\n      }\n\n      if (info.logList.length === 0) {\n        erroList.push('未添加日志信息');\n      } else {\n        for (let item of logList) {\n          if (item.logpath === '' || item.logtag === '') {\n            erroList.push('日志信息未填写完整');\n            break;\n          }\n        }\n      }\n\n      if (erroList.length === 0) {\n        wyAxiosPost('Source/saveSource', {\n          info\n        }, result => {\n          const responseData = result.data.msg;\n\n          if (responseData.status === 1) {\n            _message.success(responseData.msg);\n\n            this.onClose();\n            this.getSource();\n          } else {\n            _message.warning(responseData.msg);\n          }\n        });\n      } else {\n        let str = '';\n        erroList.map((item, index) => {\n          str += index + 1 + '.' + item + '  ';\n        });\n\n        _message.warning(str);\n      }\n    };\n\n    this.delSource = () => {\n      if (this.state.ids.length === 0) {\n        _message.warning('请选择要删除的项');\n      } else {\n        wyAxiosPost('Source/delSource', {\n          ids: this.state.ids\n        }, result => {\n          const responseData = result.data.msg;\n\n          if (responseData.status === 1) {\n            _message.success(responseData.msg);\n\n            if (this._isMounted) {\n              this.setState({\n                ids: []\n              }, () => {\n                this.getSource();\n              });\n            }\n          } else {\n            _message.warning(responseData.msg);\n          }\n        });\n      }\n    };\n\n    this.tabsChange = activeKey => {\n      if (this._isMounted) {\n        this.setState({\n          activeKey\n        });\n      }\n    };\n\n    this.lastStep = () => {\n      let activeKey = this.state.activeKey;\n      let lastKey = parseInt(activeKey) - 1;\n      lastKey = lastKey.toString();\n\n      if (this._isMounted) {\n        this.setState({\n          activeKey: lastKey\n        });\n      }\n    };\n\n    this.nextStep = () => {\n      let activeKey = this.state.activeKey;\n      let nextKey = parseInt(activeKey) + 1;\n      nextKey = nextKey.toString();\n\n      if (this._isMounted) {\n        this.setState({\n          activeKey: nextKey\n        });\n      }\n    };\n\n    this.pageSizeChange = (current, size) => {\n      if (this._isMounted) {\n        this.setState({\n          pageSize: size\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.getSource();\n    this.getGroup();\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const selectedRowKeys = this.state.ids;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: selectedRowKeys => {\n        if (this._isMounted) {\n          this.setState({\n            ids: selectedRowKeys\n          });\n        }\n      }\n    };\n    return jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604\n      },\n      __self: this\n    }, jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, jsx(Amodule, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    }, jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.showDrawer,\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-plus-square-o\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }), \" \", jsx(\"span\", {\n      css: _ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    }, \"\\u6DFB\\u52A0\")), jsx(_Popconfirm, {\n      css: _ref2,\n      placement: \"topLeft\",\n      title: this.state.ids.length > 0 ? '确定要删除所选项？' : '请先选择您要删除的项？',\n      onConfirm: this.state.ids.length > 0 ? this.delSource : () => {},\n      okText: \"\\u786E\\u5B9A\",\n      cancelText: \"\\u53D6\\u6D88\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }, jsx(_Button, {\n      style: {\n        marginLeft: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-minus-square-o\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), jsx(\"span\", {\n      style: {\n        marginLeft: \"5px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, \"\\u5220\\u9664\"))))), jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, jsx(WySpin, {\n      isSpining: this.state.isSpining,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, jsx(WyTable, {\n      pageSize: this.state.pageSize,\n      onShowSizeChange: this.pageSizeChange,\n      rowSelection: rowSelection,\n      xData: this.state.xData ? this.state.xData : [],\n      yData: this.state.yData ? this.state.yData : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    }))))))), jsx(_Drawer, {\n      title: \"\\u6570\\u636E\\u6E90\\u914D\\u7F6E\",\n      placement: \"right\",\n      onClose: this.onClose,\n      visible: this.state.visible,\n      width: \"80%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635\n      },\n      __self: this\n    }, jsx(_Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642\n      },\n      __self: this\n    }, jsx(_Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643\n      },\n      __self: this\n    }, jsx(_Tabs, {\n      defaultActiveKey: \"1\",\n      activeKey: this.state.activeKey,\n      onChange: this.tabsChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644\n      },\n      __self: this\n    }, jsx(TabPane, {\n      tab: \"\\u57FA\\u672C\\u4FE1\\u606F\",\n      key: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 647\n      },\n      __self: this\n    }, \"\\u6570\\u636E\\u6E90\\u540D\\u79F0\\uFF1A\"), jsx(\"div\", {\n      css: _ref6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }, \" \", jsx(_Input, {\n      value: this.state.sourcename,\n      onChange: e => this.dataChange(e, 'sourcename'),\n      css: _ref7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651\n      },\n      __self: this\n    }, \"\\u6570\\u636E\\u6E90\\u63CF\\u8FF0\\uFF1A\"), jsx(\"div\", {\n      css: _ref10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }, \" \", jsx(_Input, {\n      value: this.state.sourcedes,\n      onChange: e => this.dataChange(e, 'sourcedes'),\n      css: _ref11,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, \"\\u6240\\u5C5E\\u5206\\u7EC4\\uFF1A\"), jsx(\"div\", {\n      css: _ref14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656\n      },\n      __self: this\n    }, jsx(_Select, {\n      mode: \"multiple\",\n      placeholder: \"Please select\",\n      style: {\n        width: '320px'\n      },\n      onChange: this.selgroupChange,\n      value: this.idToName(this.state.groupList, 'id', this.state.selgroup, 'g_name'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657\n      },\n      __self: this\n    }, this.state.groupList && this.state.groupList.length > 0 ? this.state.groupList.map(item => {\n      return jsx(Option, {\n        key: item.id,\n        value: item.g_name,\n        title: item.g_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667\n        },\n        __self: this\n      }, item.g_name);\n    }) : ''), this.state.isNew ? '' : jsx(_Button, {\n      onClick: this.addNewGroup,\n      type: \"primary\",\n      size: \"small\",\n      css: _ref15,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-plus\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    })), \" \", jsx(\"span\", {\n      css: _ref16,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678\n      },\n      __self: this\n    }, \"\\u65B0\\u589E\\u5206\\u7EC4\")))), this.state.isNew ? jsx(\"div\", {\n      css: _ref17,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref18,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref19,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688\n      },\n      __self: this\n    }, \"\\u7EC4\\u540D\\uFF1A\"), jsx(\"div\", {\n      css: _ref20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689\n      },\n      __self: this\n    }, jsx(_Input, {\n      value: this.state.g_name,\n      onChange: this.g_nameChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref21,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }, \"\\u63CF\\u8FF0\\uFF1A\"), jsx(\"div\", {\n      css: _ref23,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695\n      },\n      __self: this\n    }, jsx(_Input, {\n      value: this.state.g_des,\n      onChange: this.g_desChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref24,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.addCancel,\n      size: \"small\",\n      css: _ref25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }, \"\\u53D6\\u6D88\"), jsx(_Button, {\n      onClick: this.addOk,\n      size: \"small\",\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }, \"\\u786E\\u5B9A\"))) : ''), jsx(TabPane, {\n      tab: \"\\u4E3B\\u673A\",\n      key: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref26,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref27,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, \"\\u4E3B\\u673A\\u540D\\u79F0\\uFF1A\"), jsx(\"div\", {\n      css: _ref28,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, \" \", jsx(_Input, {\n      value: this.state.hostname,\n      onChange: e => this.dataChange(e, 'hostname'),\n      css: _ref29,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref30,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 714\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref31,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715\n      },\n      __self: this\n    }, \"\\u7CFB\\u7EDF\\u5E73\\u53F0\\uFF1A\"), jsx(\"div\", {\n      css: _ref32,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716\n      },\n      __self: this\n    }, jsx(_Select, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u4E0D\\u9650\",\n      value: this.state.sysplatform,\n      onChange: this.sysplatformChange,\n      style: {\n        width: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717\n      },\n      __self: this\n    }, jsx(Option, {\n      value: \"windows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-windows\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724\n      },\n      __self: this\n    }), \" Windows \"), jsx(Option, {\n      value: \"linux\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-linux\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725\n      },\n      __self: this\n    }), \" Linux \")))), jsx(\"div\", {\n      css: _ref33,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref34,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730\n      },\n      __self: this\n    }, \"\\u4E3B\\u673Aip\\uFF1A\"), jsx(\"div\", {\n      css: _ref35,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }, \" \", jsx(_Input, {\n      value: this.state.hostip,\n      onChange: e => this.dataChange(e, 'hostip'),\n      css: _ref36,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 731\n      },\n      __self: this\n    }))), this.state.sysplatform === 'linux' ? jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref37,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref38,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737\n      },\n      __self: this\n    }, \"\\u7528\\u6237\\u540D\\uFF1A\"), jsx(\"div\", {\n      css: _ref39,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }, \" \", jsx(_Input, {\n      value: this.state.hostuser,\n      onChange: e => this.dataChange(e, 'hostuser'),\n      css: _ref40,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref41,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 740\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref42,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 741\n      },\n      __self: this\n    }, \"\\u5BC6\\u7801\\uFF1A\"), jsx(\"div\", {\n      css: _ref43,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }, \" \", jsx(Password, {\n      type: \"password\",\n      value: this.state.hostpassword,\n      onChange: e => this.dataChange(e, 'hostpassword'),\n      css: _ref44,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742\n      },\n      __self: this\n    }))), jsx(\"div\", {\n      css: _ref45,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 744\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref46,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 745\n      },\n      __self: this\n    }, \"SSH\\u7AEF\\u53E3\\uFF1A\"), jsx(\"div\", {\n      css: _ref47,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    }, \" \", jsx(_Input, {\n      placeholder: \"\\u9ED8\\u8BA4\\u4E3A22\",\n      value: this.state.hostport,\n      onChange: e => this.dataChange(e, 'hostport'),\n      css: _ref48,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 746\n      },\n      __self: this\n    })))) : ''), jsx(TabPane, {\n      tab: \"\\u65E5\\u5FD7\",\n      key: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753\n      },\n      __self: this\n    }, jsx(_Row, {\n      css: _ref49,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754\n      },\n      __self: this\n    }, jsx(_Col, {\n      span: 8,\n      css: _ref50,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755\n      },\n      __self: this\n    }, \"\\u6587\\u4EF6\\u8DEF\\u5F84\"), jsx(_Col, {\n      span: 4,\n      css: _ref51,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 756\n      },\n      __self: this\n    }, \"\\u5E94\\u7528\\u6807\\u8BC6\"), jsx(_Col, {\n      span: 3,\n      css: _ref52,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757\n      },\n      __self: this\n    }, \"\\u662F\\u5426\\u4ECE\\u5934\\u8BFB\\u8D77\"), jsx(_Col, {\n      span: 3,\n      css: _ref53,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758\n      },\n      __self: this\n    }, \"\\u662F\\u5426\\u5355\\u884C\\u65E5\\u5FD7\"), jsx(_Col, {\n      span: 4,\n      css: _ref54,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759\n      },\n      __self: this\n    }, \"\\u89E3\\u6790\\u89C4\\u5219\"), jsx(_Col, {\n      span: 2,\n      css: _ref55,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760\n      },\n      __self: this\n    }, \"\\u64CD\\u4F5C\")), this.state.logList && this.state.logList.length > 0 ? this.state.logList.map(item => {\n      return jsx(LogSet, {\n        doDeleteLog: this.doDeleteLog,\n        updateLog: this.updateLog,\n        key: item.id,\n        data: item,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 767\n        },\n        __self: this\n      });\n    }) : '', jsx(AddLogSetDom, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 773\n      },\n      __self: this\n    }, jsx(\"div\", {\n      onClick: this.doAddLog,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774\n      },\n      __self: this\n    }, jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-plus\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775\n      },\n      __self: this\n    }))))), jsx(TabPane, {\n      tab: \"\\u5B89\\u88C5\\u65B9\\u5F0F\",\n      key: \"4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 779\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref56,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780\n      },\n      __self: this\n    }, jsx(\"div\", {\n      css: _ref57,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781\n      },\n      __self: this\n    }, \"\\u5B89\\u88C5\\u65B9\\u5F0F\\uFF1A\"), jsx(\"div\", {\n      css: _ref58,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782\n      },\n      __self: this\n    }, this.state.sysplatform === 'windows' ? jsx(_Select, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u4E0D\\u9650\",\n      value: this.state.setype,\n      onChange: this.setypeChange,\n      style: {\n        width: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786\n      },\n      __self: this\n    }, jsx(Option, {\n      value: \"handset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-hand-pointer-o\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 793\n      },\n      __self: this\n    }), \" \\u624B\\u52A8\")) : jsx(_Select, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u4E0D\\u9650\",\n      value: this.state.setype,\n      onChange: this.setypeChange,\n      style: {\n        width: \"200px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 796\n      },\n      __self: this\n    }, jsx(Option, {\n      value: \"handset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-hand-pointer-o\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803\n      },\n      __self: this\n    }), \" \\u624B\\u52A8\"), jsx(Option, {\n      value: \"autoset\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }, jsx(\"i\", {\n      className: \"fa fa-tasks\",\n      \"aria-hidden\": \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804\n      },\n      __self: this\n    }), \" \\u81EA\\u52A8\")))))), jsx(\"div\", {\n      css: _ref59,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812\n      },\n      __self: this\n    }, jsx(_Button, {\n      onClick: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813\n      },\n      __self: this\n    }, \"\\u53D6\\u6D88\"), this.state.activeKey === '1' ? '' : jsx(_Button, {\n      css: _ref60,\n      onClick: this.lastStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 818\n      },\n      __self: this\n    }, \"\\u4E0A\\u4E00\\u6B65\"), this.state.activeKey === '4' ? '' : jsx(_Button, {\n      css: _ref61,\n      onClick: this.nextStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824\n      },\n      __self: this\n    }, \"\\u4E0B\\u4E00\\u6B65\"), this.state.activeKey === '4' ? jsx(_Button, {\n      css: _ref62,\n      onClick: this.doSave,\n      type: \"primary\",\n      css: _ref63,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828\n      },\n      __self: this\n    }, \"\\u4FDD\\u5B58\") : '')))));\n  }\n\n}\n\nexport default AutoSet;","map":{"version":3,"sources":["/industry/app/src/SystemBase/AutoSet.js"],"names":["React","Component","jsx","css","_","WyTable","LogSet","Amodule","wyAxiosPost","WySpin","singleIp","singlePort","forName","TabPane","TextArea","Option","Password","AddLogSetDom","AutoSet","state","visible","sourcename","sourcedes","hostname","hostip","hostuser","hostpassword","hostport","sysplatform","logList","setype","activeKey","pageSize","isSpining","ids","xData","yData","id","isNew","g_name","g_des","groupList","selgroup","selgroupChange","value","nameArr","idArr","nameToId","_isMounted","setState","cloneDeep","arr","nameField","idField","length","map","item","obj","find","o","push","idToName","getGroup","result","responseData","data","msg","yyy","addNewGroup","addCancel","addOk","warning","info","status","success","g_nameChange","e","target","g_desChange","getSource","curxData","xxx","title","dataIndex","render","text","record","index","dom","cursor","color","editSource","marginLeft","downLoadInstall","downLoadFile","doInstall","doUninstall","a","document","createElement","href","download","style","display","body","appendChild","click","remove","logissingle","logisreread","showDrawer","dataChange","arg","Object","keys","sysplatformChange","setypeChange","doAddLog","randomCount","Math","random","curTime","Date","getTime","asId","parseInt","toString","curLog","logpath","logtag","logrule","curLogList","doDeleteLog","i","splice","updateLog","onClose","doSave","erroList","test","str","delSource","tabsChange","lastStep","lastKey","nextStep","nextKey","pageSizeChange","current","size","componentDidMount","componentWillUnmount","selectedRowKeys","rowSelection","onChange","width"],"mappings":"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","sourcesContent":["/**  @jsx jsx */\r\nimport React ,{ Component } from 'react'\r\nimport { Drawer, Button, Row, Col, Input, Tabs, Select, Popconfirm, message } from 'antd'\r\nimport { jsx, css } from '@emotion/core'\r\nimport styled from '@emotion/styled'\r\nimport _ from 'lodash'\r\n\r\nimport  WyTable  from '../components/WyTable'\r\nimport LogSet from './LogSet'\r\nimport { Amodule } from '../components/Amodule'\r\nimport { wyAxiosPost } from '../components/WyAxios'\r\nimport WySpin from '../components/WySpin'\r\nimport { singleIp, singlePort, forName } from '../components/RegExp'\r\nconst TabPane = Tabs.TabPane\r\nconst TextArea = Input.TextArea\r\nconst Option = Select.Option\r\nconst Password = Input.Password\r\nlet AddLogSetDom = styled.div({\r\n  lineHeight:\"40px\",\r\n  border: \"rgba(255,255,255,0.2) dashed 1px\",\r\n  borderRadius:\"5px\",\r\n  textAlign:\"center\",\r\n  cursor:\"pointer\",\r\n  marginTop:\"10px\",\r\n  '&:hover':{\r\n    background: \"rgba(0,0,0,0.2)\"\r\n  },\r\n  '&:active':{\r\n    background: \"rgba(0,0,0,0.4)\"\r\n  }\r\n})\r\nclass AutoSet extends Component {\r\n  state = {\r\n    visible: false,\r\n\r\n    sourcename:'',\r\n    sourcedes:'',\r\n    hostname:'', //主机名称\r\n    hostip:'', //主机Ip\r\n    hostuser:'', //主机用户名\r\n    hostpassword:'', //主机密码\r\n    hostport:'', //主机端口\r\n    sysplatform:'linux',//主机系统\r\n    logList:[],  //日志列表\r\n    setype:'handset',\r\n\r\n    activeKey:'1',\r\n\r\n\r\n    pageSize:5,\r\n    isSpining: false,\r\n    ids:[],\r\n    xData: [],\r\n    yData: [],\r\n    id:'',\r\n    //新增分组\r\n    isNew: false,\r\n    g_name:'',\r\n    g_des:'',\r\n    groupList:[],\r\n    selgroup:[],\r\n  }\r\n  componentDidMount(){\r\n    this._isMounted = true\r\n    this.getSource()\r\n    this.getGroup()\r\n  }\r\n  selgroupChange = (value)=>{\r\n    const nameArr = value\r\n    const idArr = this.nameToId(this.state.groupList,'g_name',nameArr,'id')\r\n    if(this._isMounted){\r\n      this.setState({\r\n        selgroup: _.cloneDeep(idArr)\r\n      })\r\n    }\r\n  }\r\n  //name和id转换\r\n  nameToId = (arr,nameField,nameArr,idField)=>{\r\n    const idArr = []\r\n    if(nameArr && nameArr.length>0){\r\n      nameArr.map(item=>{\r\n        const obj = _.find(arr,(o)=>{return o[nameField] === item})\r\n        idArr.push(obj[idField])\r\n      })\r\n    }\r\n    return idArr\r\n  }\r\n  idToName = (arr,idField,idArr,nameField)=>{\r\n    const nameArr = []\r\n    if(idArr && idArr.length>0){\r\n      idArr.map(item=>{\r\n        const obj = _.find(arr,(o)=>{return o[idField] === item})\r\n        nameArr.push(obj[nameField])\r\n      })\r\n    }\r\n    return nameArr\r\n  }\r\n  //获取分组\r\n  getGroup = ()=>{\r\n    wyAxiosPost('Group/getGroup',{},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(this._isMounted){\r\n        this.setState({\r\n          groupList: responseData.yyy,\r\n        })\r\n      }\r\n    })\r\n  }\r\n  //新增分组\r\n  addNewGroup = ()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isNew: true\r\n      })\r\n    }\r\n  }\r\n  //取消新增\r\n  addCancel = ()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isNew: false,\r\n        g_name:'',\r\n        g_des:''\r\n      })\r\n    }\r\n  }\r\n  //保存分组\r\n  addOk = ()=>{\r\n    const { g_name,g_des } = this.state\r\n    if(g_name === ''){\r\n      message.warning('组名不能为空')\r\n    }else{\r\n      const info = {g_name,g_des}\r\n      wyAxiosPost('Group/saveGroup',{info},(result)=>{\r\n        const responseData = result.data.msg\r\n        if(responseData.status === 1){\r\n          message.success(responseData.msg)\r\n          if(this._isMounted){\r\n            this.setState({\r\n              isNew: false,\r\n              g_name:'',\r\n              g_des:''\r\n            })\r\n          }\r\n          this.getGroup()\r\n        }else{\r\n          message.warning(responseData.msg)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  g_nameChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        g_name: e.target.value\r\n      })\r\n    }\r\n  }\r\n  g_desChange = (e)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        g_des: e.target.value\r\n      })\r\n    }\r\n  }\r\n  //获取数据源\r\n  getSource = ()=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        isSpining: true\r\n      })\r\n    }\r\n    wyAxiosPost('Source/getSource',{},(result)=>{\r\n      const responseData = result.data.msg\r\n      let curxData = _.cloneDeep(responseData.xxx)\r\n      curxData.push({\r\n        title: '操作',\r\n        dataIndex: 'edit',\r\n        render: (text, record, index)=>{\r\n          let dom = ''\r\n          if(record.sysplatform === 'linux'){\r\n            dom = <span>\r\n                    <span title=\"编辑\" style={{cursor:\"pointer\",color: \"#00CC66\"}} onClick={()=>this.editSource(record.id)}>\r\n                      <i className=\"fa fa-pencil-square\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                    <span title=\"下载安装包\" style={{cursor:\"pointer\",color: \"#00CC66\",marginLeft:\"20px\"}} onClick={()=>this.downLoadInstall(record.id)}>\r\n                      <i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                    <span title=\"下载配置文件\" style={{cursor:\"pointer\",color: \"#00CC66\",marginLeft:\"20px\"}} onClick={()=>this.downLoadFile(record.id)}>\r\n                      <i className=\"fa fa-download\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                    <span title=\"安装\" style={{cursor:\"pointer\",color: \"#00CC66\",marginLeft:\"20px\"}} onClick={()=>this.doInstall(record.id)}>\r\n                      <i className=\"fa fa-wrench\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                    <Popconfirm\r\n                      title=\"您确定要卸载吗?\"\r\n                      onConfirm={()=>this.doUninstall(record.id)}\r\n                      onCancel={()=>{ return }}\r\n                      okText=\"确定\"\r\n                      cancelText=\"取消\"\r\n                    >\r\n                      <span title=\"卸载\" style={{cursor:\"pointer\",color: \"#00CC66\",marginLeft:\"20px\"}}>\r\n                        <i className=\"fa fa-chain-broken\" aria-hidden=\"true\"></i>\r\n                      </span>\r\n                    </Popconfirm>\r\n\r\n                  </span>\r\n          }else if(record.sysplatform === 'windows'){\r\n            dom = <span>\r\n                    <span title=\"编辑\" style={{cursor:\"pointer\",color: \"#00CC66\"}} onClick={()=>this.editSource(record.id)}>\r\n                      <i className=\"fa fa-pencil-square\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                    <span title=\"下载安装包\" style={{cursor:\"pointer\",color: \"#00CC66\",marginLeft:\"20px\"}} onClick={()=>this.downLoadInstall(record.id)}>\r\n                      <i className=\"fa fa-cloud-download\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                    <span title=\"下载配置文件\" style={{cursor:\"pointer\",color: \"#00CC66\",marginLeft:\"20px\"}} onClick={()=>this.downLoadFile(record.id)}>\r\n                      <i className=\"fa fa-download\" aria-hidden=\"true\"></i>\r\n                    </span>\r\n                  </span>\r\n          }\r\n          return dom\r\n        }\r\n      })\r\n      if(this._isMounted){\r\n        this.setState({\r\n          xData: curxData,\r\n          yData: responseData.yyy,\r\n          isSpining: false\r\n        })\r\n      }\r\n    })\r\n  }\r\n  //下载安装包\r\n  downLoadInstall = (id)=>{\r\n    wyAxiosPost('Source/download',{id},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData.status === 0){\r\n        message.warning(responseData.msg)\r\n        return\r\n      }\r\n      const a = document.createElement('a'); //创建一个<a></a>标签\r\n      a.href = responseData.msg; // response is a blob\r\n      a.download = \"intimatelog_install.zip\";  //文件名称\r\n      a.style.display = 'none';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      a.remove();\r\n    })\r\n  }\r\n  //下载配置文件\r\n  downLoadFile = (id)=>{\r\n    wyAxiosPost('Source/uploadYaml',{id},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData.status === 0){\r\n        message.warning(responseData.msg)\r\n        return\r\n      }\r\n      const a = document.createElement('a'); //创建一个<a></a>标签\r\n      a.href = responseData.msg; // response is a blob\r\n      //a.download = \"\";  //文件名称\r\n      a.style.display = 'none';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      a.remove();\r\n    })\r\n  }\r\n  //安装\r\n  doInstall = (id)=>{\r\n    wyAxiosPost('Source/install',{id},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData.status === 1){\r\n        message.success(responseData.msg)\r\n      }else{\r\n        message.warning(responseData.msg)\r\n      }\r\n    })\r\n  }\r\n  //卸载\r\n  doUninstall = (id)=>{\r\n    wyAxiosPost('Source/uninstall',{id},(result)=>{\r\n      const responseData = result.data.msg\r\n      if(responseData.status === 1){\r\n        message.success(responseData.msg)\r\n      }else{\r\n        message.warning(responseData.msg)\r\n      }\r\n    })\r\n  }\r\n  //编辑\r\n  editSource = (id)=>{\r\n    wyAxiosPost('Source/getSource',{id},(result)=>{\r\n      const responseData = result.data.msg\r\n      let logList = responseData.logList\r\n      if(logList && logList.length>0){\r\n        for(let item of logList){\r\n          item.logissingle = item.logissingle ==='true'?true:false\r\n          item.logisreread = item.logisreread ==='true'?true:false\r\n        }\r\n      }\r\n      const {\r\n        sourcename,\r\n        sourcedes,\r\n        hostname, //主机名称\r\n        hostip, //主机Ip\r\n        hostuser, //主机用户名\r\n        hostpassword, //主机密码\r\n        hostport, //主机端口\r\n        sysplatform,//主机系统\r\n        setype,\r\n        id,\r\n        selgroup\r\n      } = responseData\r\n      if(this._isMounted){\r\n        this.setState({\r\n          sourcename,\r\n          sourcedes,\r\n          hostname, //主机名称\r\n          hostip, //主机Ip\r\n          hostuser, //主机用户名\r\n          hostpassword, //主机密码\r\n          hostport, //主机端口\r\n          sysplatform,//主机系统\r\n          logList,  //日志列表\r\n          setype,\r\n          id,\r\n          selgroup\r\n        },()=>{\r\n          this.showDrawer()\r\n        })\r\n      }\r\n    })\r\n  }\r\n  dataChange = (e,arg)=>{\r\n    for(let item of Object.keys(this.state)){\r\n      if(item === arg){\r\n        if(this._isMounted){\r\n          this.setState({\r\n            [arg]: e.target.value\r\n          })\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }\r\n  sysplatformChange = (value)=>{\r\n    let setype = this.state.setype\r\n    if(value === 'windows'){\r\n      setype = 'handset'\r\n    }\r\n    if(this._isMounted){\r\n      this.setState({\r\n        sysplatform: value,\r\n        hostuser:'', //主机用户名\r\n        hostpassword:'', //主机密码\r\n        hostport:'', //主机端口\r\n        setype\r\n      })\r\n    }\r\n  }\r\n  setypeChange = (setype)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        setype\r\n      })\r\n    }\r\n  }\r\n  doAddLog = ()=>{\r\n    const randomCount = Math.random();\r\n    const curTime = new Date().getTime();\r\n    const asId = parseInt(randomCount,10) + parseInt(curTime,10)*100\r\n    const id = asId.toString()\r\n    const curLog = {\r\n      id,\r\n      logpath:'',\r\n      logisreread: false,\r\n      logissingle: true,\r\n      logtag:'',\r\n      logrule:[]\r\n    }\r\n    const curLogList = _.cloneDeep(this.state.logList)\r\n    curLogList.push(curLog)\r\n    if(this._isMounted){\r\n      this.setState({\r\n        logList: [...curLogList]\r\n      })\r\n    }\r\n  }\r\n  doDeleteLog = (id)=>{\r\n    const curLogList = _.cloneDeep(this.state.logList)\r\n    for(let i=0; i<curLogList.length; i++){\r\n      if(curLogList[i].id === id){\r\n        curLogList.splice(i,1)\r\n        break\r\n      }\r\n    }\r\n    if(this._isMounted){\r\n      this.setState({\r\n        logList: [...curLogList]\r\n      })\r\n    }\r\n  }\r\n  updateLog = (id,arg,value)=>{\r\n    const curLogList = _.cloneDeep(this.state.logList)\r\n    for(let i=0; i<curLogList.length; i++){\r\n      if(curLogList[i].id === id){\r\n        curLogList[i][arg] = value\r\n        break\r\n      }\r\n    }\r\n    if(this._isMounted){\r\n      this.setState({\r\n        logList: [...curLogList]\r\n      })\r\n    }\r\n  }\r\n  showDrawer = () => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: true,\r\n      })\r\n    }\r\n  }\r\n  onClose = () => {\r\n    if(this._isMounted){\r\n      this.setState({\r\n        visible: false,\r\n        sourcename:'',\r\n        sourcedes:'',\r\n\r\n        hostname:'', //主机名称\r\n        hostip:'', //主机Ip\r\n        hostuser:'', //主机用户名\r\n        hostpassword:'', //主机密码\r\n        hostport:'22', //主机端口\r\n        sysplatform:'linux',//主机系统\r\n        logList:[],  //日志列表\r\n        setype:'handset',\r\n        id:'',\r\n        activeKey:'1',\r\n        selgroup:[]\r\n      })\r\n    }\r\n  }\r\n  //保存数据源\r\n  doSave = ()=>{\r\n    const {\r\n      sourcename,\r\n      sourcedes,\r\n      hostname, //主机名称\r\n      hostip, //主机Ip\r\n      hostuser, //主机用户名\r\n      hostpassword, //主机密码\r\n      hostport, //主机端口\r\n      sysplatform,//主机系统\r\n      logList,  //日志列表\r\n      setype,\r\n      id,\r\n      selgroup\r\n    } = this.state\r\n    const info = {\r\n      sourcename,\r\n      sourcedes,\r\n      hostname, //主机名称\r\n      hostip, //主机Ip\r\n      hostuser, //主机用户名\r\n      hostpassword, //主机密码\r\n      hostport, //主机端口\r\n      sysplatform,//主机系统\r\n      logList,  //日志列表\r\n      setype,\r\n      id,\r\n      selgroup\r\n    }\r\n    //合法性校验\r\n    const erroList = []\r\n\r\n    if(info.sourcename === ''){\r\n      erroList.push('数据源名称不能为空')\r\n    }else if(! forName.test(info.sourcename)){\r\n      erroList.push('数据源名称格式不正确')\r\n    }\r\n    if(info.selgroup.length === 0){\r\n      erroList.push('所属分组不能为空')\r\n    }\r\n    if(info.hostip === ''){\r\n      erroList.push('主机ip不能为空')\r\n    }else if(! singleIp.test(info.hostip)){\r\n      erroList.push('主机ip格式不正确')\r\n    }\r\n    if(info.sysplatform === 'linux'){\r\n      if(info.hostuser === ''){\r\n        erroList.push('用户名不能为空')\r\n      }\r\n      if(info.hostpassword === ''){\r\n        erroList.push('密码不能为空')\r\n      }\r\n      if(info.hostport !== '' && (!singlePort.test(info.hostport))){\r\n        erroList.push('SSH端口无效')\r\n      }\r\n    }\r\n    if(info.logList.length === 0){\r\n      erroList.push('未添加日志信息')\r\n    }else{\r\n      for(let item of logList){\r\n        if(item.logpath === '' || item.logtag === ''){\r\n          erroList.push('日志信息未填写完整')\r\n          break\r\n        }\r\n      }\r\n    }\r\n\r\n    if(erroList.length === 0){\r\n      wyAxiosPost('Source/saveSource',{info},(result)=>{\r\n        const responseData = result.data.msg\r\n        if(responseData.status === 1){\r\n          message.success(responseData.msg)\r\n          this.onClose()\r\n          this.getSource()\r\n        }else{\r\n          message.warning(responseData.msg)\r\n        }\r\n      })\r\n    }else{\r\n      let str = ''\r\n      erroList.map((item,index)=>{\r\n        str += index+1+'.'+item+'  '\r\n      })\r\n      message.warning(str)\r\n    }\r\n  }\r\n  //删除\r\n  delSource = ()=>{\r\n    if(this.state.ids.length === 0){\r\n      message.warning('请选择要删除的项')\r\n    }else{\r\n      wyAxiosPost('Source/delSource',{ids: this.state.ids},(result)=>{\r\n        const responseData = result.data.msg\r\n        if(responseData.status === 1){\r\n          message.success(responseData.msg)\r\n          if(this._isMounted){\r\n            this.setState({\r\n              ids: []\r\n            },()=>{\r\n              this.getSource()\r\n            })\r\n          }\r\n        }else{\r\n          message.warning(responseData.msg)\r\n        }\r\n      })\r\n    }\r\n  }\r\n  tabsChange = (activeKey)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        activeKey\r\n      })\r\n    }\r\n  }\r\n  lastStep = ()=>{\r\n    let activeKey = this.state.activeKey\r\n    let lastKey = parseInt(activeKey) - 1\r\n    lastKey = lastKey.toString()\r\n    if(this._isMounted){\r\n      this.setState({\r\n        activeKey: lastKey\r\n      })\r\n    }\r\n  }\r\n  nextStep = ()=>{\r\n    let activeKey = this.state.activeKey\r\n    let nextKey = parseInt(activeKey) + 1\r\n    nextKey = nextKey.toString()\r\n    if(this._isMounted){\r\n      this.setState({\r\n        activeKey: nextKey\r\n      })\r\n    }\r\n  }\r\n  pageSizeChange = (current, size)=>{\r\n    if(this._isMounted){\r\n      this.setState({\r\n        pageSize: size\r\n      })\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    this._isMounted = false\r\n  }\r\n  render(){\r\n    const selectedRowKeys = this.state.ids\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: (selectedRowKeys) => {\r\n        if(this._isMounted){\r\n          this.setState({\r\n            ids: selectedRowKeys\r\n          })\r\n        }\r\n      }\r\n\r\n    }\r\n    return(\r\n      <div>\r\n        <div>\r\n          <Amodule>\r\n              <Row>\r\n                <Col>\r\n                  <Button onClick={this.showDrawer} type=\"primary\"><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i> <span css={{marginLeft:\"5px\"}}>添加</span></Button>\r\n                  <Popconfirm css={{marginLeft:\"10px\"}} placement=\"topLeft\" title={this.state.ids.length>0?'确定要删除所选项？':'请先选择您要删除的项？'} onConfirm={this.state.ids.length>0?this.delSource:()=>{}} okText=\"确定\" cancelText=\"取消\">\r\n                    <Button style={{marginLeft: \"10px\"}}>\r\n                      <i className=\"fa fa-minus-square-o\" aria-hidden=\"true\"></i>\r\n                      <span style={{marginLeft:\"5px\"}}>删除</span>\r\n                    </Button>\r\n                  </Popconfirm>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <div css={{paddingTop:\"10px\"}}>\r\n                    <WySpin isSpining={this.state.isSpining}>\r\n                      <WyTable\r\n                          pageSize={this.state.pageSize}\r\n                          onShowSizeChange={this.pageSizeChange}\r\n                          rowSelection={rowSelection}\r\n                          xData={this.state.xData?this.state.xData:[]}\r\n                          yData={this.state.yData?this.state.yData:[]}\r\n                        />\r\n                    </WySpin>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n          </Amodule>\r\n        </div>\r\n        <Drawer\r\n          title=\"数据源配置\"\r\n          placement=\"right\"\r\n          onClose={this.onClose}\r\n          visible={this.state.visible}\r\n          width={\"80%\"}\r\n        >\r\n          <Row>\r\n            <Col>\r\n              <Tabs defaultActiveKey=\"1\" activeKey={this.state.activeKey} onChange={this.tabsChange}>\r\n                <TabPane tab=\"基本信息\" key=\"1\">\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>数据源名称：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Input value={this.state.sourcename} onChange={(e)=>this.dataChange(e,'sourcename')} css={{width:\"420px\"}}/></div>\r\n                  </div>\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>数据源描述：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Input value={this.state.sourcedes} onChange={(e)=>this.dataChange(e,'sourcedes')} css={{width:\"420px\"}}/></div>\r\n                  </div>\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>所属分组：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}>\r\n                    <Select\r\n                      mode=\"multiple\"\r\n                      placeholder=\"Please select\"\r\n                      style={{ width: '320px' }}\r\n                      onChange={this.selgroupChange}\r\n                      value={this.idToName(this.state.groupList,'id',this.state.selgroup,'g_name')}\r\n                    >\r\n                    {\r\n                      this.state.groupList && this.state.groupList.length>0?\r\n                      this.state.groupList.map(item=>{\r\n                        return <Option key={item.id} value={item.g_name} title={item.g_name}>{item.g_name}</Option>\r\n                      })\r\n                      :\r\n                      ''\r\n                    }\r\n                    </Select>\r\n                    {\r\n                      this.state.isNew?\r\n                      ''\r\n                      :\r\n                      <Button onClick={this.addNewGroup} type=\"primary\" size=\"small\" css={{marginLeft:\"10px\"}}>\r\n                        <span><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></span> <span css={{marginLeft:\"5px\"}}>新增分组</span>\r\n                      </Button>\r\n                    }\r\n\r\n                    </div>\r\n                  </div>\r\n                  {\r\n                    this.state.isNew?\r\n                    <div css={{marginLeft:\"100px\",width:\"420px\",padding:\"20px\",border:\"rgba(255,255,255,0.2) solid 1px\",borderRadius:\"5px\"}}>\r\n                      <div css={{display:\"flex\",marginTop:\"10px\"}}>\r\n                        <div css={{flex:\"0 0 80px\"}}>组名：</div>\r\n                        <div css={{flex:\"1 1 auto\"}}>\r\n                          <Input value={this.state.g_name} onChange={this.g_nameChange}/>\r\n                        </div>\r\n                      </div>\r\n                      <div css={{display:\"flex\",marginTop:\"10px\"}}>\r\n                        <div css={{flex:\"0 0 80px\"}}>描述：</div>\r\n                        <div css={{flex:\"1 1 auto\"}}>\r\n                          <Input value={this.state.g_des} onChange={this.g_desChange}/>\r\n                        </div>\r\n                      </div>\r\n                      <div css={{marginTop:\"20px\",textAlign:\"right\"}}>\r\n                        <Button onClick={this.addCancel} size=\"small\" css={{marginRight:\"20px\"}}>取消</Button>\r\n                        <Button onClick={this.addOk}  size=\"small\" type=\"primary\">确定</Button>\r\n                      </div>\r\n                    </div>\r\n                    :\r\n                    ''\r\n                  }\r\n\r\n                </TabPane>\r\n                <TabPane tab=\"主机\" key=\"2\">\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>主机名称：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Input value={this.state.hostname} onChange={(e)=>this.dataChange(e,'hostname')} css={{width:\"200px\"}}/></div>\r\n                  </div>\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>系统平台：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}>\r\n                    <Select\r\n                       style={{ width: '100%' }}\r\n                       placeholder=\"不限\"\r\n                       value={this.state.sysplatform}\r\n                       onChange={this.sysplatformChange}\r\n                       style={{width:\"200px\"}}\r\n                     >\r\n                      <Option value='windows'><i className=\"fa fa-windows\" aria-hidden=\"true\"></i> Windows </Option>\r\n                      <Option value='linux'><i className=\"fa fa-linux\" aria-hidden=\"true\"></i> Linux </Option>\r\n                     </Select>\r\n                    </div>\r\n                  </div>\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>主机ip：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Input value={this.state.hostip} onChange={(e)=>this.dataChange(e,'hostip')} css={{width:\"200px\"}}/></div>\r\n                  </div>\r\n                  {\r\n                    this.state.sysplatform === 'linux'?\r\n                    <div>\r\n                      <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                        <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>用户名：</div>\r\n                        <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Input value={this.state.hostuser} onChange={(e)=>this.dataChange(e,'hostuser')} css={{width:\"200px\"}}/></div>\r\n                      </div>\r\n                      <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                        <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>密码：</div>\r\n                        <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Password type=\"password\" value={this.state.hostpassword} onChange={(e)=>this.dataChange(e,'hostpassword')} css={{width:\"200px\"}}/></div>\r\n                      </div>\r\n                      <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                        <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>SSH端口：</div>\r\n                        <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}> <Input placeholder='默认为22' value={this.state.hostport} onChange={(e)=>this.dataChange(e,'hostport')} css={{width:\"200px\"}}/></div>\r\n                      </div>\r\n                    </div>\r\n                    :\r\n                    ''\r\n                  }\r\n                </TabPane>\r\n                <TabPane tab=\"日志\" key=\"3\">\r\n                  <Row css={{textAlign:\"center\",lineHeight:\"40px\"}}>\r\n                    <Col span={8} css={{background:\"rgba(0,0,0,0.2)\"}}>文件路径</Col>\r\n                    <Col span={4} css={{background:\"rgba(0,0,0,0.1)\"}}>应用标识</Col>\r\n                    <Col span={3} css={{background:\"rgba(0,0,0,0.2)\"}}>是否从头读起</Col>\r\n                    <Col span={3} css={{background:\"rgba(0,0,0,0.1)\"}}>是否单行日志</Col>\r\n                    <Col span={4} css={{background:\"rgba(0,0,0,0.2)\"}}>解析规则</Col>\r\n                    <Col span={2} css={{background:\"rgba(0,0,0,0.1)\"}}>操作</Col>\r\n                  </Row>\r\n\r\n                  {\r\n                    this.state.logList && this.state.logList.length>0?\r\n                    this.state.logList.map(item=>{\r\n                      return (\r\n                        <LogSet doDeleteLog={this.doDeleteLog} updateLog={this.updateLog} key={item.id} data={item} />\r\n                      )\r\n                    })\r\n                    :\r\n                    ''\r\n                  }\r\n                  <AddLogSetDom>\r\n                    <div onClick={this.doAddLog}>\r\n                      <span><i className=\"fa fa-plus\" aria-hidden=\"true\"></i></span>\r\n                    </div>\r\n                  </AddLogSetDom>\r\n                </TabPane>\r\n                <TabPane tab=\"安装方式\" key=\"4\">\r\n                  <div css={{display:\"flex\",lineHeight:\"40px\"}}>\r\n                    <div css={{flex:\"0 0 100px\", textAlign:\"right\"}}>安装方式：</div>\r\n                    <div css={{flex:\"1 1 auto\", textAlign: \"left\"}}>\r\n\r\n                         {\r\n                           this.state.sysplatform === 'windows'?\r\n                           <Select\r\n                              style={{ width: '100%' }}\r\n                              placeholder=\"不限\"\r\n                              value={this.state.setype}\r\n                              onChange={this.setypeChange}\r\n                              style={{width:\"200px\"}}\r\n                            >\r\n                            <Option value='handset'><i className=\"fa fa-hand-pointer-o\" aria-hidden=\"true\"></i> 手动</Option>\r\n                           </Select>\r\n                           :\r\n                           <Select\r\n                              style={{ width: '100%' }}\r\n                              placeholder=\"不限\"\r\n                              value={this.state.setype}\r\n                              onChange={this.setypeChange}\r\n                              style={{width:\"200px\"}}\r\n                            >\r\n                             <Option value='handset'><i className=\"fa fa-hand-pointer-o\" aria-hidden=\"true\"></i> 手动</Option>\r\n                             <Option value='autoset'><i className=\"fa fa-tasks\" aria-hidden=\"true\"></i> 自动</Option>\r\n                           </Select>\r\n                         }\r\n\r\n                    </div>\r\n                  </div>\r\n                </TabPane>\r\n              </Tabs>\r\n              <div css={{paddingTop:\"40px\"}}>\r\n                <Button onClick={this.onClose}>取消</Button>\r\n                {\r\n                  this.state.activeKey === '1'?\r\n                  ''\r\n                  :\r\n                  <Button css={{marginLeft:\"10px\"}} onClick={this.lastStep} >上一步</Button>\r\n                }\r\n                {\r\n                  this.state.activeKey === '4'?\r\n                  ''\r\n                  :\r\n                  <Button css={{marginLeft:\"10px\"}} onClick={this.nextStep} >下一步</Button>\r\n                }\r\n                {\r\n                  this.state.activeKey === '4'?\r\n                  <Button css={{marginLeft:\"10px\"}} onClick={this.doSave} type=\"primary\" css={{marginLeft:\"20px\"}}>保存</Button>\r\n                  :\r\n                  ''\r\n                }\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Drawer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default AutoSet\r\n"]},"metadata":{},"sourceType":"module"}