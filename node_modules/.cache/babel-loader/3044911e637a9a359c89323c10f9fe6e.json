{"ast":null,"code":"import _objectSpread from \"/industry/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/industry/app/src/components/Column/index.js\";\nimport React, { Component } from 'react';\nimport echarts from 'echarts';\nimport ReactEcharts from 'echarts-for-react';\nimport _ from 'lodash';\nimport { themeOne } from '../echartTheme';\nimport DropList from '../DropList';\n\nclass Column extends Component {\n  constructor() {\n    super();\n    const option = {\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          // 坐标轴指示器，坐标轴触发有效\n          type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'\n\n        }\n      },\n      xAxis: {\n        type: 'value',\n        axisLabel: {\n          formatter: '{value} M' //这里是单位\n\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: [],\n        //纵坐标数据\n        axisTick: {\n          alignWithLabel: true\n        }\n      },\n      series: [],\n      grid: {\n        //视图容器间距\n        top: 30,\n        bottom: 60,\n        left: 40,\n        right: 60,\n        containLabel: true\n      },\n      legend: {\n        type: 'scroll',\n        orient: 'horizontal',\n        center: 0,\n        bottom: 10,\n        textStyle: {\n          //横柱状图图例\n          color: '#01D39F',\n          fontSize: '12px'\n        }\n      }\n    };\n    this.state = {\n      option,\n      onChartClick: function () {},\n      viewId: '',\n      onBrushSelected: function () {},\n      onContextmenu: function () {\n        return false;\n      },\n      dropPosition: {\n        x: \"0px\",\n        y: \"0px\"\n      },\n      dropData: [],\n      isexist: false\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          xData = _this$props.xData,\n          yData = _this$props.yData,\n          aUnit = _this$props.aUnit,\n          viewId = _this$props.viewId;\n    let onChartClick;\n    let onBrushSelected;\n    let onContextmenu;\n    let brush = {};\n    let toolbox = {}; //点击事件判断\n\n    if (!this.props.onBrushSelected) {\n      onBrushSelected = function () {};\n    } else {\n      onBrushSelected = this.props.onBrushSelected;\n    } //点击事件判断\n\n\n    if (!this.props.onChartClick) {\n      onChartClick = function () {};\n    } else {\n      onChartClick = this.props.onChartClick;\n    } //点击事件判断\n\n\n    if (!this.props.onContextmenu) {\n      onContextmenu = function () {\n        return false;\n      };\n    } else {\n      onContextmenu = this.props.onContextmenu;\n    } //判断是否有添加brush\n\n\n    if (this.props.brush) {\n      brush = {\n        brush: {\n          toolbox: ['lineX', 'clear'],\n          //选框类型\n          xAxisIndex: 'all',\n          //对所有x轴有效\n          brushLink: 'all',\n          //关联所有对象数据\n          brushMode: 'single',\n          //启用单选模式\n          outOfBrush: {\n            //选框透明度\n            colorAlpha: 0.1\n          },\n          brushStyle: {\n            //选框样式\n            borderWidth: 1,\n            color: 'rgba(120,140,180,0.3)',\n            borderColor: 'rgba(120,140,180,0.8)'\n          },\n          throttleType: 'debounce',\n          throttleDelay: 300\n        }\n      };\n    } else {\n      brush = {};\n    } //判断工具盒是否添加\n\n\n    if (this.props.toolbox) {\n      toolbox = {\n        toolbox: {\n          feature: {\n            dataZoom: {\n              yAxisIndex: 'none'\n            },\n            restore: {},\n            saveAsImage: {}\n          }\n        }\n      };\n    } else {\n      toolbox = {};\n    }\n\n    this.setState({\n      option: Object.assign({}, _objectSpread({}, this.state.option), {\n        yAxis: {\n          data: xData,\n          //纵坐标数据\n          axisLine: {\n            show: false,\n            lineStyle: {\n              //纵坐标轴及其刻度颜色\n              color: 'rgba(255,255,255,0)',\n              width: 1\n            }\n          },\n          axisLabel: {\n            //坐标轴文字\n            show: true,\n            textStyle: {\n              color: '#fff'\n            }\n          },\n          splitLine: {\n            //网格线\n            show: false,\n            //  改变轴线颜色\n            lineStyle: {\n              // 使用深浅的间隔色\n              color: ['red']\n            }\n          },\n          axisTick: {\n            //y轴刻度线\n            show: false\n          }\n        },\n        xAxis: {\n          axisLabel: {\n            formatter: '{value}' + aUnit //这里是单位\n\n          },\n          axisLine: {\n            show: false,\n            lineStyle: {\n              //纵坐标轴及其刻度颜色\n              color: 'rgba(255,255,255,1)',\n              width: 1\n            }\n          },\n          splitLine: {\n            //网格线\n            show: false,\n            //  改变轴线颜色\n            lineStyle: {\n              // 使用深浅的间隔色\n              color: ['red']\n            }\n          },\n          axisTick: {\n            //x轴刻度线\n            show: false\n          }\n        },\n        series: yData,\n        animationThreshold: true\n      }, brush, toolbox),\n      onChartClick,\n      viewId,\n      onBrushSelected,\n      onContextmenu\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!(JSON.stringify(_.cloneDeep(this.props.xData)) === JSON.stringify(_.cloneDeep(nextProps.xData)) && JSON.stringify(_.cloneDeep(this.props.yData)) === JSON.stringify(_.cloneDeep(nextProps.yData)) && this.props.aUnit === nextProps.aUnit && JSON.stringify(this.props.dropListInfo) === JSON.stringify(nextProps.dropListInfo))) {\n      const xData = nextProps.xData,\n            yData = nextProps.yData,\n            aUnit = nextProps.aUnit;\n      this.setState({\n        option: Object.assign({}, _objectSpread({}, this.state.option), {\n          yAxis: {\n            data: xData,\n            //纵坐标数据\n            axisLine: {\n              show: false,\n              lineStyle: {\n                //纵坐标轴及其刻度颜色\n                color: 'rgba(255,255,255,0)',\n                width: 1\n              }\n            },\n            axisLabel: {\n              //坐标轴文字\n              show: true,\n              textStyle: {\n                color: '#fff'\n              }\n            },\n            splitLine: {\n              //网格线\n              show: false,\n              //  改变轴线颜色\n              lineStyle: {\n                // 使用深浅的间隔色\n                color: ['red']\n              }\n            },\n            axisTick: {\n              //y轴刻度线\n              show: false\n            }\n          },\n          xAxis: {\n            axisLabel: {\n              formatter: '{value}' + aUnit //这里是单位\n\n            },\n            axisLine: {\n              show: false,\n              lineStyle: {\n                //纵坐标轴及其刻度颜色\n                color: 'rgba(255,255,255,1)',\n                width: 1\n              }\n            },\n            splitLine: {\n              //网格线\n              show: false,\n              //  改变轴线颜色\n              lineStyle: {\n                // 使用深浅的间隔色\n                color: ['red']\n              }\n            },\n            axisTick: {\n              //x轴刻度线\n              show: false\n            }\n          },\n          series: yData\n        }),\n        dropPosition: nextProps.dropListInfo ? nextProps.dropListInfo.dropPosition : {\n          x: \"0px\",\n          y: \"0px\"\n        },\n        dropData: nextProps.dropListInfo ? nextProps.dropListInfo.dropData : [],\n        isexist: nextProps.dropListInfo ? nextProps.dropListInfo.isexist : false\n      });\n    }\n  }\n\n  render() {\n    echarts.registerTheme('my_theme', themeOne); //const viewId = this.state.viewId\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(ReactEcharts, {\n      option: this.state.option,\n      theme: \"my_theme\",\n      style: {\n        height: this.props.height ? this.props.height + \"px\" : \"300px\"\n      },\n      onEvents: {\n        'click': (params, viewId) => {\n          this.state.onChartClick(params, this.state.viewId);\n        },\n        'contextmenu': (params, viewId) => {\n          const xPosition = params.event.event.clientX;\n          const yPosition = params.event.event.clientY;\n          const position = {\n            x: xPosition,\n            y: yPosition\n          };\n          const dom = params.event.event.target;\n          const curViewId = this.state.viewId;\n          this.state.onContextmenu(params, dom, position, curViewId);\n        },\n        'brushSelected': (params, viewId) => {\n          this.state.onBrushSelected(params, this.state.viewId);\n        }\n      },\n      opts: {\n        renderer: 'canvas'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }), React.createElement(DropList, {\n      dropPosition: _.cloneDeep(this.state.dropPosition),\n      dropData: _.cloneDeep(this.state.dropData),\n      isexist: _.cloneDeep(this.state.isexist),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Column; //viewId 视图ID，通常指这个视图的这条数据ID\n//xData  横轴数据，为数组\n//yData  纵轴数据，为数组\n// [{\n//      name:'邮件营销',\n//      type:'line',\n//      data:[120, 132, 101, 134, 90, 230, 210]\n//  },\n//  {\n//      name:'联盟广告',\n//      type:'line',\n//      data:[220, 182, 191, 234, 290, 330, 310]\n//  }]\n//aUnit  单位，字符串\n//toolbox  值为布尔值，是否开启工具盒 默认为false\n//brush 值为布尔值，是否开启刷子工具  默认为false\n//onChartClick  值为一个函数，默认为空\n//onBrushSelected 值为一个函数，默认为空","map":{"version":3,"sources":["/industry/app/src/components/Column/index.js"],"names":["React","Component","echarts","ReactEcharts","_","themeOne","DropList","Column","constructor","option","tooltip","trigger","axisPointer","type","xAxis","axisLabel","formatter","yAxis","data","axisTick","alignWithLabel","series","grid","top","bottom","left","right","containLabel","legend","orient","center","textStyle","color","fontSize","state","onChartClick","viewId","onBrushSelected","onContextmenu","dropPosition","x","y","dropData","isexist","componentDidMount","props","xData","yData","aUnit","brush","toolbox","xAxisIndex","brushLink","brushMode","outOfBrush","colorAlpha","brushStyle","borderWidth","borderColor","throttleType","throttleDelay","feature","dataZoom","yAxisIndex","restore","saveAsImage","setState","Object","assign","axisLine","show","lineStyle","width","splitLine","animationThreshold","componentWillReceiveProps","nextProps","JSON","stringify","cloneDeep","dropListInfo","render","registerTheme","height","params","xPosition","event","clientX","yPosition","clientY","position","dom","target","curViewId","renderer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,aAArB;;AACA,MAAMC,MAAN,SAAqBN,SAArB,CAA8B;AAC5BO,EAAAA,WAAW,GAAE;AACX;AACA,UAAMC,MAAM,GAAG;AACdC,MAAAA,OAAO,EAAE;AACRC,QAAAA,OAAO,EAAE,MADD;AAERC,QAAAA,WAAW,EAAG;AAAa;AACzBC,UAAAA,IAAI,EAAG,QADK,CACW;;AADX;AAFN,OADK;AAObC,MAAAA,KAAK,EAAE;AACHD,QAAAA,IAAI,EAAE,OADH;AAEHE,QAAAA,SAAS,EAAE;AACPC,UAAAA,SAAS,EAAE,WADJ,CACgB;;AADhB;AAFR,OAPM;AAabC,MAAAA,KAAK,EAAE;AACHJ,QAAAA,IAAI,EAAE,UADH;AAEHK,QAAAA,IAAI,EAAE,EAFH;AAEO;AACVC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,cAAc,EAAE;AADR;AAHP,OAbM;AAoBbC,MAAAA,MAAM,EAAE,EApBK;AAqBbC,MAAAA,IAAI,EAAC;AAAE;AACLC,QAAAA,GAAG,EAAE,EADF;AAEHC,QAAAA,MAAM,EAAE,EAFL;AAGHC,QAAAA,IAAI,EAAE,EAHH;AAIHC,QAAAA,KAAK,EAAE,EAJJ;AAKHC,QAAAA,YAAY,EAAE;AALX,OArBQ;AA6BbC,MAAAA,MAAM,EAAE;AACNf,QAAAA,IAAI,EAAE,QADA;AAENgB,QAAAA,MAAM,EAAE,YAFF;AAGNC,QAAAA,MAAM,EAAE,CAHF;AAINN,QAAAA,MAAM,EAAE,EAJF;AAKNO,QAAAA,SAAS,EAAC;AAAE;AACVC,UAAAA,KAAK,EAAE,SADC;AAERC,UAAAA,QAAQ,EAAC;AAFD;AALJ;AA7BK,KAAf;AAyCA,SAAKC,KAAL,GAAW;AACTzB,MAAAA,MADS;AAET0B,MAAAA,YAAY,EAAE,YAAU,CAAE,CAFjB;AAGTC,MAAAA,MAAM,EAAE,EAHC;AAITC,MAAAA,eAAe,EAAE,YAAU,CAAE,CAJpB;AAKTC,MAAAA,aAAa,EAAE,YAAU;AAAC,eAAO,KAAP;AAAa,OAL9B;AAOTC,MAAAA,YAAY,EAAC;AAACC,QAAAA,CAAC,EAAC,KAAH;AAASC,QAAAA,CAAC,EAAC;AAAX,OAPJ;AAQTC,MAAAA,QAAQ,EAAE,EARD;AASTC,MAAAA,OAAO,EAAE;AATA,KAAX;AAWD;;AACDC,EAAAA,iBAAiB,GAAE;AAAA,wBACkB,KAAKC,KADvB;AAAA,UACVC,KADU,eACVA,KADU;AAAA,UACJC,KADI,eACJA,KADI;AAAA,UACEC,KADF,eACEA,KADF;AAAA,UACQZ,MADR,eACQA,MADR;AAEjB,QAAID,YAAJ;AACA,QAAIE,eAAJ;AACA,QAAIC,aAAJ;AACA,QAAIW,KAAK,GAAG,EAAZ;AACA,QAAIC,OAAO,GAAG,EAAd,CANiB,CAOjB;;AACA,QAAG,CAAC,KAAKL,KAAL,CAAWR,eAAf,EAA+B;AAC5BA,MAAAA,eAAe,GAAG,YAAU,CAAE,CAA9B;AACF,KAFD,MAEK;AACFA,MAAAA,eAAe,GAAG,KAAKQ,KAAL,CAAWR,eAA7B;AACF,KAZgB,CAajB;;;AACA,QAAG,CAAC,KAAKQ,KAAL,CAAWV,YAAf,EAA4B;AACzBA,MAAAA,YAAY,GAAG,YAAU,CAAE,CAA3B;AACF,KAFD,MAEK;AACFA,MAAAA,YAAY,GAAG,KAAKU,KAAL,CAAWV,YAA1B;AACF,KAlBgB,CAmBjB;;;AACA,QAAG,CAAC,KAAKU,KAAL,CAAWP,aAAf,EAA6B;AAC1BA,MAAAA,aAAa,GAAG,YAAU;AAAC,eAAO,KAAP;AAAa,OAAxC;AACF,KAFD,MAEK;AACFA,MAAAA,aAAa,GAAG,KAAKO,KAAL,CAAWP,aAA3B;AACF,KAxBgB,CAyBjB;;;AACA,QAAG,KAAKO,KAAL,CAAWI,KAAd,EAAoB;AAClBA,MAAAA,KAAK,GAAG;AACNA,QAAAA,KAAK,EAAC;AACJC,UAAAA,OAAO,EAAE,CAAC,OAAD,EAAS,OAAT,CADL;AACuB;AAC3BC,UAAAA,UAAU,EAAE,KAFR;AAEc;AAClBC,UAAAA,SAAS,EAAE,KAHP;AAGa;AACjBC,UAAAA,SAAS,EAAE,QAJP;AAIgB;AACpBC,UAAAA,UAAU,EAAE;AAAE;AACVC,YAAAA,UAAU,EAAE;AADJ,WALR;AAQJC,UAAAA,UAAU,EAAC;AAAE;AACXC,YAAAA,WAAW,EAAE,CADJ;AAETzB,YAAAA,KAAK,EAAE,uBAFE;AAGT0B,YAAAA,WAAW,EAAE;AAHJ,WARP;AAaJC,UAAAA,YAAY,EAAC,UAbT;AAcJC,UAAAA,aAAa,EAAE;AAdX;AADA,OAAR;AAkBD,KAnBD,MAmBK;AACHX,MAAAA,KAAK,GAAG,EAAR;AACD,KA/CgB,CAgDjB;;;AACA,QAAG,KAAKJ,KAAL,CAAWK,OAAd,EAAsB;AACpBA,MAAAA,OAAO,GAAG;AACRA,QAAAA,OAAO,EAAE;AACPW,UAAAA,OAAO,EAAE;AACPC,YAAAA,QAAQ,EAAE;AACRC,cAAAA,UAAU,EAAE;AADJ,aADH;AAIPC,YAAAA,OAAO,EAAE,EAJF;AAKPC,YAAAA,WAAW,EAAE;AALN;AADF;AADD,OAAV;AAWD,KAZD,MAYK;AACHf,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,SAAKgB,QAAL,CAAc;AACZzD,MAAAA,MAAM,EAAE0D,MAAM,CAACC,MAAP,CAAc,EAAd,oBAAqB,KAAKlC,KAAL,CAAWzB,MAAhC,GAAwC;AAC9CQ,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE4B,KADH;AACU;AACbuB,UAAAA,QAAQ,EAAC;AACHC,YAAAA,IAAI,EAAE,KADH;AAEHC,YAAAA,SAAS,EAAC;AAAE;AACVvC,cAAAA,KAAK,EAAC,qBADE;AAERwC,cAAAA,KAAK,EAAC;AAFE;AAFP,WAFN;AASCzD,UAAAA,SAAS,EAAE;AAAE;AACTuD,YAAAA,IAAI,EAAE,IADC;AAEPvC,YAAAA,SAAS,EAAE;AACPC,cAAAA,KAAK,EAAE;AADA;AAFJ,WATZ;AAeCyC,UAAAA,SAAS,EAAE;AAAE;AACXH,YAAAA,IAAI,EAAE,KADG;AAET;AACAC,YAAAA,SAAS,EAAE;AACP;AACAvC,cAAAA,KAAK,EAAE,CAAC,KAAD;AAFA;AAHF,WAfZ;AAuBCb,UAAAA,QAAQ,EAAE;AAAQ;AAChBmD,YAAAA,IAAI,EAAE;AADE;AAvBX,SADuC;AA4B9CxD,QAAAA,KAAK,EAAE;AACHC,UAAAA,SAAS,EAAE;AACPC,YAAAA,SAAS,EAAE,YAAUgC,KADd,CACoB;;AADpB,WADR;AAIHqB,UAAAA,QAAQ,EAAC;AACPC,YAAAA,IAAI,EAAE,KADC;AAEPC,YAAAA,SAAS,EAAC;AAAE;AACVvC,cAAAA,KAAK,EAAC,qBADE;AAERwC,cAAAA,KAAK,EAAC;AAFE;AAFH,WAJN;AAWHC,UAAAA,SAAS,EAAE;AAAE;AACXH,YAAAA,IAAI,EAAE,KADG;AAET;AACAC,YAAAA,SAAS,EAAE;AACP;AACAvC,cAAAA,KAAK,EAAE,CAAC,KAAD;AAFA;AAHF,WAXR;AAmBHb,UAAAA,QAAQ,EAAE;AAAQ;AAChBmD,YAAAA,IAAI,EAAE;AADE;AAnBP,SA5BuC;AAmD9CjD,QAAAA,MAAM,EAAE0B,KAnDsC;AAoD9C2B,QAAAA,kBAAkB,EAAC;AApD2B,OAAxC,EAsDRzB,KAtDQ,EAuDRC,OAvDQ,CADI;AA0DZf,MAAAA,YA1DY;AA2DZC,MAAAA,MA3DY;AA4DZC,MAAAA,eA5DY;AA6DZC,MAAAA;AA7DY,KAAd;AA+DD;;AACDqC,EAAAA,yBAAyB,CAACC,SAAD,EAAW;AAClC,QAAG,EACDC,IAAI,CAACC,SAAL,CAAe1E,CAAC,CAAC2E,SAAF,CAAY,KAAKlC,KAAL,CAAWC,KAAvB,CAAf,MAAkD+B,IAAI,CAACC,SAAL,CAAe1E,CAAC,CAAC2E,SAAF,CAAYH,SAAS,CAAC9B,KAAtB,CAAf,CAAlD,IACA+B,IAAI,CAACC,SAAL,CAAe1E,CAAC,CAAC2E,SAAF,CAAY,KAAKlC,KAAL,CAAWE,KAAvB,CAAf,MAAkD8B,IAAI,CAACC,SAAL,CAAe1E,CAAC,CAAC2E,SAAF,CAAYH,SAAS,CAAC7B,KAAtB,CAAf,CADlD,IAEA,KAAKF,KAAL,CAAWG,KAAX,KAAqB4B,SAAS,CAAC5B,KAF/B,IAGA6B,IAAI,CAACC,SAAL,CAAe,KAAKjC,KAAL,CAAWmC,YAA1B,MAA4CH,IAAI,CAACC,SAAL,CAAeF,SAAS,CAACI,YAAzB,CAJ3C,CAAH,EAKE;AAAA,YACOlC,KADP,GAC4B8B,SAD5B,CACO9B,KADP;AAAA,YACaC,KADb,GAC4B6B,SAD5B,CACa7B,KADb;AAAA,YACmBC,KADnB,GAC4B4B,SAD5B,CACmB5B,KADnB;AAEA,WAAKkB,QAAL,CAAc;AACZzD,QAAAA,MAAM,EAAE0D,MAAM,CAACC,MAAP,CAAc,EAAd,oBAAqB,KAAKlC,KAAL,CAAWzB,MAAhC,GAAwC;AAC9CQ,UAAAA,KAAK,EAAE;AACHC,YAAAA,IAAI,EAAE4B,KADH;AACU;AACbuB,YAAAA,QAAQ,EAAC;AACHC,cAAAA,IAAI,EAAE,KADH;AAEHC,cAAAA,SAAS,EAAC;AAAE;AACVvC,gBAAAA,KAAK,EAAC,qBADE;AAERwC,gBAAAA,KAAK,EAAC;AAFE;AAFP,aAFN;AASCzD,YAAAA,SAAS,EAAE;AAAE;AACTuD,cAAAA,IAAI,EAAE,IADC;AAEPvC,cAAAA,SAAS,EAAE;AACPC,gBAAAA,KAAK,EAAE;AADA;AAFJ,aATZ;AAeCyC,YAAAA,SAAS,EAAE;AAAE;AACXH,cAAAA,IAAI,EAAE,KADG;AAET;AACAC,cAAAA,SAAS,EAAE;AACP;AACAvC,gBAAAA,KAAK,EAAE,CAAC,KAAD;AAFA;AAHF,aAfZ;AAuBCb,YAAAA,QAAQ,EAAE;AAAQ;AAChBmD,cAAAA,IAAI,EAAE;AADE;AAvBX,WADuC;AA4B9CxD,UAAAA,KAAK,EAAE;AACHC,YAAAA,SAAS,EAAE;AACPC,cAAAA,SAAS,EAAE,YAAUgC,KADd,CACoB;;AADpB,aADR;AAIHqB,YAAAA,QAAQ,EAAC;AACPC,cAAAA,IAAI,EAAE,KADC;AAEPC,cAAAA,SAAS,EAAC;AAAE;AACVvC,gBAAAA,KAAK,EAAC,qBADE;AAERwC,gBAAAA,KAAK,EAAC;AAFE;AAFH,aAJN;AAWHC,YAAAA,SAAS,EAAE;AAAE;AACXH,cAAAA,IAAI,EAAE,KADG;AAET;AACAC,cAAAA,SAAS,EAAE;AACP;AACAvC,gBAAAA,KAAK,EAAE,CAAC,KAAD;AAFA;AAHF,aAXR;AAmBHb,YAAAA,QAAQ,EAAE;AAAQ;AAChBmD,cAAAA,IAAI,EAAE;AADE;AAnBP,WA5BuC;AAmD9CjD,UAAAA,MAAM,EAAE0B;AAnDsC,SAAxC,CADI;AAsDZR,QAAAA,YAAY,EAAEqC,SAAS,CAACI,YAAV,GAAuBJ,SAAS,CAACI,YAAV,CAAuBzC,YAA9C,GAA2D;AAACC,UAAAA,CAAC,EAAC,KAAH;AAASC,UAAAA,CAAC,EAAC;AAAX,SAtD7D;AAuDZC,QAAAA,QAAQ,EAAEkC,SAAS,CAACI,YAAV,GAAuBJ,SAAS,CAACI,YAAV,CAAuBtC,QAA9C,GAAuD,EAvDrD;AAwDZC,QAAAA,OAAO,EAAEiC,SAAS,CAACI,YAAV,GAAuBJ,SAAS,CAACI,YAAV,CAAuBrC,OAA9C,GAAsD;AAxDnD,OAAd;AA2DD;AACF;;AACDsC,EAAAA,MAAM,GAAE;AACN/E,IAAAA,OAAO,CAACgF,aAAR,CAAsB,UAAtB,EAAiC7E,QAAjC,EADM,CAEN;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,MAAM,EAAE,KAAK6B,KAAL,CAAWzB,MADrB;AAEE,MAAA,KAAK,EAAC,UAFR;AAGE,MAAA,KAAK,EAAE;AAAC0E,QAAAA,MAAM,EAAE,KAAKtC,KAAL,CAAWsC,MAAX,GAAkB,KAAKtC,KAAL,CAAWsC,MAAX,GAAkB,IAApC,GAAyC;AAAlD,OAHT;AAIE,MAAA,QAAQ,EACN;AACE,iBAAS,CAACC,MAAD,EAAQhD,MAAR,KAAiB;AAAC,eAAKF,KAAL,CAAWC,YAAX,CAAwBiD,MAAxB,EAA+B,KAAKlD,KAAL,CAAWE,MAA1C;AAAkD,SAD/E;AAEE,uBAAc,CAACgD,MAAD,EAAQhD,MAAR,KAAiB;AAC7B,gBAAMiD,SAAS,GAAGD,MAAM,CAACE,KAAP,CAAaA,KAAb,CAAmBC,OAArC;AACA,gBAAMC,SAAS,GAAGJ,MAAM,CAACE,KAAP,CAAaA,KAAb,CAAmBG,OAArC;AACA,gBAAMC,QAAQ,GAAE;AACdlD,YAAAA,CAAC,EAAE6C,SADW;AAEd5C,YAAAA,CAAC,EAAE+C;AAFW,WAAhB;AAIA,gBAAMG,GAAG,GAAGP,MAAM,CAACE,KAAP,CAAaA,KAAb,CAAmBM,MAA/B;AACA,gBAAMC,SAAS,GAAG,KAAK3D,KAAL,CAAWE,MAA7B;AACA,eAAKF,KAAL,CAAWI,aAAX,CAAyB8C,MAAzB,EAAgCO,GAAhC,EAAoCD,QAApC,EAA6CG,SAA7C;AACD,SAZH;AAaE,yBAAkB,CAACT,MAAD,EAAQhD,MAAR,KAAiB;AAAC,eAAKF,KAAL,CAAWG,eAAX,CAA2B+C,MAA3B,EAAkC,KAAKlD,KAAL,CAAWE,MAA7C;AAAqD;AAb3F,OALJ;AAqBE,MAAA,IAAI,EAAE;AAAC0D,QAAAA,QAAQ,EAAE;AAAX,OArBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAwBE,oBAAC,QAAD;AACE,MAAA,YAAY,EAAE1F,CAAC,CAAC2E,SAAF,CAAY,KAAK7C,KAAL,CAAWK,YAAvB,CADhB;AAEE,MAAA,QAAQ,EAAEnC,CAAC,CAAC2E,SAAF,CAAY,KAAK7C,KAAL,CAAWQ,QAAvB,CAFZ;AAGE,MAAA,OAAO,EAAEtC,CAAC,CAAC2E,SAAF,CAAY,KAAK7C,KAAL,CAAWS,OAAvB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,CADF;AA+BD;;AAhS2B;;AAmS9B,eAAepC,MAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React ,{ Component } from 'react'\r\nimport echarts from 'echarts'\r\nimport ReactEcharts from 'echarts-for-react'\r\nimport _ from 'lodash'\r\nimport { themeOne } from '../echartTheme'\r\nimport DropList from '../DropList'\r\nclass Column extends Component{\r\n  constructor(){\r\n    super()\r\n    const option = {\r\n\t    tooltip: {\r\n    \t\ttrigger: 'axis',\r\n    \t\taxisPointer : {            // 坐标轴指示器，坐标轴触发有效\r\n      \t\ttype : 'shadow'        // 默认为直线，可选为：'line' | 'shadow'\r\n    \t\t}\r\n      },\r\n      xAxis: {\r\n          type: 'value',\r\n          axisLabel: {\r\n              formatter: '{value} M' //这里是单位\r\n          }\r\n      },\r\n      yAxis: {\r\n          type: 'category',\r\n          data: [], //纵坐标数据\r\n          axisTick: {\r\n            alignWithLabel: true\r\n          }\r\n      },\r\n      series: [],\r\n      grid:{ //视图容器间距\r\n        top: 30,\r\n        bottom: 60,\r\n        left: 40,\r\n        right: 60,\r\n        containLabel: true\r\n      },\r\n\r\n      legend: {\r\n        type: 'scroll',\r\n        orient: 'horizontal',\r\n        center: 0,\r\n        bottom: 10,\r\n        textStyle:{ //横柱状图图例\r\n          color: '#01D39F',\r\n          fontSize:'12px'\r\n        }\r\n      }\r\n    }\r\n\r\n    this.state={\r\n      option,\r\n      onChartClick: function(){},\r\n      viewId: '',\r\n      onBrushSelected: function(){},\r\n      onContextmenu: function(){return false},\r\n\r\n      dropPosition:{x:\"0px\",y:\"0px\"},\r\n      dropData: [],\r\n      isexist: false\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    const {xData,yData,aUnit,viewId} = this.props\r\n    let onChartClick\r\n    let onBrushSelected\r\n    let onContextmenu\r\n    let brush = {}\r\n    let toolbox = {}\r\n    //点击事件判断\r\n    if(!this.props.onBrushSelected){\r\n       onBrushSelected = function(){}\r\n    }else{\r\n       onBrushSelected = this.props.onBrushSelected\r\n    }\r\n    //点击事件判断\r\n    if(!this.props.onChartClick){\r\n       onChartClick = function(){}\r\n    }else{\r\n       onChartClick = this.props.onChartClick\r\n    }\r\n    //点击事件判断\r\n    if(!this.props.onContextmenu){\r\n       onContextmenu = function(){return false}\r\n    }else{\r\n       onContextmenu = this.props.onContextmenu\r\n    }\r\n    //判断是否有添加brush\r\n    if(this.props.brush){\r\n      brush = {\r\n        brush:{\r\n          toolbox: ['lineX','clear'],//选框类型\r\n          xAxisIndex: 'all',//对所有x轴有效\r\n          brushLink: 'all',//关联所有对象数据\r\n          brushMode: 'single',//启用单选模式\r\n          outOfBrush: { //选框透明度\r\n              colorAlpha: 0.1\r\n          },\r\n          brushStyle:{ //选框样式\r\n            borderWidth: 1,\r\n            color: 'rgba(120,140,180,0.3)',\r\n            borderColor: 'rgba(120,140,180,0.8)'\r\n          },\r\n          throttleType:'debounce',\r\n          throttleDelay: 300\r\n        }\r\n      }\r\n    }else{\r\n      brush = {}\r\n    }\r\n    //判断工具盒是否添加\r\n    if(this.props.toolbox){\r\n      toolbox = {\r\n        toolbox: {\r\n          feature: {\r\n            dataZoom: {\r\n              yAxisIndex: 'none'\r\n            },\r\n            restore: {},\r\n            saveAsImage: {}\r\n          }\r\n        }\r\n      }\r\n    }else{\r\n      toolbox = {}\r\n    }\r\n\r\n    this.setState({\r\n      option: Object.assign({},{...this.state.option},{\r\n        yAxis: {\r\n            data: xData, //纵坐标数据\r\n            axisLine:{\r\n                  show: false,\r\n                  lineStyle:{ //纵坐标轴及其刻度颜色\r\n                    color:'rgba(255,255,255,0)',\r\n                    width:1\r\n                  }\r\n                },\r\n                axisLabel: { //坐标轴文字\r\n                    show: true,\r\n                    textStyle: {\r\n                        color: '#fff',\r\n                    }\r\n                },\r\n                splitLine: { //网格线\r\n                  show: false,\r\n                  //  改变轴线颜色\r\n                  lineStyle: {\r\n                      // 使用深浅的间隔色\r\n                      color: ['red']\r\n                  }\r\n                },\r\n                axisTick: {       //y轴刻度线\r\n                  show: false\r\n                }\r\n            },\r\n        xAxis: {\r\n            axisLabel: {\r\n                formatter: '{value}'+aUnit //这里是单位\r\n            },\r\n            axisLine:{\r\n              show: false,\r\n              lineStyle:{ //纵坐标轴及其刻度颜色\r\n                color:'rgba(255,255,255,1)',\r\n                width:1\r\n              }\r\n            },\r\n            splitLine: { //网格线\r\n              show: false,\r\n              //  改变轴线颜色\r\n              lineStyle: {\r\n                  // 使用深浅的间隔色\r\n                  color: ['red']\r\n              }\r\n            },\r\n            axisTick: {       //x轴刻度线\r\n              show: false\r\n            }\r\n        },\r\n        series: yData,\r\n        animationThreshold:true,\r\n      },\r\n      brush,\r\n      toolbox\r\n    ),\r\n      onChartClick,\r\n      viewId,\r\n      onBrushSelected,\r\n      onContextmenu\r\n    })\r\n  }\r\n  componentWillReceiveProps(nextProps){\r\n    if(!(\r\n      JSON.stringify(_.cloneDeep(this.props.xData)) === JSON.stringify(_.cloneDeep(nextProps.xData)) &&\r\n      JSON.stringify(_.cloneDeep(this.props.yData)) === JSON.stringify(_.cloneDeep(nextProps.yData)) &&\r\n      this.props.aUnit === nextProps.aUnit &&\r\n      JSON.stringify(this.props.dropListInfo) === JSON.stringify(nextProps.dropListInfo)\r\n    )){\r\n      const {xData,yData,aUnit} = nextProps\r\n      this.setState({\r\n        option: Object.assign({},{...this.state.option},{\r\n          yAxis: {\r\n              data: xData, //纵坐标数据\r\n              axisLine:{\r\n                    show: false,\r\n                    lineStyle:{ //纵坐标轴及其刻度颜色\r\n                      color:'rgba(255,255,255,0)',\r\n                      width:1\r\n                    }\r\n                  },\r\n                  axisLabel: { //坐标轴文字\r\n                      show: true,\r\n                      textStyle: {\r\n                          color: '#fff',\r\n                      }\r\n                  },\r\n                  splitLine: { //网格线\r\n                    show: false,\r\n                    //  改变轴线颜色\r\n                    lineStyle: {\r\n                        // 使用深浅的间隔色\r\n                        color: ['red']\r\n                    }\r\n                  },\r\n                  axisTick: {       //y轴刻度线\r\n                    show: false\r\n                  }\r\n              },\r\n          xAxis: {\r\n              axisLabel: {\r\n                  formatter: '{value}'+aUnit //这里是单位\r\n              },\r\n              axisLine:{\r\n                show: false,\r\n                lineStyle:{ //纵坐标轴及其刻度颜色\r\n                  color:'rgba(255,255,255,1)',\r\n                  width:1\r\n                }\r\n              },\r\n              splitLine: { //网格线\r\n                show: false,\r\n                //  改变轴线颜色\r\n                lineStyle: {\r\n                    // 使用深浅的间隔色\r\n                    color: ['red']\r\n                }\r\n              },\r\n              axisTick: {       //x轴刻度线\r\n                show: false\r\n              }\r\n          },\r\n          series: yData\r\n        }),\r\n        dropPosition: nextProps.dropListInfo?nextProps.dropListInfo.dropPosition:{x:\"0px\",y:\"0px\"},\r\n        dropData: nextProps.dropListInfo?nextProps.dropListInfo.dropData:[],\r\n        isexist: nextProps.dropListInfo?nextProps.dropListInfo.isexist:false\r\n      })\r\n\r\n    }\r\n  }\r\n  render(){\r\n    echarts.registerTheme('my_theme',themeOne)\r\n    //const viewId = this.state.viewId\r\n    return(\r\n      <div>\r\n        <ReactEcharts\r\n          option={this.state.option}\r\n          theme=\"my_theme\"\r\n          style={{height: this.props.height?this.props.height+\"px\":\"300px\"}}\r\n          onEvents={\r\n            {\r\n              'click': (params,viewId)=>{this.state.onChartClick(params,this.state.viewId)},\r\n              'contextmenu':(params,viewId)=>{\r\n                const xPosition = params.event.event.clientX\r\n                const yPosition = params.event.event.clientY\r\n                const position= {\r\n                  x: xPosition,\r\n                  y: yPosition\r\n                }\r\n                const dom = params.event.event.target\r\n                const curViewId = this.state.viewId\r\n                this.state.onContextmenu(params,dom,position,curViewId)\r\n              },\r\n              'brushSelected' : (params,viewId)=>{this.state.onBrushSelected(params,this.state.viewId)}\r\n            }\r\n          }\r\n          opts={{renderer: 'canvas'}}\r\n        />\r\n        <DropList\r\n          dropPosition={_.cloneDeep(this.state.dropPosition)}\r\n          dropData={_.cloneDeep(this.state.dropData)}\r\n          isexist={_.cloneDeep(this.state.isexist)}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Column\r\n\r\n//viewId 视图ID，通常指这个视图的这条数据ID\r\n//xData  横轴数据，为数组\r\n//yData  纵轴数据，为数组\r\n// [{\r\n//      name:'邮件营销',\r\n//      type:'line',\r\n//      data:[120, 132, 101, 134, 90, 230, 210]\r\n//  },\r\n//  {\r\n//      name:'联盟广告',\r\n//      type:'line',\r\n//      data:[220, 182, 191, 234, 290, 330, 310]\r\n//  }]\r\n//aUnit  单位，字符串\r\n//toolbox  值为布尔值，是否开启工具盒 默认为false\r\n//brush 值为布尔值，是否开启刷子工具  默认为false\r\n//onChartClick  值为一个函数，默认为空\r\n//onBrushSelected 值为一个函数，默认为空\r\n"]},"metadata":{},"sourceType":"module"}