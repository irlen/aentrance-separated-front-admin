'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @file 给地图添加监听事件
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author hedongran
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


/**
 * 防抖函数
 * @param method 事件触发的操作
 * @param delay 多少毫秒内连续触发事件，不会执行
 * @returns {Function}
 */
function debounce(method, delay) {
    var timer = null;
    return function () {
        var self = this,
            args = arguments;
        timer && clearTimeout(timer);
        timer = setTimeout(function () {
            method.apply(self, args);
        }, delay);
    };
}

/**
 * 节流函数
 * @param method 事件触发的操作
 * @param mustRunDelay 间隔多少毫秒需要触发一次事件
 * @returns {Function}
 */
function throttle(method, mustRunDelay) {
    var timer = void 0,
        args = arguments,
        start = void 0;
    return function loop() {
        var self = this;
        var now = Date.now();
        if (!start) {
            start = now;
        }
        if (timer) {
            clearTimeout(timer);
        }
        if (now - start >= mustRunDelay) {
            method.apply(self, args);
            start = now;
        } else {
            timer = setTimeout(function () {
                loop.apply(self, args);
            }, 50);
        }
    };
}

var MapListener = function (_React$Component) {
    _inherits(MapListener, _React$Component);

    function MapListener(props) {
        _classCallCheck(this, MapListener);

        var _this = _possibleConstructorReturn(this, (MapListener.__proto__ || Object.getPrototypeOf(MapListener)).call(this, props));

        _this.map = _this.props.map;
        return _this;
    }

    /**
     * 设置默认的props属性
     */


    _createClass(MapListener, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.onZoomend) {
                this._bindZoomendEvent();
            }
            if (this.props.onDragend) {
                this._bindDragendEvent();
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var map = this.map;
            if (this.props.onZoomend) {
                map.removeEventListener('zoomend', this.onZoomend);
            }
            if (this.props.onDragend) {
                map.removeEventListener('dragend', this.onDragend);
            }
        }
    }, {
        key: '_bindZoomendEvent',
        value: function _bindZoomendEvent() {
            var map = this.map;
            var _props = this.props,
                fn = _props.onZoomend,
                eventType = _props.eventType,
                delay = _props.delay;

            if (eventType === 'debounce') {
                this.onZoomend = debounce(fn, delay);
            } else if (eventType === 'throttle') {
                this.onZoomend = throttle(fn, delay);
            } else {
                this.onZoomend = fn;
            }
            map.addEventListener('zoomend', this.onZoomend);
        }
    }, {
        key: '_bindDragendEvent',
        value: function _bindDragendEvent() {
            var map = this.map;
            var _props2 = this.props,
                fn = _props2.onDragend,
                eventType = _props2.eventType,
                delay = _props2.delay;

            if (eventType === 'debounce') {
                this.onDragend = debounce(fn, delay);
            } else if (eventType === 'throttle') {
                this.onDragend = throttle(fn, delay);
            } else {
                this.onDragend = fn;
            }
            map.addEventListener('dragend', this.onDragend);
        }
    }, {
        key: 'render',
        value: function render() {
            return null;
        }
    }], [{
        key: 'defaultProps',
        get: function get() {
            return {
                eventType: 'debounce', // debounce防抖, throttle节流, direct直接执行
                delay: 500
            };
        }
    }]);

    return MapListener;
}(_react2.default.Component);

exports.default = MapListener;